{
	[

{"cursor":"AmZldGNoAAJqcwACZGVtbwA=","key":["fetch","js","demo"],"value":"// Getting all posts\nfetch(\"http://localhost:3000/posts\")\n  .then((response) => {\n    return response.json();\n  })\n  .then((json) => {\n    console.log(json);\n  });\n\n// Getting all posts with the user embedded\nfetch(\"http://localhost:3000/posts?_expand=user\")\n  .then((response) => {\n    return response.json();\n  })\n  .then((json) => {\n    console.log(json);\n  });\n\n// Creating a post\nfetch(\"http://localhost:3000/posts\", {\n  method: \"POST\",\n  body: JSON.stringify({\n    title: \"My new post\",\n    body: \"My post body\",\n    userId: \"0\",\n  }),\n  headers: {\n    \"Content-type\": \"application/json\",\n  },\n})\n  .then((response) => {\n    return response.json();\n  })\n  .then((json) => {\n    console.log(json);\n  });\n\n// Deleting a post (id = Bmogfbz)\nfetch(\"http://localhost:3000/posts/Bmogfbz\", {\n  method: \"DELETE\",\n}).then((response) => {\n  console.log(response.status);\n});\n\n// Partially updating Post 0\nfetch(\"http://localhost:3000/posts/0\", {\n  method: \"PATCH\",\n  body: JSON.stringify({\n    title: \"Post 0 (updated by David)\",\n  }),\n  headers: {\n    \"Content-type\": \"application/json\",\n  },\n})\n  .then((response) => {\n    return response.json();\n  })\n  .then((json) => {\n    console.log(json);\n  });\n\n// Fully updating Post 0\n// All attributes are required with PUT\nfetch(\"http://localhost:3000/posts/0\", {\n  method: \"PUT\",\n  body: JSON.stringify({\n    title: \"Post 0 (updated by David)\",\n    body: \"Updated body\",\n    userId: \"0\",\n  }),\n  headers: {\n    \"Content-type\": \"application/json\",\n  },\n})\n  .then((response) => {\n    return response.json();\n  })\n  .then((json) => {\n    console.log(json);\n  });\n\n// Fetching a collection of post resources with related data\n// http://localhost:3000/posts?_embed=comments&_expand=category&_expand=user\n\n// Fetching a collection of post resources sorted by the post title in descending order\n// http://localhost:3000/posts?_sort=title&_order=desc","version":"01000000009032100000"},

{"cursor":"Ib_wAAAAAAAA","key":[1],"value":"import requests\nfrom requests.structures import CaseInsensitiveDict\n\nurl = \"https://deno-json-server.deno.dev/posts?\"\n\nheaders = CaseInsensitiveDict()\nheaders[\"Accept\"] = \"application/json\"\nheaders[\"Content-Type\"] = \"application/json\"\n\ndata = \"\"\"\n{\n  \"title\": \"aaaaaaaaaaaaa\",\n  \"view\": \"aaaaaaaaaaaaa\"\n}\n\"\"\"\n\n\nresp = requests.post(url, headers=headers, data=data)\n\nprint(resp.status_code)\n\n-----------------------------------\nconst url = 'https://deno-json-server.deno.dev/posts?';\n\nconst data = `{\n  \"title\": \"aaaaaaaaaaaaa\",\n  \"view\": \"aaaaaaaaaaaaa\"\n}`;\n\nconst response = await fetch(url, {\n    method: 'POST',\n    headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n    },\n    body: data,\n});\n\nconst text = await response.text();\n\nconsole.log(text);\n--------------------------------------\n#!/bin/bash\n\ncurl -X POST https://deno-json-server.deno.dev/posts? -H \"Accept: application/json\" -H \"Content-Type: application/json\" --data-binary @- <<DATA\n{\n  \"title\": \"aaaaaaaaaaaaa\",\n  \"view\": \"aaaaaaaaaaaaa\"\n}\nDATA\n\n-----------------------------------------------\nimport express from \"npm:express@4.18.2\";\nimport data from \"https://github.com/denoland/examples/raw/refs/heads/main/with-express/data.json\" with { type: \"json\" };\n\nconst app = express();\n\napp.get(\"/\", (req, res) => {\n  res.send(\"Welcome to the Dinosaur API!\");\n});\n\napp.get(\"/api\", (req, res) => {\n  res.send(data);\n});\n\napp.get(\"/api/:dinosaur\", (req, res) => {\n  if (req?.params?.dinosaur) {\n    const found = data.find((item) =>\n      item.name.toLowerCase() === req.params.dinosaur.toLowerCase()\n    );\n    if (found) {\n      res.send(found);\n    } else {\n      res.send(\"No dinosaurs found.\");\n    }\n  }\n});\n\napp.listen(8000);\n-------------------------------------------------\nexport interface User {\n  id: string;\n  email: string;\n  name: string;\n  password: string;\n}\n\nexport interface Address {\n  city: string;\n  street: string;\n}\n\n/**\n * Open KV.\n */\n\nconst kv = await Deno.openKv();\n\n/**\n * Upsert user.\n * @param user\n */\n\nexport async function upsertUser(user: User) {\n  const userKey = [\"user\", user.id];\n  const userByEmailKey = [\"user_by_email\", user.email];\n\n  const oldUser = await kv.get<User>(userKey);\n\n  if (!oldUser.value) {\n    const ok = await kv.atomic()\n      .check(oldUser)\n      .set(userByEmailKey, user.id)\n      .set(userKey, user)\n      .commit();\n    if (!ok) throw new Error(\"Something went wrong.\");\n  } else {\n    const ok = await kv.atomic()\n      .check(oldUser)\n      .delete([\"user_by_email\", oldUser.value.email])\n      .set(userByEmailKey, user.id)\n      .set(userKey, user)\n      .commit();\n    if (!ok) throw new Error(\"Something went wrong.\");\n  }\n}\n\n/**\n * Update user and address.\n * @param user\n * @param address\n */\n\nexport async function updateUserAndAddress(user: User, address: Address) {\n  const userKey = [\"user\", user.id];\n  const userByEmailKey = [\"user_by_email\", user.email];\n  const addressKey = [\"user_address\", user.id];\n\n  const oldUser = await kv.get<User>(userKey);\n\n  if (!oldUser.value) {\n    const ok = await kv.atomic()\n      .check(oldUser)\n      .set(userByEmailKey, user.id)\n      .set(userKey, user)\n      .set(addressKey, address)\n      .commit();\n    if (!ok) throw new Error(\"Something went wrong.\");\n  } else {\n    const ok = await kv.atomic()\n      .check(oldUser)\n      .delete([\"user_by_email\", oldUser.value.email])\n      .set(userByEmailKey, user.id)\n      .set(userKey, user)\n      .set(addressKey, address)\n      .commit();\n    if (!ok) throw new Error(\"Something went wrong.\");\n  }\n}\n\n/**\n * Get all users.\n * @returns <User>\n */\n\nexport async function getAllUsers() {\n  const users = [];\n  for await (const res of kv.list({ prefix: [\"user\"] })) {\n    users.push(res.value);\n  }\n  return users;\n}\n\n/**\n * Get user by id.\n * @param id\n * @returns\n */\n\nexport async function getUserById(id: string): Promise<User> {\n  const key = [\"user\", id];\n  return (await kv.get(key)).value as User;\n}\n\n/**\n * Get user by email.\n * @param email\n * @returns\n */\n\nexport async function getUserByEmail(email: string) {\n  const userByEmailKey = [\"user_by_email\", email];\n  const id = (await kv.get(userByEmailKey)).value as string;\n  const userKey = [\"user\", id];\n  return (await kv.get(userKey)).value as User;\n}\n\n/**\n * Get address by user id.\n * @param id\n * @returns Address\n */\n\nexport async function getAddressByUserId(id: string) {\n  const key = [\"user_address\", id];\n  return (await kv.get(key)).value as Address;\n}\n\n/**\n * Delete user by id.\n * @param id\n */\n\nexport async function deleteUserById(id: string) {\n  const userKey = [\"user\", id];\n  const userRes = await kv.get(userKey);\n  if (!userRes.value) return;\n  const userByEmailKey = [\"user_by_email\", userRes.value.email];\n  const addressKey = [\"user_address\", id];\n\n  await kv.atomic()\n    .check(userRes)\n    .delete(userKey)\n    .delete(userByEmailKey)\n    .delete(addressKey)\n    .commit();\n}","version":"0100000000d048500000"},{"cursor":"IcAAAAAAAAAA","key":[2],"value":"22222222222222222222","version":"01000000001005920000"},
{"cursor":"IcAIAAAAAAAA","key":[3],"value":"33333333333333333333","version":"0100000000200b200000"}]}
