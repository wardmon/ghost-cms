import asyncio
import logging

from chromewhip import Chrome
from chromewhip.protocol import browser, page, dom

# see logging from chromewhip
logging.basicConfig(level=logging.DEBUG)

HOST = '127.0.0.1'
PORT = 9222

loop = asyncio.get_event_loop()
c = Chrome(host=HOST, port=PORT)

loop.run_until_complete(c.connect())

    
# use the startup tab or create a new one
tab = c.tabs[0]
tab = loop.run_until_complete(c.create_tab())

loop.run_until_complete(tab.enable_page_events())

def sync_cmd(*args, **kwargs):
    return loop.run_until_complete(tab.send_command(*args, **kwargs))
    
# send_command will return once the frameStoppedLoading event is received THAT matches
# the frameId that it is in the returned command payload.
result = sync_cmd(page.Page.navigate(url='http://nzherald.co.nz'), 
                  await_on_event_type=page.FrameStoppedLoadingEvent)

# send_command always returns a dict with keys `ack` and `event`
# `ack` contains the payload on response of a command
# `event` contains the payload of the awaited event if `await_on_event_type` is provided
ack = result['ack']['result']
event = result['event']
assert ack['frameId'] == event.frameId

sync_cmd(page.Page.setDeviceMetricsOverride(width=800,
                                            height=600,
                                            deviceScaleFactor=0.0,
                                            mobile=False))


result = sync_cmd(dom.DOM.getDocument())

dom_obj = result['ack']['result']['root']

# Python types are determined by the `types` fields in the JSON reference for the
# devtools protocol, and `send_command` will convert if possible.
assert isinstance(dom_obj, dom.Node)

print(dom_obj.nodeId)
print(dom_obj.nodeName)

# close the tab
loop.run_until_complete(c.close_tab(tab))

# or close the browser via Devtools API
tab = c.tabs[0]
sync_cmd(browser.Browser.close())