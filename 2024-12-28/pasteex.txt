8、重定向侦测

该网站用来查看某个网址的重定向（redirect）情况。8、重定向侦测

该网站用来查看某个网址的重定向（redirect）情况。tall a little extension to allow access to Chttps://pagespy.jikejishu.com/#/devtools?address=aec89720-14e2-4f80-80a4-166ec1fcb45e.local8、重定向侦测

该网站用来查看某个网址的重定向（redirect）情况。8、重定向侦测

该网站用来查看某个网址的重定向（redirect）情况。tall a little extension to allow access to Chttps://pagespy.jikejishu.com/#/devtools?address=aec89720-14e2-4f80-80a4-166ec1fcb45e.localhttps://pagespy.jikejishu.com/#/devtools?address=e546e926-3e80-449c-860e-c320e0503fc2.localaa=interact(f, x='Hi there!');single_htmlinteract_manual(slow_function,i=FloatSlider(min=1e5, max=1e7, step=1e5));""""8、重定向侦测

该网站用来查看某个网址的重定向（redirect）情况。8、重定向侦测

该网站用来查看某个网址的重定向（redirect）情况。tall a little extension to allow access to Chttps://pagespy.jikejishu.com/#/devtools?address=aec89720-14e2-4f80-80a4-166ec1fcb45e.localhttps://pagespy.jikejishu.com/#/devtools?address=e546e926-3e80-449c-860e-c320e0503fc2.localaa=interact(f, x='Hi there!');single_htmlinteract_manual(slow_function,i=FloatSlider(min=1e5, max=1e7, step=1e5));""""""layout=Layout(width='50%', height='80px')[Jupyter Notebook Viewer](https://nbviewer.org/github/koldunovn/nk_public_notebooks/blob/master/Apache_log.ipynb)4、13个对前端开发有用的 Chrome 插件（英文）



本文介绍13个用于前端开发的 Chrome 插件。https://jsdevspace.substack.com/p/13-super-useful-chrome-plugins-for1、Presenterm



将 Markdown 文件转成幻灯片，在命令行播放的开源工具。（@lengyijun 投稿）8、OpenAuth



网页登录的第三方认证的集成库。9、Schemio



基于 Web 的示意图可视化编辑器。10、Buzee



一个桌面软件，提供本地文件的全文搜索（包括图片里面的文字），支持 Windows 和 Mac。6、浏览器的人脸检测能力（英文）



Chrome 浏览器已经支持 Shape Detection API，直接调用这个 API，不用加载任何外部库，就可以通过浏览器识别人脸和二维码。https://learnbyexample.github.io/atom.xml8、重定向侦测

该网站用来查看某个网址的重定向（redirect）情况。8、重定向侦测

该网站用来查看某个网址的重定向（redirect）情况。tall a little extension to allow access to Chttps://pagespy.jikejishu.com/#/devtools?address=aec89720-14e2-4f80-80a4-166ec1fcb45e.localhttps://pagespy.jikejishu.com/#/devtools?address=e546e926-3e80-449c-860e-c320e0503fc2.localaa=interact(f, x='Hi there!');single_htmlinteract_manual(slow_function,i=FloatSlider(min=1e5, max=1e7, step=1e5));""""""layout=Layout(width='50%', height='80px')[Jupyter Notebook Viewer](https://nbviewer.org/github/koldunovn/nk_public_notebooks/blob/master/Apache_log.ipynb)4、13个对前端开发有用的 Chrome 插件（英文）



本文介绍13个用于前端开发的 Chrome 插件。https://jsdevspace.substack.com/p/13-super-useful-chrome-plugins-for1、Presenterm



将 Markdown 文件转成幻灯片，在命令行播放的开源工具。（@lengyijun 投稿）8、OpenAuth



网页登录的第三方认证的集成库。9、Schemio



基于 Web 的示意图可视化编辑器。10、Buzee



一个桌面软件，提供本地文件的全文搜索（包括图片里面的文字），支持 Windows 和 Mac。6、浏览器的人脸检测能力（英文）



Chrome 浏览器已经支持 Shape Detection API，直接调用这个 API，不用加载任何外部库，就可以通过浏览器识别人脸和二维码。https://learnbyexample.github.io/atom.xml5、ffmpeg.wasm

ffmpeg 库的 wasm 移植，使得 Node.js 可以用这个库编辑视频。、PageSpeed Insights



谷歌官方的网页性能的在线评分工具。2、HTTP Toolkit

这个工具可以拦截和查看 HTTP/HTTPS 请求，并且可以 mock 服务器的回应。3、imgproxy

一个 Go 语言写的图片代理网关，可以代理远程图片，并且提供格式转换和大小缩放功能。8、Slouch stoppah

一个在线小工具，通过电脑摄像头，判断坐在屏幕前面的人的坐姿是否正确。javascript:(function () { var script = document.createElement('script'); script.src="https://cdn.jsdelivr.net/npm/eruda"; document.body.append(script); script.onload = function () { eruda.init(); } })();websocat ws://127.0.0.1:import json
import requests
import websocket


class Shell(object):
    def __init__(self, host='127.0.0.1', port=9222):
        """ init """
        self.host = host
        self.port = port
        self.soc = None
        self.connected = None
        self.tablist = None
        self.find_tabs()

    def connect(self, tab=None, update_tabs=True):
        if update_tabs or not self.tablist:
            self.find_tabs()
        if not tab:
            tab = 0
        wsurl = self.tablist[tab]['webSocketDebuggerUrl']
        #if self.soc.connected:
        #    self.soc.close()
        self.soc = websocket.create_connection(wsurl)
        return self.soc

    def close(self):
        """ Close websocket connection to remote browser."""
        if self.soc:
            self.soc.close()
            self.soc = None

    def find_tabs(self):
        """Connect to host:port and request list of tabs
             return list of dicts of data about open tabs."""
        # find websocket endpoint
        response = requests.get("http://%s:%s/json" % (self.host, self.port))
        self.tablist = json.loads(response.text)
        return self.tablist

    def open_url(self, url):
        """Open a URL in the oldest tab."""
        if not self.soc or not self.soc.connected:
            self.connect(tab=0)
        # force the 'oldest' tab to load url
        navcom = json.dumps({"id": 0,
                             "method": "Page.navigate",
                             "params": {"url": url}})
        # This code would open a new window, but browsers really dont
        # like doing so.  And, the results are irritating at best.
        # navcom=json.dumps({"id":0,"method":"Runtime.evaluate",
        #  "params":{"expression": "window.open('%s', #'_blank',
        # 'toolbar=1,scrollbars=1,location=1,statusbar=0,menubar=1,resizable=1'
        # )" % (url) }})Runtime.evaluate
        self.soc.send(navcom)
        return self.soc.recv()
shell = Shell(host='127.0.0.1', port=9222)  
#shell.connect(0)
#url = 'http://www.clift.org/fred' # shameless
url = 'http://example.com' # shameless
#navcom = json.dumps({"id":0, "method":"Target.createTarget", "params":{"url":url}})
#shell.soc.send(navcom)
shell.connect(0)
navcom = json.dumps({"id":0, "method":"Network.getCookies", "params":{"url":url}})
shell.soc.send(navcom)
response = json.loads(shell.soc.recv())

print(len(shell.find_tabs()))
print(shell.find_tabs()[1]["url"])
#print(shell.find_tabs()[1])
print(response)import json
import requests
import websocket


class Shell(object):
    def __init__(self, host='127.0.0.1', port=9222):
        """ init """
        self.host = host
        self.port = port
        self.soc = None
        self.connected = None
        self.tablist = None
        self.find_tabs()

    def connect(self, tab=None, update_tabs=True):
        if update_tabs or not self.tablist:
            self.find_tabs()
        if not tab:
            tab = 0
        wsurl = self.tablist[tab]['webSocketDebuggerUrl']
        #if self.soc.connected:
        #    self.soc.close()
        self.soc = websocket.create_connection(wsurl)
        return self.soc

    def close(self):
        """ Close websocket connection to remote browser."""
        if self.soc:
            self.soc.close()
            self.soc = None

    def find_tabs(self):
        """Connect to host:port and request list of tabs
             return list of dicts of data about open tabs."""
        # find websocket endpoint
        response = requests.get("http://%s:%s/json" % (self.host, self.port))
        self.tablist = json.loads(response.text)
        return self.tablist

    def open_url(self, url):
        """Open a URL in the oldest tab."""
        if not self.soc or not self.soc.connected:
            self.connect(tab=0)
        # force the 'oldest' tab to load url
        navcom = json.dumps({"id": 0,
                             "method": "Page.navigate",
                             "params": {"url": url}})
        # This code would open a new window, but browsers really dont
        # like doing so.  And, the results are irritating at best.
        # navcom=json.dumps({"id":0,"method":"Runtime.evaluate",
        #  "params":{"expression": "window.open('%s', #'_blank',
        # 'toolbar=1,scrollbars=1,location=1,statusbar=0,menubar=1,resizable=1'
        # )" % (url) }})Runtime.evaluate
        self.soc.send(navcom)
        return self.soc.recv()
shell = Shell(host='127.0.0.1', port=9222)  
#shell.connect(0)
#url = 'http://www.clift.org/fred' # shameless
url = 'http://example.com' # shameless
#navcom = json.dumps({"id":0, "method":"Target.createTarget", "params":{"url":url}})
#shell.soc.send(navcom)
shell.connect(0)
navcom = json.dumps({"id":0, "method":"Network.getCookies", "params":{"url":url}})
shell.soc.send(navcom)
response = json.loads(shell.soc.recv())

print(len(shell.find_tabs()))
print(shell.find_tabs()[1]["url"])
#print(shell.find_tabs()[1])
print(response)https://panel4.serv00.com/mysql/8、重定向侦测

该网站用来查看某个网址的重定向（redirect）情况。8、重定向侦测

该网站用来查看某个网址的重定向（redirect）情况。tall a little extension to allow access to Chttps://pagespy.jikejishu.com/#/devtools?address=aec89720-14e2-4f80-80a4-166ec1fcb45e.localhttps://pagespy.jikejishu.com/#/devtools?address=e546e926-3e80-449c-860e-c320e0503fc2.localaa=interact(f, x='Hi there!');single_htmlinteract_manual(slow_function,i=FloatSlider(min=1e5, max=1e7, step=1e5));""""""layout=Layout(width='50%', height='80px')[Jupyter Notebook Viewer](https://nbviewer.org/github/koldunovn/nk_public_notebooks/blob/master/Apache_log.ipynb)4、13个对前端开发有用的 Chrome 插件（英文）



本文介绍13个用于前端开发的 Chrome 插件。https://jsdevspace.substack.com/p/13-super-useful-chrome-plugins-for1、Presenterm



将 Markdown 文件转成幻灯片，在命令行播放的开源工具。（@lengyijun 投稿）8、OpenAuth



网页登录的第三方认证的集成库。9、Schemio



基于 Web 的示意图可视化编辑器。10、Buzee



一个桌面软件，提供本地文件的全文搜索（包括图片里面的文字），支持 Windows 和 Mac。6、浏览器的人脸检测能力（英文）



Chrome 浏览器已经支持 Shape Detection API，直接调用这个 API，不用加载任何外部库，就可以通过浏览器识别人脸和二维码。https://learnbyexample.github.io/atom.xml5、ffmpeg.wasm

ffmpeg 库的 wasm 移植，使得 Node.js 可以用这个库编辑视频。、PageSpeed Insights



谷歌官方的网页性能的在线评分工具。2、HTTP Toolkit

这个工具可以拦截和查看 HTTP/HTTPS 请求，并且可以 mock 服务器的回应。3、imgproxy

一个 Go 语言写的图片代理网关，可以代理远程图片，并且提供格式转换和大小缩放功能。8、Slouch stoppah

一个在线小工具，通过电脑摄像头，判断坐在屏幕前面的人的坐姿是否正确。javascript:(function () { var script = document.createElement('script'); script.src="https://cdn.jsdelivr.net/npm/eruda"; document.body.append(script); script.onload = function () { eruda.init(); } })();websocat ws://127.0.0.1:import json
import requests
import websocket


class Shell(object):
    def __init__(self, host='127.0.0.1', port=9222):
        """ init """
        self.host = host
        self.port = port
        self.soc = None
        self.connected = None
        self.tablist = None
        self.find_tabs()

    def connect(self, tab=None, update_tabs=True):
        if update_tabs or not self.tablist:
            self.find_tabs()
        if not tab:
            tab = 0
        wsurl = self.tablist[tab]['webSocketDebuggerUrl']
        #if self.soc.connected:
        #    self.soc.close()
        self.soc = websocket.create_connection(wsurl)
        return self.soc

    def close(self):
        """ Close websocket connection to remote browser."""
        if self.soc:
            self.soc.close()
            self.soc = None

    def find_tabs(self):
        """Connect to host:port and request list of tabs
             return list of dicts of data about open tabs."""
        # find websocket endpoint
        response = requests.get("http://%s:%s/json" % (self.host, self.port))
        self.tablist = json.loads(response.text)
        return self.tablist

    def open_url(self, url):
        """Open a URL in the oldest tab."""
        if not self.soc or not self.soc.connected:
            self.connect(tab=0)
        # force the 'oldest' tab to load url
        navcom = json.dumps({"id": 0,
                             "method": "Page.navigate",
                             "params": {"url": url}})
        # This code would open a new window, but browsers really dont
        # like doing so.  And, the results are irritating at best.
        # navcom=json.dumps({"id":0,"method":"Runtime.evaluate",
        #  "params":{"expression": "window.open('%s', #'_blank',
        # 'toolbar=1,scrollbars=1,location=1,statusbar=0,menubar=1,resizable=1'
        # )" % (url) }})Runtime.evaluate
        self.soc.send(navcom)
        return self.soc.recv()
shell = Shell(host='127.0.0.1', port=9222)  
#shell.connect(0)
#url = 'http://www.clift.org/fred' # shameless
url = 'http://example.com' # shameless
#navcom = json.dumps({"id":0, "method":"Target.createTarget", "params":{"url":url}})
#shell.soc.send(navcom)
shell.connect(0)
navcom = json.dumps({"id":0, "method":"Network.getCookies", "params":{"url":url}})
shell.soc.send(navcom)
response = json.loads(shell.soc.recv())

print(len(shell.find_tabs()))
print(shell.find_tabs()[1]["url"])
#print(shell.find_tabs()[1])
print(response)import json
import requests
import websocket


class Shell(object):
    def __init__(self, host='127.0.0.1', port=9222):
        """ init """
        self.host = host
        self.port = port
        self.soc = None
        self.connected = None
        self.tablist = None
        self.find_tabs()

    def connect(self, tab=None, update_tabs=True):
        if update_tabs or not self.tablist:
            self.find_tabs()
        if not tab:
            tab = 0
        wsurl = self.tablist[tab]['webSocketDebuggerUrl']
        #if self.soc.connected:
        #    self.soc.close()
        self.soc = websocket.create_connection(wsurl)
        return self.soc

    def close(self):
        """ Close websocket connection to remote browser."""
        if self.soc:
            self.soc.close()
            self.soc = None

    def find_tabs(self):
        """Connect to host:port and request list of tabs
             return list of dicts of data about open tabs."""
        # find websocket endpoint
        response = requests.get("http://%s:%s/json" % (self.host, self.port))
        self.tablist = json.loads(response.text)
        return self.tablist

    def open_url(self, url):
        """Open a URL in the oldest tab."""
        if not self.soc or not self.soc.connected:
            self.connect(tab=0)
        # force the 'oldest' tab to load url
        navcom = json.dumps({"id": 0,
                             "method": "Page.navigate",
                             "params": {"url": url}})
        # This code would open a new window, but browsers really dont
        # like doing so.  And, the results are irritating at best.
        # navcom=json.dumps({"id":0,"method":"Runtime.evaluate",
        #  "params":{"expression": "window.open('%s', #'_blank',
        # 'toolbar=1,scrollbars=1,location=1,statusbar=0,menubar=1,resizable=1'
        # )" % (url) }})Runtime.evaluate
        self.soc.send(navcom)
        return self.soc.recv()
shell = Shell(host='127.0.0.1', port=9222)  
#shell.connect(0)
#url = 'http://www.clift.org/fred' # shameless
url = 'http://example.com' # shameless
#navcom = json.dumps({"id":0, "method":"Target.createTarget", "params":{"url":url}})
#shell.soc.send(navcom)
shell.connect(0)
navcom = json.dumps({"id":0, "method":"Network.getCookies", "params":{"url":url}})
shell.soc.send(navcom)
response = json.loads(shell.soc.recv())

print(len(shell.find_tabs()))
print(shell.find_tabs()[1]["url"])
#print(shell.find_tabs()[1])
print(response)https://panel4.serv00.com/mysql/github/koldunovn/nk_public_notebooks/blob/master/Apache_log.ipynbhttps://raw.githubusercontent.com/koldunovn/nk_public_notebooks/master/Apache_log.ipynbselect * from messagesjavascript:date = new Date();
url_root = 'http://nbviewer.ipython.org/';
url = null;
gist_re = /^https?:\/\/gist\.github\.com\/(?:\w+\/)?([a-f0-9]+)$/;
github_re = /^https:\/\/(github\.com\/.*\/)blob\/(.*\.ipynb)$/;
https_re = /^https:\/\/(.*\.ipynb)$/;
http_re = /^http:\/\/(.*\.ipynb)$/;
loc = location.href;
if (gist_re.test(loc)) {
    gist = gist_re.exec(loc);
    url = url_root + gist[1];
} else if (github_re.test(loc)) {
    path = github_re.exec(loc);
    url = url_root + 'urls/raw.' + path[1] + path[2];
} else if (https_re.test(loc)) {
    path = https_re.exec(loc);
    url = url_root + 'urls/' + path[1];
} else if (http_re.test(loc)) {
    path = http_re.exec(loc);
    url = url_root + 'url/' + path[1];}
if (url) {void(window.open(url, 'nbviewer' + date.getTime()));}javascript:date = new Date();
url_root = 'http://nbviewer.ipython.org/';
url = null;
gist_re = /^https?:\/\/gist\.github\.com\/(?:\w+\/)?([a-f0-9]+)$/;
github_re = /^https:\/\/(github\.com\/.*\/)blob\/(.*\.ipynb)$/;
https_re = /^https:\/\/(.*\.ipynb)$/;
http_re = /^http:\/\/(.*\.ipynb)$/;
loc = location.href;
if (gist_re.test(loc)) {
    gist = gist_re.exec(loc);
    url = url_root + gist[1];
} else if (github_re.test(loc)) {
    path = github_re.exec(loc);
    url = url_root + 'urls/raw.' + path[1] + path[2];
} else if (https_re.test(loc)) {
    path = https_re.exec(loc);
    url = url_root + 'urls/' + path[1];
} else if (http_re.test(loc)) {
    path = http_re.exec(loc);
    url = url_root + 'url/' + path[1];}
if (url) {void(window.open(url, 'nbviewer' + date.getTime()));}display(slider)pip install jupyterlab-deck8、重定向侦测

该网站用来查看某个网址的重定向（redirect）情况。8、重定向侦测

该网站用来查看某个网址的重定向（redirect）情况。tall a little extension to allow access to Chttps://pagespy.jikejishu.com/#/devtools?address=aec89720-14e2-4f80-80a4-166ec1fcb45e.localhttps://pagespy.jikejishu.com/#/devtools?address=e546e926-3e80-449c-860e-c320e0503fc2.localaa=interact(f, x='Hi there!');single_htmlinteract_manual(slow_function,i=FloatSlider(min=1e5, max=1e7, step=1e5));""""""layout=Layout(width='50%', height='80px')[Jupyter Notebook Viewer](https://nbviewer.org/github/koldunovn/nk_public_notebooks/blob/master/Apache_log.ipynb)4、13个对前端开发有用的 Chrome 插件（英文）



本文介绍13个用于前端开发的 Chrome 插件。https://jsdevspace.substack.com/p/13-super-useful-chrome-plugins-for1、Presenterm



将 Markdown 文件转成幻灯片，在命令行播放的开源工具。（@lengyijun 投稿）8、OpenAuth



网页登录的第三方认证的集成库。9、Schemio



基于 Web 的示意图可视化编辑器。10、Buzee



一个桌面软件，提供本地文件的全文搜索（包括图片里面的文字），支持 Windows 和 Mac。6、浏览器的人脸检测能力（英文）



Chrome 浏览器已经支持 Shape Detection API，直接调用这个 API，不用加载任何外部库，就可以通过浏览器识别人脸和二维码。https://learnbyexample.github.io/atom.xml5、ffmpeg.wasm

ffmpeg 库的 wasm 移植，使得 Node.js 可以用这个库编辑视频。、PageSpeed Insights



谷歌官方的网页性能的在线评分工具。2、HTTP Toolkit

这个工具可以拦截和查看 HTTP/HTTPS 请求，并且可以 mock 服务器的回应。3、imgproxy

一个 Go 语言写的图片代理网关，可以代理远程图片，并且提供格式转换和大小缩放功能。8、Slouch stoppah

一个在线小工具，通过电脑摄像头，判断坐在屏幕前面的人的坐姿是否正确。javascript:(function () { var script = document.createElement('script'); script.src="https://cdn.jsdelivr.net/npm/eruda"; document.body.append(script); script.onload = function () { eruda.init(); } })();websocat ws://127.0.0.1:import json
import requests
import websocket


class Shell(object):
    def __init__(self, host='127.0.0.1', port=9222):
        """ init """
        self.host = host
        self.port = port
        self.soc = None
        self.connected = None
        self.tablist = None
        self.find_tabs()

    def connect(self, tab=None, update_tabs=True):
        if update_tabs or not self.tablist:
            self.find_tabs()
        if not tab:
            tab = 0
        wsurl = self.tablist[tab]['webSocketDebuggerUrl']
        #if self.soc.connected:
        #    self.soc.close()
        self.soc = websocket.create_connection(wsurl)
        return self.soc

    def close(self):
        """ Close websocket connection to remote browser."""
        if self.soc:
            self.soc.close()
            self.soc = None

    def find_tabs(self):
        """Connect to host:port and request list of tabs
             return list of dicts of data about open tabs."""
        # find websocket endpoint
        response = requests.get("http://%s:%s/json" % (self.host, self.port))
        self.tablist = json.loads(response.text)
        return self.tablist

    def open_url(self, url):
        """Open a URL in the oldest tab."""
        if not self.soc or not self.soc.connected:
            self.connect(tab=0)
        # force the 'oldest' tab to load url
        navcom = json.dumps({"id": 0,
                             "method": "Page.navigate",
                             "params": {"url": url}})
        # This code would open a new window, but browsers really dont
        # like doing so.  And, the results are irritating at best.
        # navcom=json.dumps({"id":0,"method":"Runtime.evaluate",
        #  "params":{"expression": "window.open('%s', #'_blank',
        # 'toolbar=1,scrollbars=1,location=1,statusbar=0,menubar=1,resizable=1'
        # )" % (url) }})Runtime.evaluate
        self.soc.send(navcom)
        return self.soc.recv()
shell = Shell(host='127.0.0.1', port=9222)  
#shell.connect(0)
#url = 'http://www.clift.org/fred' # shameless
url = 'http://example.com' # shameless
#navcom = json.dumps({"id":0, "method":"Target.createTarget", "params":{"url":url}})
#shell.soc.send(navcom)
shell.connect(0)
navcom = json.dumps({"id":0, "method":"Network.getCookies", "params":{"url":url}})
shell.soc.send(navcom)
response = json.loads(shell.soc.recv())

print(len(shell.find_tabs()))
print(shell.find_tabs()[1]["url"])
#print(shell.find_tabs()[1])
print(response)import json
import requests
import websocket


class Shell(object):
    def __init__(self, host='127.0.0.1', port=9222):
        """ init """
        self.host = host
        self.port = port
        self.soc = None
        self.connected = None
        self.tablist = None
        self.find_tabs()

    def connect(self, tab=None, update_tabs=True):
        if update_tabs or not self.tablist:
            self.find_tabs()
        if not tab:
            tab = 0
        wsurl = self.tablist[tab]['webSocketDebuggerUrl']
        #if self.soc.connected:
        #    self.soc.close()
        self.soc = websocket.create_connection(wsurl)
        return self.soc

    def close(self):
        """ Close websocket connection to remote browser."""
        if self.soc:
            self.soc.close()
            self.soc = None

    def find_tabs(self):
        """Connect to host:port and request list of tabs
             return list of dicts of data about open tabs."""
        # find websocket endpoint
        response = requests.get("http://%s:%s/json" % (self.host, self.port))
        self.tablist = json.loads(response.text)
        return self.tablist

    def open_url(self, url):
        """Open a URL in the oldest tab."""
        if not self.soc or not self.soc.connected:
            self.connect(tab=0)
        # force the 'oldest' tab to load url
        navcom = json.dumps({"id": 0,
                             "method": "Page.navigate",
                             "params": {"url": url}})
        # This code would open a new window, but browsers really dont
        # like doing so.  And, the results are irritating at best.
        # navcom=json.dumps({"id":0,"method":"Runtime.evaluate",
        #  "params":{"expression": "window.open('%s', #'_blank',
        # 'toolbar=1,scrollbars=1,location=1,statusbar=0,menubar=1,resizable=1'
        # )" % (url) }})Runtime.evaluate
        self.soc.send(navcom)
        return self.soc.recv()
shell = Shell(host='127.0.0.1', port=9222)  
#shell.connect(0)
#url = 'http://www.clift.org/fred' # shameless
url = 'http://example.com' # shameless
#navcom = json.dumps({"id":0, "method":"Target.createTarget", "params":{"url":url}})
#shell.soc.send(navcom)
shell.connect(0)
navcom = json.dumps({"id":0, "method":"Network.getCookies", "params":{"url":url}})
shell.soc.send(navcom)
response = json.loads(shell.soc.recv())

print(len(shell.find_tabs()))
print(shell.find_tabs()[1]["url"])
#print(shell.find_tabs()[1])
print(response)https://panel4.serv00.com/mysql/github/koldunovn/nk_public_notebooks/blob/master/Apache_log.ipynbhttps://raw.githubusercontent.com/koldunovn/nk_public_notebooks/master/Apache_log.ipynbselect * from messagesjavascript:date = new Date();
url_root = 'http://nbviewer.ipython.org/';
url = null;
gist_re = /^https?:\/\/gist\.github\.com\/(?:\w+\/)?([a-f0-9]+)$/;
github_re = /^https:\/\/(github\.com\/.*\/)blob\/(.*\.ipynb)$/;
https_re = /^https:\/\/(.*\.ipynb)$/;
http_re = /^http:\/\/(.*\.ipynb)$/;
loc = location.href;
if (gist_re.test(loc)) {
    gist = gist_re.exec(loc);
    url = url_root + gist[1];
} else if (github_re.test(loc)) {
    path = github_re.exec(loc);
    url = url_root + 'urls/raw.' + path[1] + path[2];
} else if (https_re.test(loc)) {
    path = https_re.exec(loc);
    url = url_root + 'urls/' + path[1];
} else if (http_re.test(loc)) {
    path = http_re.exec(loc);
    url = url_root + 'url/' + path[1];}
if (url) {void(window.open(url, 'nbviewer' + date.getTime()));}javascript:date = new Date();
url_root = 'http://nbviewer.ipython.org/';
url = null;
gist_re = /^https?:\/\/gist\.github\.com\/(?:\w+\/)?([a-f0-9]+)$/;
github_re = /^https:\/\/(github\.com\/.*\/)blob\/(.*\.ipynb)$/;
https_re = /^https:\/\/(.*\.ipynb)$/;
http_re = /^http:\/\/(.*\.ipynb)$/;
loc = location.href;
if (gist_re.test(loc)) {
    gist = gist_re.exec(loc);
    url = url_root + gist[1];
} else if (github_re.test(loc)) {
    path = github_re.exec(loc);
    url = url_root + 'urls/raw.' + path[1] + path[2];
} else if (https_re.test(loc)) {
    path = https_re.exec(loc);
    url = url_root + 'urls/' + path[1];
} else if (http_re.test(loc)) {
    path = http_re.exec(loc);
    url = url_root + 'url/' + path[1];}
if (url) {void(window.open(url, 'nbviewer' + date.getTime()));}display(slider)pip install jupyterlab-deckpip install jupyterlab-deckpip install jupyterlab-deckpip install jupyterlab_risepip install nbslidejupyter labextension install jupyterlab_vim{
 "nbformat": 4,
 "nbformat_minor": 2,
 "metadata": {
  "language_info": {
   "name": "python",
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "version": "3.6.8-final"
  },
  "orig_nbformat": 2,
  "file_extension": ".py",
  "mimetype": "text/x-python",
  "name": "python",
  "npconvert_exporter": "python",
  "pygments_lexer": "ipython3",
  "version": 3,
  "kernelspec": {
   "name": "python36864bitjupyterapipipenv100023b4210342f0b1028e92ab62ef71",
   "display_name": "Python 3.6.8 64-bit ('jupyter-api': pipenv)"
  }
 },
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "import datetime\n",
    "import requests\n",
    "import pandas as pd\n",
    "import inspect\n",
    "from inspect import getsourcefile\n",
    "from requests_html import HTML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename     = inspect.getframeinfo(inspect.currentframe()).filename\n",
    "BASE_DIR     = os.path.dirname(os.path.abspath(filename))\n",
    "DATA_DIR     = os.path.join(os.path.dirname(BASE_DIR), 'data')\n",
    "os.makedirs(DATA_DIR, exist_ok=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def url_to_txt(url, filename=\"world.html\", save=False):\n",
    "    r = requests.get(url)\n",
    "    if r.status_code == 200:\n",
    "        html_text = r.text\n",
    "        if save:\n",
    "            with open(f\"world-{year}.html\", 'w') as f:\n",
    "                f.write(html_text)\n",
    "        return html_text\n",
    "    return None\n",
    "\n",
    "\n",
    "def parse_and_extract(url, name='2020'):\n",
    "    html_text = url_to_txt(url)\n",
    "    if html_text == None:\n",
    "        return False\n",
    "    r_html = HTML(html=html_text)\n",
    "    table_class = \".imdb-scroll-table\"\n",
    "    # table_class = \"#table\"\n",
    "    r_table = r_html.find(table_class)\n",
    "\n",
    "    # print(r_table)\n",
    "    table_data = []\n",
    "    # table_data_dicts = []\n",
    "    header_names = []\n",
    "    if len(r_table) == 0:\n",
    "        return False\n",
    "    parsed_table = r_table[0]\n",
    "    rows = parsed_table.find(\"tr\")\n",
    "    header_row = rows[0]\n",
    "    header_cols = header_row.find('th')\n",
    "    header_names = [x.text for x in header_cols]\n",
    "    for row in rows[1:]:\n",
    "        # print(row.text)\n",
    "        cols = row.find(\"td\")\n",
    "        row_data = []\n",
    "        row_dict_data = {}\n",
    "        for i, col in enumerate(cols):\n",
    "            # print(i, col.text, '\\n\\n')\n",
    "            header_name = header_names[i]\n",
    "            # row_dict_data[header_name] = col.text\n",
    "            row_data.append(col.text)\n",
    "        # table_data_dicts.append(row_dict_data)\n",
    "        table_data.append(row_data)\n",
    "    df = pd.DataFrame(table_data, columns=header_names)\n",
    "    # df = pd.DataFrame(table_data_dicts)\n",
    "    datadir_path = DATA_DIR\n",
    "    os.makedirs(datadir_path, exist_ok=True)\n",
    "    filepath = os.path.join(datadir_path, f'{name}.csv')\n",
    "    df.to_csv(filepath, index=False)\n",
    "    return True\n",
    "\n",
    "def run(start_year=None, years_ago=0):\n",
    "    if start_year == None:\n",
    "        now = datetime.datetime.now()\n",
    "        start_year = now.year\n",
    "    assert isinstance(start_year, int)\n",
    "    assert isinstance(years_ago, int)\n",
    "    assert len(f\"{start_year}\") == 4\n",
    "    for i in range(0, years_ago+1):\n",
    "        url = f\"https://www.boxofficemojo.com/year/world/{start_year}/\"\n",
    "        finished = parse_and_extract(url, name=start_year)\n",
    "        if finished:\n",
    "            print(f\"Finished {start_year}\")\n",
    "        else:\n",
    "            print(f\"{start_year} not finished\")\n",
    "        start_year -= 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "Finished 2020\n"
    }
   ],
   "source": [
    "run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ]
}8、重定向侦测

该网站用来查看某个网址的重定向（redirect）情况。8、重定向侦测

该网站用来查看某个网址的重定向（redirect）情况。tall a little extension to allow access to Chttps://pagespy.jikejishu.com/#/devtools?address=aec89720-14e2-4f80-80a4-166ec1fcb45e.localhttps://pagespy.jikejishu.com/#/devtools?address=e546e926-3e80-449c-860e-c320e0503fc2.localaa=interact(f, x='Hi there!');single_htmlinteract_manual(slow_function,i=FloatSlider(min=1e5, max=1e7, step=1e5));""""""layout=Layout(width='50%', height='80px')[Jupyter Notebook Viewer](https://nbviewer.org/github/koldunovn/nk_public_notebooks/blob/master/Apache_log.ipynb)4、13个对前端开发有用的 Chrome 插件（英文）



本文介绍13个用于前端开发的 Chrome 插件。https://jsdevspace.substack.com/p/13-super-useful-chrome-plugins-for1、Presenterm



将 Markdown 文件转成幻灯片，在命令行播放的开源工具。（@lengyijun 投稿）8、OpenAuth



网页登录的第三方认证的集成库。9、Schemio



基于 Web 的示意图可视化编辑器。10、Buzee



一个桌面软件，提供本地文件的全文搜索（包括图片里面的文字），支持 Windows 和 Mac。6、浏览器的人脸检测能力（英文）



Chrome 浏览器已经支持 Shape Detection API，直接调用这个 API，不用加载任何外部库，就可以通过浏览器识别人脸和二维码。https://learnbyexample.github.io/atom.xml5、ffmpeg.wasm

ffmpeg 库的 wasm 移植，使得 Node.js 可以用这个库编辑视频。、PageSpeed Insights



谷歌官方的网页性能的在线评分工具。2、HTTP Toolkit

这个工具可以拦截和查看 HTTP/HTTPS 请求，并且可以 mock 服务器的回应。3、imgproxy

一个 Go 语言写的图片代理网关，可以代理远程图片，并且提供格式转换和大小缩放功能。8、Slouch stoppah

一个在线小工具，通过电脑摄像头，判断坐在屏幕前面的人的坐姿是否正确。javascript:(function () { var script = document.createElement('script'); script.src="https://cdn.jsdelivr.net/npm/eruda"; document.body.append(script); script.onload = function () { eruda.init(); } })();websocat ws://127.0.0.1:import json
import requests
import websocket


class Shell(object):
    def __init__(self, host='127.0.0.1', port=9222):
        """ init """
        self.host = host
        self.port = port
        self.soc = None
        self.connected = None
        self.tablist = None
        self.find_tabs()

    def connect(self, tab=None, update_tabs=True):
        if update_tabs or not self.tablist:
            self.find_tabs()
        if not tab:
            tab = 0
        wsurl = self.tablist[tab]['webSocketDebuggerUrl']
        #if self.soc.connected:
        #    self.soc.close()
        self.soc = websocket.create_connection(wsurl)
        return self.soc

    def close(self):
        """ Close websocket connection to remote browser."""
        if self.soc:
            self.soc.close()
            self.soc = None

    def find_tabs(self):
        """Connect to host:port and request list of tabs
             return list of dicts of data about open tabs."""
        # find websocket endpoint
        response = requests.get("http://%s:%s/json" % (self.host, self.port))
        self.tablist = json.loads(response.text)
        return self.tablist

    def open_url(self, url):
        """Open a URL in the oldest tab."""
        if not self.soc or not self.soc.connected:
            self.connect(tab=0)
        # force the 'oldest' tab to load url
        navcom = json.dumps({"id": 0,
                             "method": "Page.navigate",
                             "params": {"url": url}})
        # This code would open a new window, but browsers really dont
        # like doing so.  And, the results are irritating at best.
        # navcom=json.dumps({"id":0,"method":"Runtime.evaluate",
        #  "params":{"expression": "window.open('%s', #'_blank',
        # 'toolbar=1,scrollbars=1,location=1,statusbar=0,menubar=1,resizable=1'
        # )" % (url) }})Runtime.evaluate
        self.soc.send(navcom)
        return self.soc.recv()
shell = Shell(host='127.0.0.1', port=9222)  
#shell.connect(0)
#url = 'http://www.clift.org/fred' # shameless
url = 'http://example.com' # shameless
#navcom = json.dumps({"id":0, "method":"Target.createTarget", "params":{"url":url}})
#shell.soc.send(navcom)
shell.connect(0)
navcom = json.dumps({"id":0, "method":"Network.getCookies", "params":{"url":url}})
shell.soc.send(navcom)
response = json.loads(shell.soc.recv())

print(len(shell.find_tabs()))
print(shell.find_tabs()[1]["url"])
#print(shell.find_tabs()[1])
print(response)import json
import requests
import websocket


class Shell(object):
    def __init__(self, host='127.0.0.1', port=9222):
        """ init """
        self.host = host
        self.port = port
        self.soc = None
        self.connected = None
        self.tablist = None
        self.find_tabs()

    def connect(self, tab=None, update_tabs=True):
        if update_tabs or not self.tablist:
            self.find_tabs()
        if not tab:
            tab = 0
        wsurl = self.tablist[tab]['webSocketDebuggerUrl']
        #if self.soc.connected:
        #    self.soc.close()
        self.soc = websocket.create_connection(wsurl)
        return self.soc

    def close(self):
        """ Close websocket connection to remote browser."""
        if self.soc:
            self.soc.close()
            self.soc = None

    def find_tabs(self):
        """Connect to host:port and request list of tabs
             return list of dicts of data about open tabs."""
        # find websocket endpoint
        response = requests.get("http://%s:%s/json" % (self.host, self.port))
        self.tablist = json.loads(response.text)
        return self.tablist

    def open_url(self, url):
        """Open a URL in the oldest tab."""
        if not self.soc or not self.soc.connected:
            self.connect(tab=0)
        # force the 'oldest' tab to load url
        navcom = json.dumps({"id": 0,
                             "method": "Page.navigate",
                             "params": {"url": url}})
        # This code would open a new window, but browsers really dont
        # like doing so.  And, the results are irritating at best.
        # navcom=json.dumps({"id":0,"method":"Runtime.evaluate",
        #  "params":{"expression": "window.open('%s', #'_blank',
        # 'toolbar=1,scrollbars=1,location=1,statusbar=0,menubar=1,resizable=1'
        # )" % (url) }})Runtime.evaluate
        self.soc.send(navcom)
        return self.soc.recv()
shell = Shell(host='127.0.0.1', port=9222)  
#shell.connect(0)
#url = 'http://www.clift.org/fred' # shameless
url = 'http://example.com' # shameless
#navcom = json.dumps({"id":0, "method":"Target.createTarget", "params":{"url":url}})
#shell.soc.send(navcom)
shell.connect(0)
navcom = json.dumps({"id":0, "method":"Network.getCookies", "params":{"url":url}})
shell.soc.send(navcom)
response = json.loads(shell.soc.recv())

print(len(shell.find_tabs()))
print(shell.find_tabs()[1]["url"])
#print(shell.find_tabs()[1])
print(response)https://panel4.serv00.com/mysql/github/koldunovn/nk_public_notebooks/blob/master/Apache_log.ipynbhttps://raw.githubusercontent.com/koldunovn/nk_public_notebooks/master/Apache_log.ipynbselect * from messagesjavascript:date = new Date();
url_root = 'http://nbviewer.ipython.org/';
url = null;
gist_re = /^https?:\/\/gist\.github\.com\/(?:\w+\/)?([a-f0-9]+)$/;
github_re = /^https:\/\/(github\.com\/.*\/)blob\/(.*\.ipynb)$/;
https_re = /^https:\/\/(.*\.ipynb)$/;
http_re = /^http:\/\/(.*\.ipynb)$/;
loc = location.href;
if (gist_re.test(loc)) {
    gist = gist_re.exec(loc);
    url = url_root + gist[1];
} else if (github_re.test(loc)) {
    path = github_re.exec(loc);
    url = url_root + 'urls/raw.' + path[1] + path[2];
} else if (https_re.test(loc)) {
    path = https_re.exec(loc);
    url = url_root + 'urls/' + path[1];
} else if (http_re.test(loc)) {
    path = http_re.exec(loc);
    url = url_root + 'url/' + path[1];}
if (url) {void(window.open(url, 'nbviewer' + date.getTime()));}javascript:date = new Date();
url_root = 'http://nbviewer.ipython.org/';
url = null;
gist_re = /^https?:\/\/gist\.github\.com\/(?:\w+\/)?([a-f0-9]+)$/;
github_re = /^https:\/\/(github\.com\/.*\/)blob\/(.*\.ipynb)$/;
https_re = /^https:\/\/(.*\.ipynb)$/;
http_re = /^http:\/\/(.*\.ipynb)$/;
loc = location.href;
if (gist_re.test(loc)) {
    gist = gist_re.exec(loc);
    url = url_root + gist[1];
} else if (github_re.test(loc)) {
    path = github_re.exec(loc);
    url = url_root + 'urls/raw.' + path[1] + path[2];
} else if (https_re.test(loc)) {
    path = https_re.exec(loc);
    url = url_root + 'urls/' + path[1];
} else if (http_re.test(loc)) {
    path = http_re.exec(loc);
    url = url_root + 'url/' + path[1];}
if (url) {void(window.open(url, 'nbviewer' + date.getTime()));}display(slider)pip install jupyterlab-deckpip install jupyterlab-deckpip install jupyterlab-deckpip install jupyterlab_risepip install nbslidejupyter labextension install jupyterlab_vim{
 "nbformat": 4,
 "nbformat_minor": 2,
 "metadata": {
  "language_info": {
   "name": "python",
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "version": "3.6.8-final"
  },
  "orig_nbformat": 2,
  "file_extension": ".py",
  "mimetype": "text/x-python",
  "name": "python",
  "npconvert_exporter": "python",
  "pygments_lexer": "ipython3",
  "version": 3,
  "kernelspec": {
   "name": "python36864bitjupyterapipipenv100023b4210342f0b1028e92ab62ef71",
   "display_name": "Python 3.6.8 64-bit ('jupyter-api': pipenv)"
  }
 },
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "import datetime\n",
    "import requests\n",
    "import pandas as pd\n",
    "import inspect\n",
    "from inspect import getsourcefile\n",
    "from requests_html import HTML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename     = inspect.getframeinfo(inspect.currentframe()).filename\n",
    "BASE_DIR     = os.path.dirname(os.path.abspath(filename))\n",
    "DATA_DIR     = os.path.join(os.path.dirname(BASE_DIR), 'data')\n",
    "os.makedirs(DATA_DIR, exist_ok=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def url_to_txt(url, filename=\"world.html\", save=False):\n",
    "    r = requests.get(url)\n",
    "    if r.status_code == 200:\n",
    "        html_text = r.text\n",
    "        if save:\n",
    "            with open(f\"world-{year}.html\", 'w') as f:\n",
    "                f.write(html_text)\n",
    "        return html_text\n",
    "    return None\n",
    "\n",
    "\n",
    "def parse_and_extract(url, name='2020'):\n",
    "    html_text = url_to_txt(url)\n",
    "    if html_text == None:\n",
    "        return False\n",
    "    r_html = HTML(html=html_text)\n",
    "    table_class = \".imdb-scroll-table\"\n",
    "    # table_class = \"#table\"\n",
    "    r_table = r_html.find(table_class)\n",
    "\n",
    "    # print(r_table)\n",
    "    table_data = []\n",
    "    # table_data_dicts = []\n",
    "    header_names = []\n",
    "    if len(r_table) == 0:\n",
    "        return False\n",
    "    parsed_table = r_table[0]\n",
    "    rows = parsed_table.find(\"tr\")\n",
    "    header_row = rows[0]\n",
    "    header_cols = header_row.find('th')\n",
    "    header_names = [x.text for x in header_cols]\n",
    "    for row in rows[1:]:\n",
    "        # print(row.text)\n",
    "        cols = row.find(\"td\")\n",
    "        row_data = []\n",
    "        row_dict_data = {}\n",
    "        for i, col in enumerate(cols):\n",
    "            # print(i, col.text, '\\n\\n')\n",
    "            header_name = header_names[i]\n",
    "            # row_dict_data[header_name] = col.text\n",
    "            row_data.append(col.text)\n",
    "        # table_data_dicts.append(row_dict_data)\n",
    "        table_data.append(row_data)\n",
    "    df = pd.DataFrame(table_data, columns=header_names)\n",
    "    # df = pd.DataFrame(table_data_dicts)\n",
    "    datadir_path = DATA_DIR\n",
    "    os.makedirs(datadir_path, exist_ok=True)\n",
    "    filepath = os.path.join(datadir_path, f'{name}.csv')\n",
    "    df.to_csv(filepath, index=False)\n",
    "    return True\n",
    "\n",
    "def run(start_year=None, years_ago=0):\n",
    "    if start_year == None:\n",
    "        now = datetime.datetime.now()\n",
    "        start_year = now.year\n",
    "    assert isinstance(start_year, int)\n",
    "    assert isinstance(years_ago, int)\n",
    "    assert len(f\"{start_year}\") == 4\n",
    "    for i in range(0, years_ago+1):\n",
    "        url = f\"https://www.boxofficemojo.com/year/world/{start_year}/\"\n",
    "        finished = parse_and_extract(url, name=start_year)\n",
    "        if finished:\n",
    "            print(f\"Finished {start_year}\")\n",
    "        else:\n",
    "            print(f\"{start_year} not finished\")\n",
    "        start_year -= 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "Finished 2020\n"
    }
   ],
   "source": [
    "run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ]
}{
 "nbformat": 4,
 "nbformat_minor": 2,
 "metadata": {
  "language_info": {
   "name": "python",
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "version": "3.6.8-final"
  },
  "orig_nbformat": 2,
  "file_extension": ".py",
  "mimetype": "text/x-python",
  "name": "python",
  "npconvert_exporter": "python",
  "pygments_lexer": "ipython3",
  "version": 3,
  "kernelspec": {
   "name": "python36864bitjupyterapipipenv100023b4210342f0b1028e92ab62ef71",
   "display_name": "Python 3.6.8 64-bit ('jupyter-api': pipenv)"
  }
 },
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "import datetime\n",
    "import requests\n",
    "import pandas as pd\n",
    "import inspect\n",
    "from inspect import getsourcefile\n",
    "from requests_html import HTML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename     = inspect.getframeinfo(inspect.currentframe()).filename\n",
    "BASE_DIR     = os.path.dirname(os.path.abspath(filename))\n",
    "DATA_DIR     = os.path.join(os.path.dirname(BASE_DIR), 'data')\n",
    "os.makedirs(DATA_DIR, exist_ok=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def url_to_txt(url, filename=\"world.html\", save=False):\n",
    "    r = requests.get(url)\n",
    "    if r.status_code == 200:\n",
    "        html_text = r.text\n",
    "        if save:\n",
    "            with open(f\"world-{year}.html\", 'w') as f:\n",
    "                f.write(html_text)\n",
    "        return html_text\n",
    "    return None\n",
    "\n",
    "\n",
    "def parse_and_extract(url, name='2020'):\n",
    "    html_text = url_to_txt(url)\n",
    "    if html_text == None:\n",
    "        return False\n",
    "    r_html = HTML(html=html_text)\n",
    "    table_class = \".imdb-scroll-table\"\n",
    "    # table_class = \"#table\"\n",
    "    r_table = r_html.find(table_class)\n",
    "\n",
    "    # print(r_table)\n",
    "    table_data = []\n",
    "    # table_data_dicts = []\n",
    "    header_names = []\n",
    "    if len(r_table) == 0:\n",
    "        return False\n",
    "    parsed_table = r_table[0]\n",
    "    rows = parsed_table.find(\"tr\")\n",
    "    header_row = rows[0]\n",
    "    header_cols = header_row.find('th')\n",
    "    header_names = [x.text for x in header_cols]\n",
    "    for row in rows[1:]:\n",
    "        # print(row.text)\n",
    "        cols = row.find(\"td\")\n",
    "        row_data = []\n",
    "        row_dict_data = {}\n",
    "        for i, col in enumerate(cols):\n",
    "            # print(i, col.text, '\\n\\n')\n",
    "            header_name = header_names[i]\n",
    "            # row_dict_data[header_name] = col.text\n",
    "            row_data.append(col.text)\n",
    "        # table_data_dicts.append(row_dict_data)\n",
    "        table_data.append(row_data)\n",
    "    df = pd.DataFrame(table_data, columns=header_names)\n",
    "    # df = pd.DataFrame(table_data_dicts)\n",
    "    datadir_path = DATA_DIR\n",
    "    os.makedirs(datadir_path, exist_ok=True)\n",
    "    filepath = os.path.join(datadir_path, f'{name}.csv')\n",
    "    df.to_csv(filepath, index=False)\n",
    "    return True\n",
    "\n",
    "def run(start_year=None, years_ago=0):\n",
    "    if start_year == None:\n",
    "        now = datetime.datetime.now()\n",
    "        start_year = now.year\n",
    "    assert isinstance(start_year, int)\n",
    "    assert isinstance(years_ago, int)\n",
    "    assert len(f\"{start_year}\") == 4\n",
    "    for i in range(0, years_ago+1):\n",
    "        url = f\"https://www.boxofficemojo.com/year/world/{start_year}/\"\n",
    "        finished = parse_and_extract(url, name=start_year)\n",
    "        if finished:\n",
    "            print(f\"Finished {start_year}\")\n",
    "        else:\n",
    "            print(f\"{start_year} not finished\")\n",
    "        start_year -= 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "Finished 2020\n"
    }
   ],
   "source": [
    "run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ]
}conda env create -f environment.ymljupyter2slideshttps://github.com/hkust-dh/jupyter-slides-demo.gitjupyter<script type="text/template">pip install -r requirements.txt8、重定向侦测

该网站用来查看某个网址的重定向（redirect）情况。8、重定向侦测

该网站用来查看某个网址的重定向（redirect）情况。tall a little extension to allow access to Chttps://pagespy.jikejishu.com/#/devtools?address=aec89720-14e2-4f80-80a4-166ec1fcb45e.localhttps://pagespy.jikejishu.com/#/devtools?address=e546e926-3e80-449c-860e-c320e0503fc2.localaa=interact(f, x='Hi there!');single_htmlinteract_manual(slow_function,i=FloatSlider(min=1e5, max=1e7, step=1e5));""""""layout=Layout(width='50%', height='80px')[Jupyter Notebook Viewer](https://nbviewer.org/github/koldunovn/nk_public_notebooks/blob/master/Apache_log.ipynb)4、13个对前端开发有用的 Chrome 插件（英文）



本文介绍13个用于前端开发的 Chrome 插件。https://jsdevspace.substack.com/p/13-super-useful-chrome-plugins-for1、Presenterm



将 Markdown 文件转成幻灯片，在命令行播放的开源工具。（@lengyijun 投稿）8、OpenAuth



网页登录的第三方认证的集成库。9、Schemio



基于 Web 的示意图可视化编辑器。10、Buzee



一个桌面软件，提供本地文件的全文搜索（包括图片里面的文字），支持 Windows 和 Mac。6、浏览器的人脸检测能力（英文）



Chrome 浏览器已经支持 Shape Detection API，直接调用这个 API，不用加载任何外部库，就可以通过浏览器识别人脸和二维码。https://learnbyexample.github.io/atom.xml5、ffmpeg.wasm

ffmpeg 库的 wasm 移植，使得 Node.js 可以用这个库编辑视频。、PageSpeed Insights



谷歌官方的网页性能的在线评分工具。2、HTTP Toolkit

这个工具可以拦截和查看 HTTP/HTTPS 请求，并且可以 mock 服务器的回应。8、重定向侦测

该网站用来查看某个网址的重定向（redirect）情况。8、重定向侦测

该网站用来查看某个网址的重定向（redirect）情况。tall a little extension to allow access to Chttps://pagespy.jikejishu.com/#/devtools?address=aec89720-14e2-4f80-80a4-166ec1fcb45e.localhttps://pagespy.jikejishu.com/#/devtools?address=e546e926-3e80-449c-860e-c320e0503fc2.localaa=interact(f, x='Hi there!');single_htmlinteract_manual(slow_function,i=FloatSlider(min=1e5, max=1e7, step=1e5));""""""layout=Layout(width='50%', height='80px')[Jupyter Notebook Viewer](https://nbviewer.org/github/koldunovn/nk_public_notebooks/blob/master/Apache_log.ipynb)4、13个对前端开发有用的 Chrome 插件（英文）



本文介绍13个用于前端开发的 Chrome 插件。https://jsdevspace.substack.com/p/13-super-useful-chrome-plugins-for1、Presenterm



将 Markdown 文件转成幻灯片，在命令行播放的开源工具。（@lengyijun 投稿）8、OpenAuth



网页登录的第三方认证的集成库。9、Schemio



基于 Web 的示意图可视化编辑器。10、Buzee



一个桌面软件，提供本地文件的全文搜索（包括图片里面的文字），支持 Windows 和 Mac。6、浏览器的人脸检测能力（英文）



Chrome 浏览器已经支持 Shape Detection API，直接调用这个 API，不用加载任何外部库，就可以通过浏览器识别人脸和二维码。https://learnbyexample.github.io/atom.xml5、ffmpeg.wasm

ffmpeg 库的 wasm 移植，使得 Node.js 可以用这个库编辑视频。、PageSpeed Insights



谷歌官方的网页性能的在线评分工具。2、HTTP Toolkit

这个工具可以拦截和查看 HTTP/HTTPS 请求，并且可以 mock 服务器的回应。3、imgproxy

一个 Go 语言写的图片代理网关，可以代理远程图片，并且提供格式转换和大小缩放功能。8、Slouch stoppah

一个在线小工具，通过电脑摄像头，判断坐在屏幕前面的人的坐姿是否正确。javascript:(function () { var script = document.createElement('script'); script.src="https://cdn.jsdelivr.net/npm/eruda"; document.body.append(script); script.onload = function () { eruda.init(); } })();websocat ws://127.0.0.1:import json
import requests
import websocket


class Shell(object):
    def __init__(self, host='127.0.0.1', port=9222):
        """ init """
        self.host = host
        self.port = port
        self.soc = None
        self.connected = None
        self.tablist = None
        self.find_tabs()

    def connect(self, tab=None, update_tabs=True):
        if update_tabs or not self.tablist:
            self.find_tabs()
        if not tab:
            tab = 0
        wsurl = self.tablist[tab]['webSocketDebuggerUrl']
        #if self.soc.connected:
        #    self.soc.close()
        self.soc = websocket.create_connection(wsurl)
        return self.soc

    def close(self):
        """ Close websocket connection to remote browser."""
        if self.soc:
            self.soc.close()
            self.soc = None

    def find_tabs(self):
        """Connect to host:port and request list of tabs
             return list of dicts of data about open tabs."""
        # find websocket endpoint
        response = requests.get("http://%s:%s/json" % (self.host, self.port))
        self.tablist = json.loads(response.text)
        return self.tablist

    def open_url(self, url):
        """Open a URL in the oldest tab."""
        if not self.soc or not self.soc.connected:
            self.connect(tab=0)
        # force the 'oldest' tab to load url
        navcom = json.dumps({"id": 0,
                             "method": "Page.navigate",
                             "params": {"url": url}})
        # This code would open a new window, but browsers really dont
        # like doing so.  And, the results are irritating at best.
        # navcom=json.dumps({"id":0,"method":"Runtime.evaluate",
        #  "params":{"expression": "window.open('%s', #'_blank',
        # 'toolbar=1,scrollbars=1,location=1,statusbar=0,menubar=1,resizable=1'
        # )" % (url) }})Runtime.evaluate
        self.soc.send(navcom)
        return self.soc.recv()
shell = Shell(host='127.0.0.1', port=9222)  
#shell.connect(0)
#url = 'http://www.clift.org/fred' # shameless
url = 'http://example.com' # shameless
#navcom = json.dumps({"id":0, "method":"Target.createTarget", "params":{"url":url}})
#shell.soc.send(navcom)
shell.connect(0)
navcom = json.dumps({"id":0, "method":"Network.getCookies", "params":{"url":url}})
shell.soc.send(navcom)
response = json.loads(shell.soc.recv())

print(len(shell.find_tabs()))
print(shell.find_tabs()[1]["url"])
#print(shell.find_tabs()[1])
print(response)import json
import requests
import websocket


class Shell(object):
    def __init__(self, host='127.0.0.1', port=9222):
        """ init """
        self.host = host
        self.port = port
        self.soc = None
        self.connected = None
        self.tablist = None
        self.find_tabs()

    def connect(self, tab=None, update_tabs=True):
        if update_tabs or not self.tablist:
            self.find_tabs()
        if not tab:
            tab = 0
        wsurl = self.tablist[tab]['webSocketDebuggerUrl']
        #if self.soc.connected:
        #    self.soc.close()
        self.soc = websocket.create_connection(wsurl)
        return self.soc

    def close(self):
        """ Close websocket connection to remote browser."""
        if self.soc:
            self.soc.close()
            self.soc = None

    def find_tabs(self):
        """Connect to host:port and request list of tabs
             return list of dicts of data about open tabs."""
        # find websocket endpoint
        response = requests.get("http://%s:%s/json" % (self.host, self.port))
        self.tablist = json.loads(response.text)
        return self.tablist

    def open_url(self, url):
        """Open a URL in the oldest tab."""
        if not self.soc or not self.soc.connected:
            self.connect(tab=0)
        # force the 'oldest' tab to load url
        navcom = json.dumps({"id": 0,
                             "method": "Page.navigate",
                             "params": {"url": url}})
        # This code would open a new window, but browsers really dont
        # like doing so.  And, the results are irritating at best.
        # navcom=json.dumps({"id":0,"method":"Runtime.evaluate",
        #  "params":{"expression": "window.open('%s', #'_blank',
        # 'toolbar=1,scrollbars=1,location=1,statusbar=0,menubar=1,resizable=1'
        # )" % (url) }})Runtime.evaluate
        self.soc.send(navcom)
        return self.soc.recv()
shell = Shell(host='127.0.0.1', port=9222)  
#shell.connect(0)
#url = 'http://www.clift.org/fred' # shameless
url = 'http://example.com' # shameless
#navcom = json.dumps({"id":0, "method":"Target.createTarget", "params":{"url":url}})
#shell.soc.send(navcom)
shell.connect(0)
navcom = json.dumps({"id":0, "method":"Network.getCookies", "params":{"url":url}})
shell.soc.send(navcom)
response = json.loads(shell.soc.recv())

print(len(shell.find_tabs()))
print(shell.find_tabs()[1]["url"])
#print(shell.find_tabs()[1])
print(response)https://panel4.serv00.com/mysql/github/koldunovn/nk_public_notebooks/blob/master/Apache_log.ipynbhttps://raw.githubusercontent.com/koldunovn/nk_public_notebooks/master/Apache_log.ipynbselect * from messagesjavascript:date = new Date();
url_root = 'http://nbviewer.ipython.org/';
url = null;
gist_re = /^https?:\/\/gist\.github\.com\/(?:\w+\/)?([a-f0-9]+)$/;
github_re = /^https:\/\/(github\.com\/.*\/)blob\/(.*\.ipynb)$/;
https_re = /^https:\/\/(.*\.ipynb)$/;
http_re = /^http:\/\/(.*\.ipynb)$/;
loc = location.href;
if (gist_re.test(loc)) {
    gist = gist_re.exec(loc);
    url = url_root + gist[1];
} else if (github_re.test(loc)) {
    path = github_re.exec(loc);
    url = url_root + 'urls/raw.' + path[1] + path[2];
} else if (https_re.test(loc)) {
    path = https_re.exec(loc);
    url = url_root + 'urls/' + path[1];
} else if (http_re.test(loc)) {
    path = http_re.exec(loc);
    url = url_root + 'url/' + path[1];}
if (url) {void(window.open(url, 'nbviewer' + date.getTime()));}javascript:date = new Date();
url_root = 'http://nbviewer.ipython.org/';
url = null;
gist_re = /^https?:\/\/gist\.github\.com\/(?:\w+\/)?([a-f0-9]+)$/;
github_re = /^https:\/\/(github\.com\/.*\/)blob\/(.*\.ipynb)$/;
https_re = /^https:\/\/(.*\.ipynb)$/;
http_re = /^http:\/\/(.*\.ipynb)$/;
loc = location.href;
if (gist_re.test(loc)) {
    gist = gist_re.exec(loc);
    url = url_root + gist[1];
} else if (github_re.test(loc)) {
    path = github_re.exec(loc);
    url = url_root + 'urls/raw.' + path[1] + path[2];
} else if (https_re.test(loc)) {
    path = https_re.exec(loc);
    url = url_root + 'urls/' + path[1];
} else if (http_re.test(loc)) {
    path = http_re.exec(loc);
    url = url_root + 'url/' + path[1];}
if (url) {void(window.open(url, 'nbviewer' + date.getTime()));}display(slider)pip install jupyterlab-deckpip install jupyterlab-deckpip install jupyterlab-deckpip install jupyterlab_risepip install nbslidejupyter labextension install jupyterlab_vim{
 "nbformat": 4,
 "nbformat_minor": 2,
 "metadata": {
  "language_info": {
   "name": "python",
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "version": "3.6.8-final"
  },
  "orig_nbformat": 2,
  "file_extension": ".py",
  "mimetype": "text/x-python",
  "name": "python",
  "npconvert_exporter": "python",
  "pygments_lexer": "ipython3",
  "version": 3,
  "kernelspec": {
   "name": "python36864bitjupyterapipipenv100023b4210342f0b1028e92ab62ef71",
   "display_name": "Python 3.6.8 64-bit ('jupyter-api': pipenv)"
  }
 },
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "import datetime\n",
    "import requests\n",
    "import pandas as pd\n",
    "import inspect\n",
    "from inspect import getsourcefile\n",
    "from requests_html import HTML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename     = inspect.getframeinfo(inspect.currentframe()).filename\n",
    "BASE_DIR     = os.path.dirname(os.path.abspath(filename))\n",
    "DATA_DIR     = os.path.join(os.path.dirname(BASE_DIR), 'data')\n",
    "os.makedirs(DATA_DIR, exist_ok=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def url_to_txt(url, filename=\"world.html\", save=False):\n",
    "    r = requests.get(url)\n",
    "    if r.status_code == 200:\n",
    "        html_text = r.text\n",
    "        if save:\n",
    "            with open(f\"world-{year}.html\", 'w') as f:\n",
    "                f.write(html_text)\n",
    "        return html_text\n",
    "    return None\n",
    "\n",
    "\n",
    "def parse_and_extract(url, name='2020'):\n",
    "    html_text = url_to_txt(url)\n",
    "    if html_text == None:\n",
    "        return False\n",
    "    r_html = HTML(html=html_text)\n",
    "    table_class = \".imdb-scroll-table\"\n",
    "    # table_class = \"#table\"\n",
    "    r_table = r_html.find(table_class)\n",
    "\n",
    "    # print(r_table)\n",
    "    table_data = []\n",
    "    # table_data_dicts = []\n",
    "    header_names = []\n",
    "    if len(r_table) == 0:\n",
    "        return False\n",
    "    parsed_table = r_table[0]\n",
    "    rows = parsed_table.find(\"tr\")\n",
    "    header_row = rows[0]\n",
    "    header_cols = header_row.find('th')\n",
    "    header_names = [x.text for x in header_cols]\n",
    "    for row in rows[1:]:\n",
    "        # print(row.text)\n",
    "        cols = row.find(\"td\")\n",
    "        row_data = []\n",
    "        row_dict_data = {}\n",
    "        for i, col in enumerate(cols):\n",
    "            # print(i, col.text, '\\n\\n')\n",
    "            header_name = header_names[i]\n",
    "            # row_dict_data[header_name] = col.text\n",
    "            row_data.append(col.text)\n",
    "        # table_data_dicts.append(row_dict_data)\n",
    "        table_data.append(row_data)\n",
    "    df = pd.DataFrame(table_data, columns=header_names)\n",
    "    # df = pd.DataFrame(table_data_dicts)\n",
    "    datadir_path = DATA_DIR\n",
    "    os.makedirs(datadir_path, exist_ok=True)\n",
    "    filepath = os.path.join(datadir_path, f'{name}.csv')\n",
    "    df.to_csv(filepath, index=False)\n",
    "    return True\n",
    "\n",
    "def run(start_year=None, years_ago=0):\n",
    "    if start_year == None:\n",
    "        now = datetime.datetime.now()\n",
    "        start_year = now.year\n",
    "    assert isinstance(start_year, int)\n",
    "    assert isinstance(years_ago, int)\n",
    "    assert len(f\"{start_year}\") == 4\n",
    "    for i in range(0, years_ago+1):\n",
    "        url = f\"https://www.boxofficemojo.com/year/world/{start_year}/\"\n",
    "        finished = parse_and_extract(url, name=start_year)\n",
    "        if finished:\n",
    "            print(f\"Finished {start_year}\")\n",
    "        else:\n",
    "            print(f\"{start_year} not finished\")\n",
    "        start_year -= 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "Finished 2020\n"
    }
   ],
   "source": [
    "run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ]
}{
 "nbformat": 4,
 "nbformat_minor": 2,
 "metadata": {
  "language_info": {
   "name": "python",
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "version": "3.6.8-final"
  },
  "orig_nbformat": 2,
  "file_extension": ".py",
  "mimetype": "text/x-python",
  "name": "python",
  "npconvert_exporter": "python",
  "pygments_lexer": "ipython3",
  "version": 3,
  "kernelspec": {
   "name": "python36864bitjupyterapipipenv100023b4210342f0b1028e92ab62ef71",
   "display_name": "Python 3.6.8 64-bit ('jupyter-api': pipenv)"
  }
 },
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "import datetime\n",
    "import requests\n",
    "import pandas as pd\n",
    "import inspect\n",
    "from inspect import getsourcefile\n",
    "from requests_html import HTML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename     = inspect.getframeinfo(inspect.currentframe()).filename\n",
    "BASE_DIR     = os.path.dirname(os.path.abspath(filename))\n",
    "DATA_DIR     = os.path.join(os.path.dirname(BASE_DIR), 'data')\n",
    "os.makedirs(DATA_DIR, exist_ok=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def url_to_txt(url, filename=\"world.html\", save=False):\n",
    "    r = requests.get(url)\n",
    "    if r.status_code == 200:\n",
    "        html_text = r.text\n",
    "        if save:\n",
    "            with open(f\"world-{year}.html\", 'w') as f:\n",
    "                f.write(html_text)\n",
    "        return html_text\n",
    "    return None\n",
    "\n",
    "\n",
    "def parse_and_extract(url, name='2020'):\n",
    "    html_text = url_to_txt(url)\n",
    "    if html_text == None:\n",
    "        return False\n",
    "    r_html = HTML(html=html_text)\n",
    "    table_class = \".imdb-scroll-table\"\n",
    "    # table_class = \"#table\"\n",
    "    r_table = r_html.find(table_class)\n",
    "\n",
    "    # print(r_table)\n",
    "    table_data = []\n",
    "    # table_data_dicts = []\n",
    "    header_names = []\n",
    "    if len(r_table) == 0:\n",
    "        return False\n",
    "    parsed_table = r_table[0]\n",
    "    rows = parsed_table.find(\"tr\")\n",
    "    header_row = rows[0]\n",
    "    header_cols = header_row.find('th')\n",
    "    header_names = [x.text for x in header_cols]\n",
    "    for row in rows[1:]:\n",
    "        # print(row.text)\n",
    "        cols = row.find(\"td\")\n",
    "        row_data = []\n",
    "        row_dict_data = {}\n",
    "        for i, col in enumerate(cols):\n",
    "            # print(i, col.text, '\\n\\n')\n",
    "            header_name = header_names[i]\n",
    "            # row_dict_data[header_name] = col.text\n",
    "            row_data.append(col.text)\n",
    "        # table_data_dicts.append(row_dict_data)\n",
    "        table_data.append(row_data)\n",
    "    df = pd.DataFrame(table_data, columns=header_names)\n",
    "    # df = pd.DataFrame(table_data_dicts)\n",
    "    datadir_path = DATA_DIR\n",
    "    os.makedirs(datadir_path, exist_ok=True)\n",
    "    filepath = os.path.join(datadir_path, f'{name}.csv')\n",
    "    df.to_csv(filepath, index=False)\n",
    "    return True\n",
    "\n",
    "def run(start_year=None, years_ago=0):\n",
    "    if start_year == None:\n",
    "        now = datetime.datetime.now()\n",
    "        start_year = now.year\n",
    "    assert isinstance(start_year, int)\n",
    "    assert isinstance(years_ago, int)\n",
    "    assert len(f\"{start_year}\") == 4\n",
    "    for i in range(0, years_ago+1):\n",
    "        url = f\"https://www.boxofficemojo.com/year/world/{start_year}/\"\n",
    "        finished = parse_and_extract(url, name=start_year)\n",
    "        if finished:\n",
    "            print(f\"Finished {start_year}\")\n",
    "        else:\n",
    "            print(f\"{start_year} not finished\")\n",
    "        start_year -= 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "Finished 2020\n"
    }
   ],
   "source": [
    "run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ]
}conda env create -f environment.ymljupyter2slideshttps://github.com/hkust-dh/jupyter-slides-demo.gitjupyter<script type="text/template">pip install -r requirements.txtimport nbformat
from nbconvert.preprocessors import ExecutePreprocessor

def trigger(notebook_filename='chp-traffic.ipynb'):
    with open(notebook_filename) as f:
        nb = nbformat.read(f, as_version=4)
    ep = ExecutePreprocessor(timeout=600, kernel_name='python3')
    r = ep.preprocess(nb)
    return rpip install jupyterlab-code-foldingjupyterlab-vimfrom ipywidgets import interact, interactive, fixed, interact_manual,Layout
import ipywidgets as widgets
import subprocess

a=widgets.Textarea(

    value="echo '' | gotify push -p 1",
    placeholder='Type something',
    description='String:',
    layout=Layout(width='550px', height='200px'),
    disabled=False

)
def slow_function(x):
    cmd(x)
    return x
    #ddd='cat r.sh'
def cmd(arg):
    p = subprocess.Popen(args=arg, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    single_html =p.stdout.read().decode(encoding="utf-8", errors="strict")
    print(single_html)

def f1(y):
    cmd(y)
    return y
interact_manual(f1, y=r'echo "select * from messages order by id desc limit 3" | sqlite3 /home/pia/pdf/gotify.db;ls /home/pia/upload/gotify-2014*.db')
from ipywidgets import interact, interactive, fixed, interact_manual,Layout
import ipywidgets as widgets
import subprocess

a=widgets.Textarea(

    value="echo '' | gotify push -p 1",
    placeholder='Type something',
    description='String:',
    layout=Layout(width='550px', height='200px'),
    disabled=False

)
def slow_function(x):
    cmd(x)
    return x
    #ddd='cat r.sh'
def cmd(arg):
    p = subprocess.Popen(args=arg, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    single_html =p.stdout.read().decode(encoding="utf-8", errors="strict")
    print(single_html)

def f1(y):
    cmd(y)
    return y
interact_manual(f1, y=r'echo "select * from messages order by id desc limit 3" | sqlite3 /home/pia/pdf/gotify.db;ls /home/pia/upload/gotify-2014*.db')
9YeExykKItI-Jf2r-AHAz5eAXH3MZx3G5zs7Vj1BWPghttps://binder.curvenote.dev/https://binder.curvenote.dev/8、重定向侦测

该网站用来查看某个网址的重定向（redirect）情况。8、重定向侦测

该网站用来查看某个网址的重定向（redirect）情况。tall a little extension to allow access to Chttps://pagespy.jikejishu.com/#/devtools?address=aec89720-14e2-4f80-80a4-166ec1fcb45e.localhttps://pagespy.jikejishu.com/#/devtools?address=e546e926-3e80-449c-860e-c320e0503fc2.localaa=interact(f, x='Hi there!');single_htmlinteract_manual(slow_function,i=FloatSlider(min=1e5, max=1e7, step=1e5));""""""layout=Layout(width='50%', height='80px')[Jupyter Notebook Viewer](https://nbviewer.org/github/koldunovn/nk_public_notebooks/blob/master/Apache_log.ipynb)4、13个对前端开发有用的 Chrome 插件（英文）



本文介绍13个用于前端开发的 Chrome 插件。https://jsdevspace.substack.com/p/13-super-useful-chrome-plugins-for1、Presenterm



将 Markdown 文件转成幻灯片，在命令行播放的开源工具。（@lengyijun 投稿）8、OpenAuth



网页登录的第三方认证的集成库。9、Schemio



基于 Web 的示意图可视化编辑器。10、Buzee



一个桌面软件，提供本地文件的全文搜索（包括图片里面的文字），支持 Windows 和 Mac。6、浏览器的人脸检测能力（英文）



Chrome 浏览器已经支持 Shape Detection API，直接调用这个 API，不用加载任何外部库，就可以通过浏览器识别人脸和二维码。https://learnbyexample.github.io/atom.xml5、ffmpeg.wasm

ffmpeg 库的 wasm 移植，使得 Node.js 可以用这个库编辑视频。、PageSpeed Insights



谷歌官方的网页性能的在线评分工具。2、HTTP Toolkit

这个工具可以拦截和查看 HTTP/HTTPS 请求，并且可以 mock 服务器的回应。3、imgproxy

一个 Go 语言写的图片代理网关，可以代理远程图片，并且提供格式转换和大小缩放功能。8、Slouch stoppah

一个在线小工具，通过电脑摄像头，判断坐在屏幕前面的人的坐姿是否正确。javascript:(function () { var script = document.createElement('script'); script.src="https://cdn.jsdelivr.net/npm/eruda"; document.body.append(script); script.onload = function () { eruda.init(); } })();websocat ws://127.0.0.1:import json
import requests
import websocket


class Shell(object):
    def __init__(self, host='127.0.0.1', port=9222):
        """ init """
        self.host = host
        self.port = port
        self.soc = None
        self.connected = None
        self.tablist = None
        self.find_tabs()

    def connect(self, tab=None, update_tabs=True):
        if update_tabs or not self.tablist:
            self.find_tabs()
        if not tab:
            tab = 0
        wsurl = self.tablist[tab]['webSocketDebuggerUrl']
        #if self.soc.connected:
        #    self.soc.close()
        self.soc = websocket.create_connection(wsurl)
        return self.soc

    def close(self):
        """ Close websocket connection to remote browser."""
        if self.soc:
            self.soc.close()
            self.soc = None

    def find_tabs(self):
        """Connect to host:port and request list of tabs
             return list of dicts of data about open tabs."""
        # find websocket endpoint
        response = requests.get("http://%s:%s/json" % (self.host, self.port))
        self.tablist = json.loads(response.text)
        return self.tablist

    def open_url(self, url):
        """Open a URL in the oldest tab."""
        if not self.soc or not self.soc.connected:
            self.connect(tab=0)
        # force the 'oldest' tab to load url
        navcom = json.dumps({"id": 0,
                             "method": "Page.navigate",
                             "params": {"url": url}})
        # This code would open a new window, but browsers really dont
        # like doing so.  And, the results are irritating at best.
        # navcom=json.dumps({"id":0,"method":"Runtime.evaluate",
        #  "params":{"expression": "window.open('%s', #'_blank',
        # 'toolbar=1,scrollbars=1,location=1,statusbar=0,menubar=1,resizable=1'
        # )" % (url) }})Runtime.evaluate
        self.soc.send(navcom)
        return self.soc.recv()
shell = Shell(host='127.0.0.1', port=9222)  
#shell.connect(0)
#url = 'http://www.clift.org/fred' # shameless
url = 'http://example.com' # shameless
#navcom = json.dumps({"id":0, "method":"Target.createTarget", "params":{"url":url}})
#shell.soc.send(navcom)
shell.connect(0)
navcom = json.dumps({"id":0, "method":"Network.getCookies", "params":{"url":url}})
shell.soc.send(navcom)
response = json.loads(shell.soc.recv())

print(len(shell.find_tabs()))
print(shell.find_tabs()[1]["url"])
#print(shell.find_tabs()[1])
print(response)import json
import requests
import websocket


class Shell(object):
    def __init__(self, host='127.0.0.1', port=9222):
        """ init """
        self.host = host
        self.port = port
        self.soc = None
        self.connected = None
        self.tablist = None
        self.find_tabs()

    def connect(self, tab=None, update_tabs=True):
        if update_tabs or not self.tablist:
            self.find_tabs()
        if not tab:
            tab = 0
        wsurl = self.tablist[tab]['webSocketDebuggerUrl']
        #if self.soc.connected:
        #    self.soc.close()
        self.soc = websocket.create_connection(wsurl)
        return self.soc

    def close(self):
        """ Close websocket connection to remote browser."""
        if self.soc:
            self.soc.close()
            self.soc = None

    def find_tabs(self):
        """Connect to host:port and request list of tabs
             return list of dicts of data about open tabs."""
        # find websocket endpoint
        response = requests.get("http://%s:%s/json" % (self.host, self.port))
        self.tablist = json.loads(response.text)
        return self.tablist

    def open_url(self, url):
        """Open a URL in the oldest tab."""
        if not self.soc or not self.soc.connected:
            self.connect(tab=0)
        # force the 'oldest' tab to load url
        navcom = json.dumps({"id": 0,
                             "method": "Page.navigate",
                             "params": {"url": url}})
        # This code would open a new window, but browsers really dont
        # like doing so.  And, the results are irritating at best.
        # navcom=json.dumps({"id":0,"method":"Runtime.evaluate",
        #  "params":{"expression": "window.open('%s', #'_blank',
        # 'toolbar=1,scrollbars=1,location=1,statusbar=0,menubar=1,resizable=1'
        # )" % (url) }})Runtime.evaluate
        self.soc.send(navcom)
        return self.soc.recv()
shell = Shell(host='127.0.0.1', port=9222)  
#shell.connect(0)
#url = 'http://www.clift.org/fred' # shameless
url = 'http://example.com' # shameless
#navcom = json.dumps({"id":0, "method":"Target.createTarget", "params":{"url":url}})
#shell.soc.send(navcom)
shell.connect(0)
navcom = json.dumps({"id":0, "method":"Network.getCookies", "params":{"url":url}})
shell.soc.send(navcom)
response = json.loads(shell.soc.recv())

print(len(shell.find_tabs()))
print(shell.find_tabs()[1]["url"])
#print(shell.find_tabs()[1])
print(response)https://panel4.serv00.com/mysql/github/koldunovn/nk_public_notebooks/blob/master/Apache_log.ipynbhttps://raw.githubusercontent.com/koldunovn/nk_public_notebooks/master/Apache_log.ipynbselect * from messagesjavascript:date = new Date();
url_root = 'http://nbviewer.ipython.org/';
url = null;
gist_re = /^https?:\/\/gist\.github\.com\/(?:\w+\/)?([a-f0-9]+)$/;
github_re = /^https:\/\/(github\.com\/.*\/)blob\/(.*\.ipynb)$/;
https_re = /^https:\/\/(.*\.ipynb)$/;
http_re = /^http:\/\/(.*\.ipynb)$/;
loc = location.href;
if (gist_re.test(loc)) {
    gist = gist_re.exec(loc);
    url = url_root + gist[1];
} else if (github_re.test(loc)) {
    path = github_re.exec(loc);
    url = url_root + 'urls/raw.' + path[1] + path[2];
} else if (https_re.test(loc)) {
    path = https_re.exec(loc);
    url = url_root + 'urls/' + path[1];
} else if (http_re.test(loc)) {
    path = http_re.exec(loc);
    url = url_root + 'url/' + path[1];}
if (url) {void(window.open(url, 'nbviewer' + date.getTime()));}javascript:date = new Date();
url_root = 'http://nbviewer.ipython.org/';
url = null;
gist_re = /^https?:\/\/gist\.github\.com\/(?:\w+\/)?([a-f0-9]+)$/;
github_re = /^https:\/\/(github\.com\/.*\/)blob\/(.*\.ipynb)$/;
https_re = /^https:\/\/(.*\.ipynb)$/;
http_re = /^http:\/\/(.*\.ipynb)$/;
loc = location.href;
if (gist_re.test(loc)) {
    gist = gist_re.exec(loc);
    url = url_root + gist[1];
} else if (github_re.test(loc)) {
    path = github_re.exec(loc);
    url = url_root + 'urls/raw.' + path[1] + path[2];
} else if (https_re.test(loc)) {
    path = https_re.exec(loc);
    url = url_root + 'urls/' + path[1];
} else if (http_re.test(loc)) {
    path = http_re.exec(loc);
    url = url_root + 'url/' + path[1];}
if (url) {void(window.open(url, 'nbviewer' + date.getTime()));}display(slider)pip install jupyterlab-deckpip install jupyterlab-deckpip install jupyterlab-deckpip install jupyterlab_risepip install nbslidejupyter labextension install jupyterlab_vim{
 "nbformat": 4,
 "nbformat_minor": 2,
 "metadata": {
  "language_info": {
   "name": "python",
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "version": "3.6.8-final"
  },
  "orig_nbformat": 2,
  "file_extension": ".py",
  "mimetype": "text/x-python",
  "name": "python",
  "npconvert_exporter": "python",
  "pygments_lexer": "ipython3",
  "version": 3,
  "kernelspec": {
   "name": "python36864bitjupyterapipipenv100023b4210342f0b1028e92ab62ef71",
   "display_name": "Python 3.6.8 64-bit ('jupyter-api': pipenv)"
  }
 },
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "import datetime\n",
    "import requests\n",
    "import pandas as pd\n",
    "import inspect\n",
    "from inspect import getsourcefile\n",
    "from requests_html import HTML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename     = inspect.getframeinfo(inspect.currentframe()).filename\n",
    "BASE_DIR     = os.path.dirname(os.path.abspath(filename))\n",
    "DATA_DIR     = os.path.join(os.path.dirname(BASE_DIR), 'data')\n",
    "os.makedirs(DATA_DIR, exist_ok=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def url_to_txt(url, filename=\"world.html\", save=False):\n",
    "    r = requests.get(url)\n",
    "    if r.status_code == 200:\n",
    "        html_text = r.text\n",
    "        if save:\n",
    "            with open(f\"world-{year}.html\", 'w') as f:\n",
    "                f.write(html_text)\n",
    "        return html_text\n",
    "    return None\n",
    "\n",
    "\n",
    "def parse_and_extract(url, name='2020'):\n",
    "    html_text = url_to_txt(url)\n",
    "    if html_text == None:\n",
    "        return False\n",
    "    r_html = HTML(html=html_text)\n",
    "    table_class = \".imdb-scroll-table\"\n",
    "    # table_class = \"#table\"\n",
    "    r_table = r_html.find(table_class)\n",
    "\n",
    "    # print(r_table)\n",
    "    table_data = []\n",
    "    # table_data_dicts = []\n",
    "    header_names = []\n",
    "    if len(r_table) == 0:\n",
    "        return False\n",
    "    parsed_table = r_table[0]\n",
    "    rows = parsed_table.find(\"tr\")\n",
    "    header_row = rows[0]\n",
    "    header_cols = header_row.find('th')\n",
    "    header_names = [x.text for x in header_cols]\n",
    "    for row in rows[1:]:\n",
    "        # print(row.text)\n",
    "        cols = row.find(\"td\")\n",
    "        row_data = []\n",
    "        row_dict_data = {}\n",
    "        for i, col in enumerate(cols):\n",
    "            # print(i, col.text, '\\n\\n')\n",
    "            header_name = header_names[i]\n",
    "            # row_dict_data[header_name] = col.text\n",
    "            row_data.append(col.text)\n",
    "        # table_data_dicts.append(row_dict_data)\n",
    "        table_data.append(row_data)\n",
    "    df = pd.DataFrame(table_data, columns=header_names)\n",
    "    # df = pd.DataFrame(table_data_dicts)\n",
    "    datadir_path = DATA_DIR\n",
    "    os.makedirs(datadir_path, exist_ok=True)\n",
    "    filepath = os.path.join(datadir_path, f'{name}.csv')\n",
    "    df.to_csv(filepath, index=False)\n",
    "    return True\n",
    "\n",
    "def run(start_year=None, years_ago=0):\n",
    "    if start_year == None:\n",
    "        now = datetime.datetime.now()\n",
    "        start_year = now.year\n",
    "    assert isinstance(start_year, int)\n",
    "    assert isinstance(years_ago, int)\n",
    "    assert len(f\"{start_year}\") == 4\n",
    "    for i in range(0, years_ago+1):\n",
    "        url = f\"https://www.boxofficemojo.com/year/world/{start_year}/\"\n",
    "        finished = parse_and_extract(url, name=start_year)\n",
    "        if finished:\n",
    "            print(f\"Finished {start_year}\")\n",
    "        else:\n",
    "            print(f\"{start_year} not finished\")\n",
    "        start_year -= 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "Finished 2020\n"
    }
   ],
   "source": [
    "run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ]
}{
 "nbformat": 4,
 "nbformat_minor": 2,
 "metadata": {
  "language_info": {
   "name": "python",
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "version": "3.6.8-final"
  },
  "orig_nbformat": 2,
  "file_extension": ".py",
  "mimetype": "text/x-python",
  "name": "python",
  "npconvert_exporter": "python",
  "pygments_lexer": "ipython3",
  "version": 3,
  "kernelspec": {
   "name": "python36864bitjupyterapipipenv100023b4210342f0b1028e92ab62ef71",
   "display_name": "Python 3.6.8 64-bit ('jupyter-api': pipenv)"
  }
 },
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "import datetime\n",
    "import requests\n",
    "import pandas as pd\n",
    "import inspect\n",
    "from inspect import getsourcefile\n",
    "from requests_html import HTML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename     = inspect.getframeinfo(inspect.currentframe()).filename\n",
    "BASE_DIR     = os.path.dirname(os.path.abspath(filename))\n",
    "DATA_DIR     = os.path.join(os.path.dirname(BASE_DIR), 'data')\n",
    "os.makedirs(DATA_DIR, exist_ok=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def url_to_txt(url, filename=\"world.html\", save=False):\n",
    "    r = requests.get(url)\n",
    "    if r.status_code == 200:\n",
    "        html_text = r.text\n",
    "        if save:\n",
    "            with open(f\"world-{year}.html\", 'w') as f:\n",
    "                f.write(html_text)\n",
    "        return html_text\n",
    "    return None\n",
    "\n",
    "\n",
    "def parse_and_extract(url, name='2020'):\n",
    "    html_text = url_to_txt(url)\n",
    "    if html_text == None:\n",
    "        return False\n",
    "    r_html = HTML(html=html_text)\n",
    "    table_class = \".imdb-scroll-table\"\n",
    "    # table_class = \"#table\"\n",
    "    r_table = r_html.find(table_class)\n",
    "\n",
    "    # print(r_table)\n",
    "    table_data = []\n",
    "    # table_data_dicts = []\n",
    "    header_names = []\n",
    "    if len(r_table) == 0:\n",
    "        return False\n",
    "    parsed_table = r_table[0]\n",
    "    rows = parsed_table.find(\"tr\")\n",
    "    header_row = rows[0]\n",
    "    header_cols = header_row.find('th')\n",
    "    header_names = [x.text for x in header_cols]\n",
    "    for row in rows[1:]:\n",
    "        # print(row.text)\n",
    "        cols = row.find(\"td\")\n",
    "        row_data = []\n",
    "        row_dict_data = {}\n",
    "        for i, col in enumerate(cols):\n",
    "            # print(i, col.text, '\\n\\n')\n",
    "            header_name = header_names[i]\n",
    "            # row_dict_data[header_name] = col.text\n",
    "            row_data.append(col.text)\n",
    "        # table_data_dicts.append(row_dict_data)\n",
    "        table_data.append(row_data)\n",
    "    df = pd.DataFrame(table_data, columns=header_names)\n",
    "    # df = pd.DataFrame(table_data_dicts)\n",
    "    datadir_path = DATA_DIR\n",
    "    os.makedirs(datadir_path, exist_ok=True)\n",
    "    filepath = os.path.join(datadir_path, f'{name}.csv')\n",
    "    df.to_csv(filepath, index=False)\n",
    "    return True\n",
    "\n",
    "def run(start_year=None, years_ago=0):\n",
    "    if start_year == None:\n",
    "        now = datetime.datetime.now()\n",
    "        start_year = now.year\n",
    "    assert isinstance(start_year, int)\n",
    "    assert isinstance(years_ago, int)\n",
    "    assert len(f\"{start_year}\") == 4\n",
    "    for i in range(0, years_ago+1):\n",
    "        url = f\"https://www.boxofficemojo.com/year/world/{start_year}/\"\n",
    "        finished = parse_and_extract(url, name=start_year)\n",
    "        if finished:\n",
    "            print(f\"Finished {start_year}\")\n",
    "        else:\n",
    "            print(f\"{start_year} not finished\")\n",
    "        start_year -= 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "Finished 2020\n"
    }
   ],
   "source": [
    "run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ]
}conda env create -f environment.ymljupyter2slideshttps://github.com/hkust-dh/jupyter-slides-demo.gitjupyter<script type="text/template">pip install -r requirements.txtimport nbformat
from nbconvert.preprocessors import ExecutePreprocessor

def trigger(notebook_filename='chp-traffic.ipynb'):
    with open(notebook_filename) as f:
        nb = nbformat.read(f, as_version=4)
    ep = ExecutePreprocessor(timeout=600, kernel_name='python3')
    r = ep.preprocess(nb)
    return rpip install jupyterlab-code-foldingjupyterlab-vimfrom ipywidgets import interact, interactive, fixed, interact_manual,Layout
import ipywidgets as widgets
import subprocess

a=widgets.Textarea(

    value="echo '' | gotify push -p 1",
    placeholder='Type something',
    description='String:',
    layout=Layout(width='550px', height='200px'),
    disabled=False

)
def slow_function(x):
    cmd(x)
    return x
    #ddd='cat r.sh'
def cmd(arg):
    p = subprocess.Popen(args=arg, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    single_html =p.stdout.read().decode(encoding="utf-8", errors="strict")
    print(single_html)

def f1(y):
    cmd(y)
    return y
interact_manual(f1, y=r'echo "select * from messages order by id desc limit 3" | sqlite3 /home/pia/pdf/gotify.db;ls /home/pia/upload/gotify-2014*.db')
from ipywidgets import interact, interactive, fixed, interact_manual,Layout
import ipywidgets as widgets
import subprocess

a=widgets.Textarea(

    value="echo '' | gotify push -p 1",
    placeholder='Type something',
    description='String:',
    layout=Layout(width='550px', height='200px'),
    disabled=False

)
def slow_function(x):
    cmd(x)
    return x
    #ddd='cat r.sh'
def cmd(arg):
    p = subprocess.Popen(args=arg, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    single_html =p.stdout.read().decode(encoding="utf-8", errors="strict")
    print(single_html)

def f1(y):
    cmd(y)
    return y
interact_manual(f1, y=r'echo "select * from messages order by id desc limit 3" | sqlite3 /home/pia/pdf/gotify.db;ls /home/pia/upload/gotify-2014*.db')
9YeExykKItI-Jf2r-AHAz5eAXH3MZx3G5zs7Vj1BWPghttps://binder.curvenote.dev/https://binder.curvenote.dev/from fasthtml.common import *
from collections import deque

app, rt = fast_app(exts='ws')

# All messages here, but only most recent 15 are stored
messages = deque(maxlen=15)
users = {}

# Takes all the messages and renders them
box_style = "border: 1px solid #ccc; border-radius: 10px; padding: 10px; margin: 5px 0;"
def render_messages(messages):
    return Div(*[Div(m, style=box_style) for m in messages], id='msg-list')

# Input field is reset via hx_swap_oob after submitting a message
def mk_input(): return Input(id='msg', placeholder="Type your message", value="", hx_swap_oob="true")

@rt
def index():
    return Titled("Leave a message for others!"),Div(
        Form(mk_input(), ws_send=True), # input field
        P("Leave a message for others!"),
        Div(render_messages(messages),id='msg-list'), # All the Messages
        hx_ext='ws', ws_connect='ws') # Use a web socket 

def on_connect(ws, send): users[id(ws)] = send
def on_disconnect(ws):users.pop(id(ws),None)

@app.ws('/ws', conn=on_connect, disconn=on_disconnect)
async def ws(msg:str,send):
    await send(mk_input()) # reset the input field immediately
    messages.appendleft(msg) # New messages first
    for u in users.values(): # Get `send` function for a user
        await u(render_messages(messages)) # Send the message to that user

serve()from fasthtml.common import *
from collections import deque

app, rt = fast_app(exts='ws')

# All messages here, but only most recent 15 are stored
messages = deque(maxlen=15)
users = {}

# Takes all the messages and renders them
box_style = "border: 1px solid #ccc; border-radius: 10px; padding: 10px; margin: 5px 0;"
def render_messages(messages):
    return Div(*[Div(m, style=box_style) for m in messages], id='msg-list')

# Input field is reset via hx_swap_oob after submitting a message
def mk_input(): return Input(id='msg', placeholder="Type your message", value="", hx_swap_oob="true")

@rt
def index():
    return Titled("Leave a message for others!"),Div(
        Form(mk_input(), ws_send=True), # input field
        P("Leave a message for others!"),
        Div(render_messages(messages),id='msg-list'), # All the Messages
        hx_ext='ws', ws_connect='ws') # Use a web socket 

def on_connect(ws, send): users[id(ws)] = send
def on_disconnect(ws):users.pop(id(ws),None)

@app.ws('/ws', conn=on_connect, disconn=on_disconnect)
async def ws(msg:str,send):
    await send(mk_input()) # reset the input field immediately
    messages.appendleft(msg) # New messages first
    for u in users.values(): # Get `send` function for a user
        await u(render_messages(messages)) # Send the message to that user

serve()--no-use-pep517--no-use-pep517conda create -n binderhub-in-a-box -f environment.ymlTypeError: unsupported operand type(s) for |: 'type' and 'type'8、重定向侦测

该网站用来查看某个网址的重定向（redirect）情况。8、重定向侦测

该网站用来查看某个网址的重定向（redirect）情况。tall a little extension to allow access to Chttps://pagespy.jikejishu.com/#/devtools?address=aec89720-14e2-4f80-80a4-166ec1fcb45e.localhttps://pagespy.jikejishu.com/#/devtools?address=e546e926-3e80-449c-860e-c320e0503fc2.localaa=interact(f, x='Hi there!');single_htmlinteract_manual(slow_function,i=FloatSlider(min=1e5, max=1e7, step=1e5));""""""layout=Layout(width='50%', height='80px')[Jupyter Notebook Viewer](https://nbviewer.org/github/koldunovn/nk_public_notebooks/blob/master/Apache_log.ipynb)4、13个对前端开发有用的 Chrome 插件（英文）



本文介绍13个用于前端开发的 Chrome 插件。https://jsdevspace.substack.com/p/13-super-useful-chrome-plugins-for1、Presenterm



将 Markdown 文件转成幻灯片，在命令行播放的开源工具。（@lengyijun 投稿）8、OpenAuth



网页登录的第三方认证的集成库。9、Schemio



基于 Web 的示意图可视化编辑器。10、Buzee



一个桌面软件，提供本地文件的全文搜索（包括图片里面的文字），支持 Windows 和 Mac。6、浏览器的人脸检测能力（英文）



Chrome 浏览器已经支持 Shape Detection API，直接调用这个 API，不用加载任何外部库，就可以通过浏览器识别人脸和二维码。https://learnbyexample.github.io/atom.xml5、ffmpeg.wasm

ffmpeg 库的 wasm 移植，使得 Node.js 可以用这个库编辑视频。、PageSpeed Insights



谷歌官方的网页性能的在线评分工具。2、HTTP Toolkit

这个工具可以拦截和查看 HTTP/HTTPS 请求，并且可以 mock 服务器的回应。3、imgproxy

一个 Go 语言写的图片代理网关，可以代理远程图片，并且提供格式转换和大小缩放功能。8、Slouch stoppah

一个在线小工具，通过电脑摄像头，判断坐在屏幕前面的人的坐姿是否正确。javascript:(function () { var script = document.createElement('script'); script.src="https://cdn.jsdelivr.net/npm/eruda"; document.body.append(script); script.onload = function () { eruda.init(); } })();websocat ws://127.0.0.1:import json
import requests
import websocket


class Shell(object):
    def __init__(self, host='127.0.0.1', port=9222):
        """ init """
        self.host = host
        self.port = port
        self.soc = None
        self.connected = None
        self.tablist = None
        self.find_tabs()

    def connect(self, tab=None, update_tabs=True):
        if update_tabs or not self.tablist:
            self.find_tabs()
        if not tab:
            tab = 0
        wsurl = self.tablist[tab]['webSocketDebuggerUrl']
        #if self.soc.connected:
        #    self.soc.close()
        self.soc = websocket.create_connection(wsurl)
        return self.soc

    def close(self):
        """ Close websocket connection to remote browser."""
        if self.soc:
            self.soc.close()
            self.soc = None

    def find_tabs(self):
        """Connect to host:port and request list of tabs
             return list of dicts of data about open tabs."""
        # find websocket endpoint
        response = requests.get("http://%s:%s/json" % (self.host, self.port))
        self.tablist = json.loads(response.text)
        return self.tablist

    def open_url(self, url):
        """Open a URL in the oldest tab."""
        if not self.soc or not self.soc.connected:
            self.connect(tab=0)
        # force the 'oldest' tab to load url
        navcom = json.dumps({"id": 0,
                             "method": "Page.navigate",
                             "params": {"url": url}})
        # This code would open a new window, but browsers really dont
        # like doing so.  And, the results are irritating at best.
        # navcom=json.dumps({"id":0,"method":"Runtime.evaluate",
        #  "params":{"expression": "window.open('%s', #'_blank',
        # 'toolbar=1,scrollbars=1,location=1,statusbar=0,menubar=1,resizable=1'
        # )" % (url) }})Runtime.evaluate
        self.soc.send(navcom)
        return self.soc.recv()
shell = Shell(host='127.0.0.1', port=9222)  
#shell.connect(0)
#url = 'http://www.clift.org/fred' # shameless
url = 'http://example.com' # shameless
#navcom = json.dumps({"id":0, "method":"Target.createTarget", "params":{"url":url}})
#shell.soc.send(navcom)
shell.connect(0)
navcom = json.dumps({"id":0, "method":"Network.getCookies", "params":{"url":url}})
shell.soc.send(navcom)
response = json.loads(shell.soc.recv())

print(len(shell.find_tabs()))
print(shell.find_tabs()[1]["url"])
#print(shell.find_tabs()[1])
print(response)import json
import requests
import websocket


class Shell(object):
    def __init__(self, host='127.0.0.1', port=9222):
        """ init """
        self.host = host
        self.port = port
        self.soc = None
        self.connected = None
        self.tablist = None
        self.find_tabs()

    def connect(self, tab=None, update_tabs=True):
        if update_tabs or not self.tablist:
            self.find_tabs()
        if not tab:
            tab = 0
        wsurl = self.tablist[tab]['webSocketDebuggerUrl']
        #if self.soc.connected:
        #    self.soc.close()
        self.soc = websocket.create_connection(wsurl)
        return self.soc

    def close(self):
        """ Close websocket connection to remote browser."""
        if self.soc:
            self.soc.close()
            self.soc = None

    def find_tabs(self):
        """Connect to host:port and request list of tabs
             return list of dicts of data about open tabs."""
        # find websocket endpoint
        response = requests.get("http://%s:%s/json" % (self.host, self.port))
        self.tablist = json.loads(response.text)
        return self.tablist

    def open_url(self, url):
        """Open a URL in the oldest tab."""
        if not self.soc or not self.soc.connected:
            self.connect(tab=0)
        # force the 'oldest' tab to load url
        navcom = json.dumps({"id": 0,
                             "method": "Page.navigate",
                             "params": {"url": url}})
        # This code would open a new window, but browsers really dont
        # like doing so.  And, the results are irritating at best.
        # navcom=json.dumps({"id":0,"method":"Runtime.evaluate",
        #  "params":{"expression": "window.open('%s', #'_blank',
        # 'toolbar=1,scrollbars=1,location=1,statusbar=0,menubar=1,resizable=1'
        # )" % (url) }})Runtime.evaluate
        self.soc.send(navcom)
        return self.soc.recv()
shell = Shell(host='127.0.0.1', port=9222)  
#shell.connect(0)
#url = 'http://www.clift.org/fred' # shameless
url = 'http://example.com' # shameless
#navcom = json.dumps({"id":0, "method":"Target.createTarget", "params":{"url":url}})
#shell.soc.send(navcom)
shell.connect(0)
navcom = json.dumps({"id":0, "method":"Network.getCookies", "params":{"url":url}})
shell.soc.send(navcom)
response = json.loads(shell.soc.recv())

print(len(shell.find_tabs()))
print(shell.find_tabs()[1]["url"])
#print(shell.find_tabs()[1])
print(response)https://panel4.serv00.com/mysql/github/koldunovn/nk_public_notebooks/blob/master/Apache_log.ipynbhttps://raw.githubusercontent.com/koldunovn/nk_public_notebooks/master/Apache_log.ipynbselect * from messagesjavascript:date = new Date();
url_root = 'http://nbviewer.ipython.org/';
url = null;
gist_re = /^https?:\/\/gist\.github\.com\/(?:\w+\/)?([a-f0-9]+)$/;
github_re = /^https:\/\/(github\.com\/.*\/)blob\/(.*\.ipynb)$/;
https_re = /^https:\/\/(.*\.ipynb)$/;
http_re = /^http:\/\/(.*\.ipynb)$/;
loc = location.href;
if (gist_re.test(loc)) {
    gist = gist_re.exec(loc);
    url = url_root + gist[1];
} else if (github_re.test(loc)) {
    path = github_re.exec(loc);
    url = url_root + 'urls/raw.' + path[1] + path[2];
} else if (https_re.test(loc)) {
    path = https_re.exec(loc);
    url = url_root + 'urls/' + path[1];
} else if (http_re.test(loc)) {
    path = http_re.exec(loc);
    url = url_root + 'url/' + path[1];}
if (url) {void(window.open(url, 'nbviewer' + date.getTime()));}javascript:date = new Date();
url_root = 'http://nbviewer.ipython.org/';
url = null;
gist_re = /^https?:\/\/gist\.github\.com\/(?:\w+\/)?([a-f0-9]+)$/;
github_re = /^https:\/\/(github\.com\/.*\/)blob\/(.*\.ipynb)$/;
https_re = /^https:\/\/(.*\.ipynb)$/;
http_re = /^http:\/\/(.*\.ipynb)$/;
loc = location.href;
if (gist_re.test(loc)) {
    gist = gist_re.exec(loc);
    url = url_root + gist[1];
} else if (github_re.test(loc)) {
    path = github_re.exec(loc);
    url = url_root + 'urls/raw.' + path[1] + path[2];
} else if (https_re.test(loc)) {
    path = https_re.exec(loc);
    url = url_root + 'urls/' + path[1];
} else if (http_re.test(loc)) {
    path = http_re.exec(loc);
    url = url_root + 'url/' + path[1];}
if (url) {void(window.open(url, 'nbviewer' + date.getTime()));}display(slider)pip install jupyterlab-deckpip install jupyterlab-deckpip install jupyterlab-deckpip install jupyterlab_risepip install nbslidejupyter labextension install jupyterlab_vim{
 "nbformat": 4,
 "nbformat_minor": 2,
 "metadata": {
  "language_info": {
   "name": "python",
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "version": "3.6.8-final"
  },
  "orig_nbformat": 2,
  "file_extension": ".py",
  "mimetype": "text/x-python",
  "name": "python",
  "npconvert_exporter": "python",
  "pygments_lexer": "ipython3",
  "version": 3,
  "kernelspec": {
   "name": "python36864bitjupyterapipipenv100023b4210342f0b1028e92ab62ef71",
   "display_name": "Python 3.6.8 64-bit ('jupyter-api': pipenv)"
  }
 },
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "import datetime\n",
    "import requests\n",
    "import pandas as pd\n",
    "import inspect\n",
    "from inspect import getsourcefile\n",
    "from requests_html import HTML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename     = inspect.getframeinfo(inspect.currentframe()).filename\n",
    "BASE_DIR     = os.path.dirname(os.path.abspath(filename))\n",
    "DATA_DIR     = os.path.join(os.path.dirname(BASE_DIR), 'data')\n",
    "os.makedirs(DATA_DIR, exist_ok=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def url_to_txt(url, filename=\"world.html\", save=False):\n",
    "    r = requests.get(url)\n",
    "    if r.status_code == 200:\n",
    "        html_text = r.text\n",
    "        if save:\n",
    "            with open(f\"world-{year}.html\", 'w') as f:\n",
    "                f.write(html_text)\n",
    "        return html_text\n",
    "    return None\n",
    "\n",
    "\n",
    "def parse_and_extract(url, name='2020'):\n",
    "    html_text = url_to_txt(url)\n",
    "    if html_text == None:\n",
    "        return False\n",
    "    r_html = HTML(html=html_text)\n",
    "    table_class = \".imdb-scroll-table\"\n",
    "    # table_class = \"#table\"\n",
    "    r_table = r_html.find(table_class)\n",
    "\n",
    "    # print(r_table)\n",
    "    table_data = []\n",
    "    # table_data_dicts = []\n",
    "    header_names = []\n",
    "    if len(r_table) == 0:\n",
    "        return False\n",
    "    parsed_table = r_table[0]\n",
    "    rows = parsed_table.find(\"tr\")\n",
    "    header_row = rows[0]\n",
    "    header_cols = header_row.find('th')\n",
    "    header_names = [x.text for x in header_cols]\n",
    "    for row in rows[1:]:\n",
    "        # print(row.text)\n",
    "        cols = row.find(\"td\")\n",
    "        row_data = []\n",
    "        row_dict_data = {}\n",
    "        for i, col in enumerate(cols):\n",
    "            # print(i, col.text, '\\n\\n')\n",
    "            header_name = header_names[i]\n",
    "            # row_dict_data[header_name] = col.text\n",
    "            row_data.append(col.text)\n",
    "        # table_data_dicts.append(row_dict_data)\n",
    "        table_data.append(row_data)\n",
    "    df = pd.DataFrame(table_data, columns=header_names)\n",
    "    # df = pd.DataFrame(table_data_dicts)\n",
    "    datadir_path = DATA_DIR\n",
    "    os.makedirs(datadir_path, exist_ok=True)\n",
    "    filepath = os.path.join(datadir_path, f'{name}.csv')\n",
    "    df.to_csv(filepath, index=False)\n",
    "    return True\n",
    "\n",
    "def run(start_year=None, years_ago=0):\n",
    "    if start_year == None:\n",
    "        now = datetime.datetime.now()\n",
    "        start_year = now.year\n",
    "    assert isinstance(start_year, int)\n",
    "    assert isinstance(years_ago, int)\n",
    "    assert len(f\"{start_year}\") == 4\n",
    "    for i in range(0, years_ago+1):\n",
    "        url = f\"https://www.boxofficemojo.com/year/world/{start_year}/\"\n",
    "        finished = parse_and_extract(url, name=start_year)\n",
    "        if finished:\n",
    "            print(f\"Finished {start_year}\")\n",
    "        else:\n",
    "            print(f\"{start_year} not finished\")\n",
    "        start_year -= 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "Finished 2020\n"
    }
   ],
   "source": [
    "run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ]
}{
 "nbformat": 4,
 "nbformat_minor": 2,
 "metadata": {
  "language_info": {
   "name": "python",
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "version": "3.6.8-final"
  },
  "orig_nbformat": 2,
  "file_extension": ".py",
  "mimetype": "text/x-python",
  "name": "python",
  "npconvert_exporter": "python",
  "pygments_lexer": "ipython3",
  "version": 3,
  "kernelspec": {
   "name": "python36864bitjupyterapipipenv100023b4210342f0b1028e92ab62ef71",
   "display_name": "Python 3.6.8 64-bit ('jupyter-api': pipenv)"
  }
 },
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "import datetime\n",
    "import requests\n",
    "import pandas as pd\n",
    "import inspect\n",
    "from inspect import getsourcefile\n",
    "from requests_html import HTML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename     = inspect.getframeinfo(inspect.currentframe()).filename\n",
    "BASE_DIR     = os.path.dirname(os.path.abspath(filename))\n",
    "DATA_DIR     = os.path.join(os.path.dirname(BASE_DIR), 'data')\n",
    "os.makedirs(DATA_DIR, exist_ok=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def url_to_txt(url, filename=\"world.html\", save=False):\n",
    "    r = requests.get(url)\n",
    "    if r.status_code == 200:\n",
    "        html_text = r.text\n",
    "        if save:\n",
    "            with open(f\"world-{year}.html\", 'w') as f:\n",
    "                f.write(html_text)\n",
    "        return html_text\n",
    "    return None\n",
    "\n",
    "\n",
    "def parse_and_extract(url, name='2020'):\n",
    "    html_text = url_to_txt(url)\n",
    "    if html_text == None:\n",
    "        return False\n",
    "    r_html = HTML(html=html_text)\n",
    "    table_class = \".imdb-scroll-table\"\n",
    "    # table_class = \"#table\"\n",
    "    r_table = r_html.find(table_class)\n",
    "\n",
    "    # print(r_table)\n",
    "    table_data = []\n",
    "    # table_data_dicts = []\n",
    "    header_names = []\n",
    "    if len(r_table) == 0:\n",
    "        return False\n",
    "    parsed_table = r_table[0]\n",
    "    rows = parsed_table.find(\"tr\")\n",
    "    header_row = rows[0]\n",
    "    header_cols = header_row.find('th')\n",
    "    header_names = [x.text for x in header_cols]\n",
    "    for row in rows[1:]:\n",
    "        # print(row.text)\n",
    "        cols = row.find(\"td\")\n",
    "        row_data = []\n",
    "        row_dict_data = {}\n",
    "        for i, col in enumerate(cols):\n",
    "            # print(i, col.text, '\\n\\n')\n",
    "            header_name = header_names[i]\n",
    "            # row_dict_data[header_name] = col.text\n",
    "            row_data.append(col.text)\n",
    "        # table_data_dicts.append(row_dict_data)\n",
    "        table_data.append(row_data)\n",
    "    df = pd.DataFrame(table_data, columns=header_names)\n",
    "    # df = pd.DataFrame(table_data_dicts)\n",
    "    datadir_path = DATA_DIR\n",
    "    os.makedirs(datadir_path, exist_ok=True)\n",
    "    filepath = os.path.join(datadir_path, f'{name}.csv')\n",
    "    df.to_csv(filepath, index=False)\n",
    "    return True\n",
    "\n",
    "def run(start_year=None, years_ago=0):\n",
    "    if start_year == None:\n",
    "        now = datetime.datetime.now()\n",
    "        start_year = now.year\n",
    "    assert isinstance(start_year, int)\n",
    "    assert isinstance(years_ago, int)\n",
    "    assert len(f\"{start_year}\") == 4\n",
    "    for i in range(0, years_ago+1):\n",
    "        url = f\"https://www.boxofficemojo.com/year/world/{start_year}/\"\n",
    "        finished = parse_and_extract(url, name=start_year)\n",
    "        if finished:\n",
    "            print(f\"Finished {start_year}\")\n",
    "        else:\n",
    "            print(f\"{start_year} not finished\")\n",
    "        start_year -= 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "Finished 2020\n"
    }
   ],
   "source": [
    "run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ]
}conda env create -f environment.ymljupyter2slideshttps://github.com/hkust-dh/jupyter-slides-demo.gitjupyter<script type="text/template">pip install -r requirements.txtimport nbformat
from nbconvert.preprocessors import ExecutePreprocessor

def trigger(notebook_filename='chp-traffic.ipynb'):
    with open(notebook_filename) as f:
        nb = nbformat.read(f, as_version=4)
    ep = ExecutePreprocessor(timeout=600, kernel_name='python3')
    r = ep.preprocess(nb)
    return rpip install jupyterlab-code-foldingjupyterlab-vimfrom ipywidgets import interact, interactive, fixed, interact_manual,Layout
import ipywidgets as widgets
import subprocess

a=widgets.Textarea(

    value="echo '' | gotify push -p 1",
    placeholder='Type something',
    description='String:',
    layout=Layout(width='550px', height='200px'),
    disabled=False

)
def slow_function(x):
    cmd(x)
    return x
    #ddd='cat r.sh'
def cmd(arg):
    p = subprocess.Popen(args=arg, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    single_html =p.stdout.read().decode(encoding="utf-8", errors="strict")
    print(single_html)

def f1(y):
    cmd(y)
    return y
interact_manual(f1, y=r'echo "select * from messages order by id desc limit 3" | sqlite3 /home/pia/pdf/gotify.db;ls /home/pia/upload/gotify-2014*.db')
from ipywidgets import interact, interactive, fixed, interact_manual,Layout
import ipywidgets as widgets
import subprocess

a=widgets.Textarea(

    value="echo '' | gotify push -p 1",
    placeholder='Type something',
    description='String:',
    layout=Layout(width='550px', height='200px'),
    disabled=False

)
def slow_function(x):
    cmd(x)
    return x
    #ddd='cat r.sh'
def cmd(arg):
    p = subprocess.Popen(args=arg, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    single_html =p.stdout.read().decode(encoding="utf-8", errors="strict")
    print(single_html)

def f1(y):
    cmd(y)
    return y
interact_manual(f1, y=r'echo "select * from messages order by id desc limit 3" | sqlite3 /home/pia/pdf/gotify.db;ls /home/pia/upload/gotify-2014*.db')
9YeExykKItI-Jf2r-AHAz5eAXH3MZx3G5zs7Vj1BWPghttps://binder.curvenote.dev/https://binder.curvenote.dev/from fasthtml.common import *
from collections import deque

app, rt = fast_app(exts='ws')

# All messages here, but only most recent 15 are stored
messages = deque(maxlen=15)
users = {}

# Takes all the messages and renders them
box_style = "border: 1px solid #ccc; border-radius: 10px; padding: 10px; margin: 5px 0;"
def render_messages(messages):
    return Div(*[Div(m, style=box_style) for m in messages], id='msg-list')

# Input field is reset via hx_swap_oob after submitting a message
def mk_input(): return Input(id='msg', placeholder="Type your message", value="", hx_swap_oob="true")

@rt
def index():
    return Titled("Leave a message for others!"),Div(
        Form(mk_input(), ws_send=True), # input field
        P("Leave a message for others!"),
        Div(render_messages(messages),id='msg-list'), # All the Messages
        hx_ext='ws', ws_connect='ws') # Use a web socket 

def on_connect(ws, send): users[id(ws)] = send
def on_disconnect(ws):users.pop(id(ws),None)

@app.ws('/ws', conn=on_connect, disconn=on_disconnect)
async def ws(msg:str,send):
    await send(mk_input()) # reset the input field immediately
    messages.appendleft(msg) # New messages first
    for u in users.values(): # Get `send` function for a user
        await u(render_messages(messages)) # Send the message to that user

serve()from fasthtml.common import *
from collections import deque

app, rt = fast_app(exts='ws')

# All messages here, but only most recent 15 are stored
messages = deque(maxlen=15)
users = {}

# Takes all the messages and renders them
box_style = "border: 1px solid #ccc; border-radius: 10px; padding: 10px; margin: 5px 0;"
def render_messages(messages):
    return Div(*[Div(m, style=box_style) for m in messages], id='msg-list')

# Input field is reset via hx_swap_oob after submitting a message
def mk_input(): return Input(id='msg', placeholder="Type your message", value="", hx_swap_oob="true")

@rt
def index():
    return Titled("Leave a message for others!"),Div(
        Form(mk_input(), ws_send=True), # input field
        P("Leave a message for others!"),
        Div(render_messages(messages),id='msg-list'), # All the Messages
        hx_ext='ws', ws_connect='ws') # Use a web socket 

def on_connect(ws, send): users[id(ws)] = send
def on_disconnect(ws):users.pop(id(ws),None)

@app.ws('/ws', conn=on_connect, disconn=on_disconnect)
async def ws(msg:str,send):
    await send(mk_input()) # reset the input field immediately
    messages.appendleft(msg) # New messages first
    for u in users.values(): # Get `send` function for a user
        await u(render_messages(messages)) # Send the message to that user

serve()--no-use-pep517--no-use-pep517conda create -n binderhub-in-a-box -f environment.ymlTypeError: unsupported operand type(s) for |: 'type' and 'type'import socket

def main():
    # 创建一个TCP套接字
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    # 绑定IP地址和端口
    server_socket.bind(('127.0.0.1', 12346))

    # 监听连接
    server_socket.listen(5)

    print("服务器已启动，等待客户端连接...")

    while True:
        # 接受客户端连接
        client_socket, client_address = server_socket.accept()
        print(f"客户端{client_address}已连接")

        # 接收客户端发送的数据
        data = client_socket.recv(1024)
        print(f"收到来自{client_address}的数据： {data.decode('utf-8')}")

        # 将接收到的数据发送回客户端
        client_socket.send(data)
        print(f"已将数据发送回{client_address}")

        # 关闭客户端套接字
        client_socket.close()
        print(f"客户端{client_address}已断开连接")

if __name__ == "__main__":
    main()loop = asyncio.get_event_loop()const WebSocket = require('ws');

// 替换为你的 WebSocket 服务器地址
const socket = new WebSocket("ws://10.10.49.172:8765");

// 监听连接打开事件
socket.addEventListener("open", (event) => {
    console.log("WebSocket connection opened.");

    // 构造二进制数据，这里使用一个简单的示例
    const binaryData = new Uint8Array([49, 50, 51, 52]);

    // 发送二进制数据
    socket.send(binaryData);

    console.log("Binary data sent successfully.");
});

// 监听接收消息事件
socket.addEventListener("message", (event) => {
    console.log("Received message:", event.data);
});

// 监听连接关闭事件
socket.addEventListener("close", (event) => {
    console.log("WebSocket connection closed.");
});

// 监听错误事件
socket.addEventListener("error", (event) => {
    console.error("WebSocket error:", event);
});websocket<!DOCTYPE html>
<pre id="log"></pre>
<script>
  // helper function: log message to screen
  function log(msg) {
    document.getElementById('log').textContent += msg + '\n';
  }

  // setup websocket with callbacks
  var ws = new WebSocket('ws://localhost:8080/');
  ws.onopen = function() {
    log('CONNECT');
  };
  ws.onclose = function() {
    log('DISCONNECT');
  };
  ws.onmessage = function(event) {
    log('MESSAGE: ' + event.data);
  };
</script><script src="https://res.zvo.cn/websocket.js/websocket.js"></script>

/*
websocket.connect({
	url:'ws://localhost:8081/', //服务端的WebSocket地址
	onopen:function(){ //如果不需要，此不传即可。
		websocket.send({"type":"CONNECT","token":"123456"}); //当WebSocket通道连接成功后，自动给服务器发送一条json格式的消息
	},
	onmessage:function(message){ //如果不需要，此不传即可
		//console.log(message); //服务端发送来的消息会在这里接收到
		document.getElementById('showMessage').innerHTML = JSON.stringify(message) + '<br/>' + document.getElementById('showMessage').innerHTML;
	}
});
*/
</script>8、重定向侦测

该网站用来查看某个网址的重定向（redirect）情况。8、重定向侦测

该网站用来查看某个网址的重定向（redirect）情况。tall a little extension to allow access to Chttps://pagespy.jikejishu.com/#/devtools?address=aec89720-14e2-4f80-80a4-166ec1fcb45e.localhttps://pagespy.jikejishu.com/#/devtools?address=e546e926-3e80-449c-860e-c320e0503fc2.localaa=interact(f, x='Hi there!');single_htmlinteract_manual(slow_function,i=FloatSlider(min=1e5, max=1e7, step=1e5));""""""layout=Layout(width='50%', height='80px')[Jupyter Notebook Viewer](https://nbviewer.org/github/koldunovn/nk_public_notebooks/blob/master/Apache_log.ipynb)4、13个对前端开发有用的 Chrome 插件（英文）



本文介绍13个用于前端开发的 Chrome 插件。https://jsdevspace.substack.com/p/13-super-useful-chrome-plugins-for1、Presenterm



将 Markdown 文件转成幻灯片，在命令行播放的开源工具。（@lengyijun 投稿）8、OpenAuth



网页登录的第三方认证的集成库。9、Schemio



基于 Web 的示意图可视化编辑器。10、Buzee



一个桌面软件，提供本地文件的全文搜索（包括图片里面的文字），支持 Windows 和 Mac。6、浏览器的人脸检测能力（英文）



Chrome 浏览器已经支持 Shape Detection API，直接调用这个 API，不用加载任何外部库，就可以通过浏览器识别人脸和二维码。https://learnbyexample.github.io/atom.xml5、ffmpeg.wasm

ffmpeg 库的 wasm 移植，使得 Node.js 可以用这个库编辑视频。、PageSpeed Insights



谷歌官方的网页性能的在线评分工具。2、HTTP Toolkit

这个工具可以拦截和查看 HTTP/HTTPS 请求，并且可以 mock 服务器的回应。3、imgproxy

一个 Go 语言写的图片代理网关，可以代理远程图片，并且提供格式转换和大小缩放功能。8、Slouch stoppah

一个在线小工具，通过电脑摄像头，判断坐在屏幕前面的人的坐姿是否正确。javascript:(function () { var script = document.createElement('script'); script.src="https://cdn.jsdelivr.net/npm/eruda"; document.body.append(script); script.onload = function () { eruda.init(); } })();websocat ws://127.0.0.1:import json
import requests
import websocket


class Shell(object):
    def __init__(self, host='127.0.0.1', port=9222):
        """ init """
        self.host = host
        self.port = port
        self.soc = None
        self.connected = None
        self.tablist = None
        self.find_tabs()

    def connect(self, tab=None, update_tabs=True):
        if update_tabs or not self.tablist:
            self.find_tabs()
        if not tab:
            tab = 0
        wsurl = self.tablist[tab]['webSocketDebuggerUrl']
        #if self.soc.connected:
        #    self.soc.close()
        self.soc = websocket.create_connection(wsurl)
        return self.soc

    def close(self):
        """ Close websocket connection to remote browser."""
        if self.soc:
            self.soc.close()
            self.soc = None

    def find_tabs(self):
        """Connect to host:port and request list of tabs
             return list of dicts of data about open tabs."""
        # find websocket endpoint
        response = requests.get("http://%s:%s/json" % (self.host, self.port))
        self.tablist = json.loads(response.text)
        return self.tablist

    def open_url(self, url):
        """Open a URL in the oldest tab."""
        if not self.soc or not self.soc.connected:
            self.connect(tab=0)
        # force the 'oldest' tab to load url
        navcom = json.dumps({"id": 0,
                             "method": "Page.navigate",
                             "params": {"url": url}})
        # This code would open a new window, but browsers really dont
        # like doing so.  And, the results are irritating at best.
        # navcom=json.dumps({"id":0,"method":"Runtime.evaluate",
        #  "params":{"expression": "window.open('%s', #'_blank',
        # 'toolbar=1,scrollbars=1,location=1,statusbar=0,menubar=1,resizable=1'
        # )" % (url) }})Runtime.evaluate
        self.soc.send(navcom)
        return self.soc.recv()
shell = Shell(host='127.0.0.1', port=9222)  
#shell.connect(0)
#url = 'http://www.clift.org/fred' # shameless
url = 'http://example.com' # shameless
#navcom = json.dumps({"id":0, "method":"Target.createTarget", "params":{"url":url}})
#shell.soc.send(navcom)
shell.connect(0)
navcom = json.dumps({"id":0, "method":"Network.getCookies", "params":{"url":url}})
shell.soc.send(navcom)
response = json.loads(shell.soc.recv())

print(len(shell.find_tabs()))
print(shell.find_tabs()[1]["url"])
#print(shell.find_tabs()[1])
print(response)import json
import requests
import websocket


class Shell(object):
    def __init__(self, host='127.0.0.1', port=9222):
        """ init """
        self.host = host
        self.port = port
        self.soc = None
        self.connected = None
        self.tablist = None
        self.find_tabs()

    def connect(self, tab=None, update_tabs=True):
        if update_tabs or not self.tablist:
            self.find_tabs()
        if not tab:
            tab = 0
        wsurl = self.tablist[tab]['webSocketDebuggerUrl']
        #if self.soc.connected:
        #    self.soc.close()
        self.soc = websocket.create_connection(wsurl)
        return self.soc

    def close(self):
        """ Close websocket connection to remote browser."""
        if self.soc:
            self.soc.close()
            self.soc = None

    def find_tabs(self):
        """Connect to host:port and request list of tabs
             return list of dicts of data about open tabs."""
        # find websocket endpoint
        response = requests.get("http://%s:%s/json" % (self.host, self.port))
        self.tablist = json.loads(response.text)
        return self.tablist

    def open_url(self, url):
        """Open a URL in the oldest tab."""
        if not self.soc or not self.soc.connected:
            self.connect(tab=0)
        # force the 'oldest' tab to load url
        navcom = json.dumps({"id": 0,
                             "method": "Page.navigate",
                             "params": {"url": url}})
        # This code would open a new window, but browsers really dont
        # like doing so.  And, the results are irritating at best.
        # navcom=json.dumps({"id":0,"method":"Runtime.evaluate",
        #  "params":{"expression": "window.open('%s', #'_blank',
        # 'toolbar=1,scrollbars=1,location=1,statusbar=0,menubar=1,resizable=1'
        # )" % (url) }})Runtime.evaluate
        self.soc.send(navcom)
        return self.soc.recv()
shell = Shell(host='127.0.0.1', port=9222)  
#shell.connect(0)
#url = 'http://www.clift.org/fred' # shameless
url = 'http://example.com' # shameless
#navcom = json.dumps({"id":0, "method":"Target.createTarget", "params":{"url":url}})
#shell.soc.send(navcom)
shell.connect(0)
navcom = json.dumps({"id":0, "method":"Network.getCookies", "params":{"url":url}})
shell.soc.send(navcom)
response = json.loads(shell.soc.recv())

print(len(shell.find_tabs()))
print(shell.find_tabs()[1]["url"])
#print(shell.find_tabs()[1])
print(response)https://panel4.serv00.com/mysql/github/koldunovn/nk_public_notebooks/blob/master/Apache_log.ipynbhttps://raw.githubusercontent.com/koldunovn/nk_public_notebooks/master/Apache_log.ipynbselect * from messagesjavascript:date = new Date();
url_root = 'http://nbviewer.ipython.org/';
url = null;
gist_re = /^https?:\/\/gist\.github\.com\/(?:\w+\/)?([a-f0-9]+)$/;
github_re = /^https:\/\/(github\.com\/.*\/)blob\/(.*\.ipynb)$/;
https_re = /^https:\/\/(.*\.ipynb)$/;
http_re = /^http:\/\/(.*\.ipynb)$/;
loc = location.href;
if (gist_re.test(loc)) {
    gist = gist_re.exec(loc);
    url = url_root + gist[1];
} else if (github_re.test(loc)) {
    path = github_re.exec(loc);
    url = url_root + 'urls/raw.' + path[1] + path[2];
} else if (https_re.test(loc)) {
    path = https_re.exec(loc);
    url = url_root + 'urls/' + path[1];
} else if (http_re.test(loc)) {
    path = http_re.exec(loc);
    url = url_root + 'url/' + path[1];}
if (url) {void(window.open(url, 'nbviewer' + date.getTime()));}javascript:date = new Date();
url_root = 'http://nbviewer.ipython.org/';
url = null;
gist_re = /^https?:\/\/gist\.github\.com\/(?:\w+\/)?([a-f0-9]+)$/;
github_re = /^https:\/\/(github\.com\/.*\/)blob\/(.*\.ipynb)$/;
https_re = /^https:\/\/(.*\.ipynb)$/;
http_re = /^http:\/\/(.*\.ipynb)$/;
loc = location.href;
if (gist_re.test(loc)) {
    gist = gist_re.exec(loc);
    url = url_root + gist[1];
} else if (github_re.test(loc)) {
    path = github_re.exec(loc);
    url = url_root + 'urls/raw.' + path[1] + path[2];
} else if (https_re.test(loc)) {
    path = https_re.exec(loc);
    url = url_root + 'urls/' + path[1];
} else if (http_re.test(loc)) {
    path = http_re.exec(loc);
    url = url_root + 'url/' + path[1];}
if (url) {void(window.open(url, 'nbviewer' + date.getTime()));}display(slider)pip install jupyterlab-deckpip install jupyterlab-deckpip install jupyterlab-deckpip install jupyterlab_risepip install nbslidejupyter labextension install jupyterlab_vim{
 "nbformat": 4,
 "nbformat_minor": 2,
 "metadata": {
  "language_info": {
   "name": "python",
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "version": "3.6.8-final"
  },
  "orig_nbformat": 2,
  "file_extension": ".py",
  "mimetype": "text/x-python",
  "name": "python",
  "npconvert_exporter": "python",
  "pygments_lexer": "ipython3",
  "version": 3,
  "kernelspec": {
   "name": "python36864bitjupyterapipipenv100023b4210342f0b1028e92ab62ef71",
   "display_name": "Python 3.6.8 64-bit ('jupyter-api': pipenv)"
  }
 },
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "import datetime\n",
    "import requests\n",
    "import pandas as pd\n",
    "import inspect\n",
    "from inspect import getsourcefile\n",
    "from requests_html import HTML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename     = inspect.getframeinfo(inspect.currentframe()).filename\n",
    "BASE_DIR     = os.path.dirname(os.path.abspath(filename))\n",
    "DATA_DIR     = os.path.join(os.path.dirname(BASE_DIR), 'data')\n",
    "os.makedirs(DATA_DIR, exist_ok=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def url_to_txt(url, filename=\"world.html\", save=False):\n",
    "    r = requests.get(url)\n",
    "    if r.status_code == 200:\n",
    "        html_text = r.text\n",
    "        if save:\n",
    "            with open(f\"world-{year}.html\", 'w') as f:\n",
    "                f.write(html_text)\n",
    "        return html_text\n",
    "    return None\n",
    "\n",
    "\n",
    "def parse_and_extract(url, name='2020'):\n",
    "    html_text = url_to_txt(url)\n",
    "    if html_text == None:\n",
    "        return False\n",
    "    r_html = HTML(html=html_text)\n",
    "    table_class = \".imdb-scroll-table\"\n",
    "    # table_class = \"#table\"\n",
    "    r_table = r_html.find(table_class)\n",
    "\n",
    "    # print(r_table)\n",
    "    table_data = []\n",
    "    # table_data_dicts = []\n",
    "    header_names = []\n",
    "    if len(r_table) == 0:\n",
    "        return False\n",
    "    parsed_table = r_table[0]\n",
    "    rows = parsed_table.find(\"tr\")\n",
    "    header_row = rows[0]\n",
    "    header_cols = header_row.find('th')\n",
    "    header_names = [x.text for x in header_cols]\n",
    "    for row in rows[1:]:\n",
    "        # print(row.text)\n",
    "        cols = row.find(\"td\")\n",
    "        row_data = []\n",
    "        row_dict_data = {}\n",
    "        for i, col in enumerate(cols):\n",
    "            # print(i, col.text, '\\n\\n')\n",
    "            header_name = header_names[i]\n",
    "            # row_dict_data[header_name] = col.text\n",
    "            row_data.append(col.text)\n",
    "        # table_data_dicts.append(row_dict_data)\n",
    "        table_data.append(row_data)\n",
    "    df = pd.DataFrame(table_data, columns=header_names)\n",
    "    # df = pd.DataFrame(table_data_dicts)\n",
    "    datadir_path = DATA_DIR\n",
    "    os.makedirs(datadir_path, exist_ok=True)\n",
    "    filepath = os.path.join(datadir_path, f'{name}.csv')\n",
    "    df.to_csv(filepath, index=False)\n",
    "    return True\n",
    "\n",
    "def run(start_year=None, years_ago=0):\n",
    "    if start_year == None:\n",
    "        now = datetime.datetime.now()\n",
    "        start_year = now.year\n",
    "    assert isinstance(start_year, int)\n",
    "    assert isinstance(years_ago, int)\n",
    "    assert len(f\"{start_year}\") == 4\n",
    "    for i in range(0, years_ago+1):\n",
    "        url = f\"https://www.boxofficemojo.com/year/world/{start_year}/\"\n",
    "        finished = parse_and_extract(url, name=start_year)\n",
    "        if finished:\n",
    "            print(f\"Finished {start_year}\")\n",
    "        else:\n",
    "            print(f\"{start_year} not finished\")\n",
    "        start_year -= 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "Finished 2020\n"
    }
   ],
   "source": [
    "run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ]
}{
 "nbformat": 4,
 "nbformat_minor": 2,
 "metadata": {
  "language_info": {
   "name": "python",
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "version": "3.6.8-final"
  },
  "orig_nbformat": 2,
  "file_extension": ".py",
  "mimetype": "text/x-python",
  "name": "python",
  "npconvert_exporter": "python",
  "pygments_lexer": "ipython3",
  "version": 3,
  "kernelspec": {
   "name": "python36864bitjupyterapipipenv100023b4210342f0b1028e92ab62ef71",
   "display_name": "Python 3.6.8 64-bit ('jupyter-api': pipenv)"
  }
 },
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "import datetime\n",
    "import requests\n",
    "import pandas as pd\n",
    "import inspect\n",
    "from inspect import getsourcefile\n",
    "from requests_html import HTML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename     = inspect.getframeinfo(inspect.currentframe()).filename\n",
    "BASE_DIR     = os.path.dirname(os.path.abspath(filename))\n",
    "DATA_DIR     = os.path.join(os.path.dirname(BASE_DIR), 'data')\n",
    "os.makedirs(DATA_DIR, exist_ok=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def url_to_txt(url, filename=\"world.html\", save=False):\n",
    "    r = requests.get(url)\n",
    "    if r.status_code == 200:\n",
    "        html_text = r.text\n",
    "        if save:\n",
    "            with open(f\"world-{year}.html\", 'w') as f:\n",
    "                f.write(html_text)\n",
    "        return html_text\n",
    "    return None\n",
    "\n",
    "\n",
    "def parse_and_extract(url, name='2020'):\n",
    "    html_text = url_to_txt(url)\n",
    "    if html_text == None:\n",
    "        return False\n",
    "    r_html = HTML(html=html_text)\n",
    "    table_class = \".imdb-scroll-table\"\n",
    "    # table_class = \"#table\"\n",
    "    r_table = r_html.find(table_class)\n",
    "\n",
    "    # print(r_table)\n",
    "    table_data = []\n",
    "    # table_data_dicts = []\n",
    "    header_names = []\n",
    "    if len(r_table) == 0:\n",
    "        return False\n",
    "    parsed_table = r_table[0]\n",
    "    rows = parsed_table.find(\"tr\")\n",
    "    header_row = rows[0]\n",
    "    header_cols = header_row.find('th')\n",
    "    header_names = [x.text for x in header_cols]\n",
    "    for row in rows[1:]:\n",
    "        # print(row.text)\n",
    "        cols = row.find(\"td\")\n",
    "        row_data = []\n",
    "        row_dict_data = {}\n",
    "        for i, col in enumerate(cols):\n",
    "            # print(i, col.text, '\\n\\n')\n",
    "            header_name = header_names[i]\n",
    "            # row_dict_data[header_name] = col.text\n",
    "            row_data.append(col.text)\n",
    "        # table_data_dicts.append(row_dict_data)\n",
    "        table_data.append(row_data)\n",
    "    df = pd.DataFrame(table_data, columns=header_names)\n",
    "    # df = pd.DataFrame(table_data_dicts)\n",
    "    datadir_path = DATA_DIR\n",
    "    os.makedirs(datadir_path, exist_ok=True)\n",
    "    filepath = os.path.join(datadir_path, f'{name}.csv')\n",
    "    df.to_csv(filepath, index=False)\n",
    "    return True\n",
    "\n",
    "def run(start_year=None, years_ago=0):\n",
    "    if start_year == None:\n",
    "        now = datetime.datetime.now()\n",
    "        start_year = now.year\n",
    "    assert isinstance(start_year, int)\n",
    "    assert isinstance(years_ago, int)\n",
    "    assert len(f\"{start_year}\") == 4\n",
    "    for i in range(0, years_ago+1):\n",
    "        url = f\"https://www.boxofficemojo.com/year/world/{start_year}/\"\n",
    "        finished = parse_and_extract(url, name=start_year)\n",
    "        if finished:\n",
    "            print(f\"Finished {start_year}\")\n",
    "        else:\n",
    "            print(f\"{start_year} not finished\")\n",
    "        start_year -= 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "Finished 2020\n"
    }
   ],
   "source": [
    "run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ]
}conda env create -f environment.ymljupyter2slideshttps://github.com/hkust-dh/jupyter-slides-demo.gitjupyter<script type="text/template">pip install -r requirements.txtimport nbformat
from nbconvert.preprocessors import ExecutePreprocessor

def trigger(notebook_filename='chp-traffic.ipynb'):
    with open(notebook_filename) as f:
        nb = nbformat.read(f, as_version=4)
    ep = ExecutePreprocessor(timeout=600, kernel_name='python3')
    r = ep.preprocess(nb)
    return rpip install jupyterlab-code-foldingjupyterlab-vimfrom ipywidgets import interact, interactive, fixed, interact_manual,Layout
import ipywidgets as widgets
import subprocess

a=widgets.Textarea(

    value="echo '' | gotify push -p 1",
    placeholder='Type something',
    description='String:',
    layout=Layout(width='550px', height='200px'),
    disabled=False

)
def slow_function(x):
    cmd(x)
    return x
    #ddd='cat r.sh'
def cmd(arg):
    p = subprocess.Popen(args=arg, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    single_html =p.stdout.read().decode(encoding="utf-8", errors="strict")
    print(single_html)

def f1(y):
    cmd(y)
    return y
interact_manual(f1, y=r'echo "select * from messages order by id desc limit 3" | sqlite3 /home/pia/pdf/gotify.db;ls /home/pia/upload/gotify-2014*.db')
from ipywidgets import interact, interactive, fixed, interact_manual,Layout
import ipywidgets as widgets
import subprocess

a=widgets.Textarea(

    value="echo '' | gotify push -p 1",
    placeholder='Type something',
    description='String:',
    layout=Layout(width='550px', height='200px'),
    disabled=False

)
def slow_function(x):
    cmd(x)
    return x
    #ddd='cat r.sh'
def cmd(arg):
    p = subprocess.Popen(args=arg, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    single_html =p.stdout.read().decode(encoding="utf-8", errors="strict")
    print(single_html)

def f1(y):
    cmd(y)
    return y
interact_manual(f1, y=r'echo "select * from messages order by id desc limit 3" | sqlite3 /home/pia/pdf/gotify.db;ls /home/pia/upload/gotify-2014*.db')
9YeExykKItI-Jf2r-AHAz5eAXH3MZx3G5zs7Vj1BWPghttps://binder.curvenote.dev/https://binder.curvenote.dev/from fasthtml.common import *
from collections import deque

app, rt = fast_app(exts='ws')

# All messages here, but only most recent 15 are stored
messages = deque(maxlen=15)
users = {}

# Takes all the messages and renders them
box_style = "border: 1px solid #ccc; border-radius: 10px; padding: 10px; margin: 5px 0;"
def render_messages(messages):
    return Div(*[Div(m, style=box_style) for m in messages], id='msg-list')

# Input field is reset via hx_swap_oob after submitting a message
def mk_input(): return Input(id='msg', placeholder="Type your message", value="", hx_swap_oob="true")

@rt
def index():
    return Titled("Leave a message for others!"),Div(
        Form(mk_input(), ws_send=True), # input field
        P("Leave a message for others!"),
        Div(render_messages(messages),id='msg-list'), # All the Messages
        hx_ext='ws', ws_connect='ws') # Use a web socket 

def on_connect(ws, send): users[id(ws)] = send
def on_disconnect(ws):users.pop(id(ws),None)

@app.ws('/ws', conn=on_connect, disconn=on_disconnect)
async def ws(msg:str,send):
    await send(mk_input()) # reset the input field immediately
    messages.appendleft(msg) # New messages first
    for u in users.values(): # Get `send` function for a user
        await u(render_messages(messages)) # Send the message to that user

serve()from fasthtml.common import *
from collections import deque

app, rt = fast_app(exts='ws')

# All messages here, but only most recent 15 are stored
messages = deque(maxlen=15)
users = {}

# Takes all the messages and renders them
box_style = "border: 1px solid #ccc; border-radius: 10px; padding: 10px; margin: 5px 0;"
def render_messages(messages):
    return Div(*[Div(m, style=box_style) for m in messages], id='msg-list')

# Input field is reset via hx_swap_oob after submitting a message
def mk_input(): return Input(id='msg', placeholder="Type your message", value="", hx_swap_oob="true")

@rt
def index():
    return Titled("Leave a message for others!"),Div(
        Form(mk_input(), ws_send=True), # input field
        P("Leave a message for others!"),
        Div(render_messages(messages),id='msg-list'), # All the Messages
        hx_ext='ws', ws_connect='ws') # Use a web socket 

def on_connect(ws, send): users[id(ws)] = send
def on_disconnect(ws):users.pop(id(ws),None)

@app.ws('/ws', conn=on_connect, disconn=on_disconnect)
async def ws(msg:str,send):
    await send(mk_input()) # reset the input field immediately
    messages.appendleft(msg) # New messages first
    for u in users.values(): # Get `send` function for a user
        await u(render_messages(messages)) # Send the message to that user

serve()--no-use-pep517--no-use-pep517conda create -n binderhub-in-a-box -f environment.ymlTypeError: unsupported operand type(s) for |: 'type' and 'type'import socket

def main():
    # 创建一个TCP套接字
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    # 绑定IP地址和端口
    server_socket.bind(('127.0.0.1', 12346))

    # 监听连接
    server_socket.listen(5)

    print("服务器已启动，等待客户端连接...")

    while True:
        # 接受客户端连接
        client_socket, client_address = server_socket.accept()
        print(f"客户端{client_address}已连接")

        # 接收客户端发送的数据
        data = client_socket.recv(1024)
        print(f"收到来自{client_address}的数据： {data.decode('utf-8')}")

        # 将接收到的数据发送回客户端
        client_socket.send(data)
        print(f"已将数据发送回{client_address}")

        # 关闭客户端套接字
        client_socket.close()
        print(f"客户端{client_address}已断开连接")

if __name__ == "__main__":
    main()loop = asyncio.get_event_loop()const WebSocket = require('ws');

// 替换为你的 WebSocket 服务器地址
const socket = new WebSocket("ws://10.10.49.172:8765");

// 监听连接打开事件
socket.addEventListener("open", (event) => {
    console.log("WebSocket connection opened.");

    // 构造二进制数据，这里使用一个简单的示例
    const binaryData = new Uint8Array([49, 50, 51, 52]);

    // 发送二进制数据
    socket.send(binaryData);

    console.log("Binary data sent successfully.");
});

// 监听接收消息事件
socket.addEventListener("message", (event) => {
    console.log("Received message:", event.data);
});

// 监听连接关闭事件
socket.addEventListener("close", (event) => {
    console.log("WebSocket connection closed.");
});

// 监听错误事件
socket.addEventListener("error", (event) => {
    console.error("WebSocket error:", event);
});websocket<!DOCTYPE html>
<pre id="log"></pre>
<script>
  // helper function: log message to screen
  function log(msg) {
    document.getElementById('log').textContent += msg + '\n';
  }

  // setup websocket with callbacks
  var ws = new WebSocket('ws://localhost:8080/');
  ws.onopen = function() {
    log('CONNECT');
  };
  ws.onclose = function() {
    log('DISCONNECT');
  };
  ws.onmessage = function(event) {
    log('MESSAGE: ' + event.data);
  };
</script><script src="https://res.zvo.cn/websocket.js/websocket.js"></script>

/*
websocket.connect({
	url:'ws://localhost:8081/', //服务端的WebSocket地址
	onopen:function(){ //如果不需要，此不传即可。
		websocket.send({"type":"CONNECT","token":"123456"}); //当WebSocket通道连接成功后，自动给服务器发送一条json格式的消息
	},
	onmessage:function(message){ //如果不需要，此不传即可
		//console.log(message); //服务端发送来的消息会在这里接收到
		document.getElementById('showMessage').innerHTML = JSON.stringify(message) + '<br/>' + document.getElementById('showMessage').innerHTML;
	}
});
*/
</script><script src="https://res.zvo.cn/websocket.js/websocket.js"></script>

/*
websocket.connect({
	url:'ws://localhost:8081/', //服务端的WebSocket地址
	onopen:function(){ //如果不需要，此不传即可。
		websocket.send({"type":"CONNECT","token":"123456"}); //当WebSocket通道连接成功后，自动给服务器发送一条json格式的消息
	},
	onmessage:function(message){ //如果不需要，此不传即可
		//console.log(message); //服务端发送来的消息会在这里接收到
		document.getElementById('showMessage').innerHTML = JSON.stringify(message) + '<br/>' + document.getElementById('showMessage').innerHTML;
	}
});
*/
</script> ./websocketd --port=8765 ./count.shpip install --upgrade jinja2<!DOCTYPE HTML>
<html>
<head>
    <title>Flask-SocketIO Test</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js" integrity="sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/3.0.4/socket.io.js" integrity="sha512-aMGMvNYu8Ue4G+fHa359jcPb1u+ytAF+P2SCb+PxrjCdO3n3ZTxJ30zuH39rimUggmTwmh2u7wvQsDTHESnmfQ==" crossorigin="anonymous"></script>
    <script type="text/javascript" charset="utf-8">
        $(document).ready(function() {
            // Connect to the Socket.IO server.
            // The connection URL has the following format, relative to the current page:
            //     http[s]://<domain>:<port>[/<namespace>]
            var socket = io.connect('http://' + document.domain + ':' + location.port);

            // Event handler for new connections.
            // The callback function is invoked when a connection with the
            // server is established.
            socket.on('connect', function() {
                socket.emit('my_event', {data: 'I\'m connected!'});
            });

            // Event handler for server sent data.
            // The callback function is invoked whenever the server emits data
            // to the client. The data is then displayed in the "Received"
            // section of the page.
            socket.on('my_response', function(msg, cb) {
                $('#log').append('<br>' + $('<div/>').text('Received #' + msg.count + ': ' + msg.data).html());
                if (cb)
                    cb();
            });

            // Interval function that tests message latency by sending a "ping"
            // message. The server then responds with a "pong" message and the
            // round trip time is measured.
            var ping_pong_times = [];
            var start_time;
            window.setInterval(function() {
                start_time = (new Date).getTime();
                $('#transport').text(socket.io.engine.transport.name);
                socket.emit('my_ping');
            }, 1000);

            // Handler for the "pong" message. When the pong is received, the
            // time from the ping is stored, and the average of the last 30
            // samples is average and displayed.
            socket.on('my_pong', function() {
                var latency = (new Date).getTime() - start_time;
                ping_pong_times.push(latency);
                ping_pong_times = ping_pong_times.slice(-30); // keep last 30 samples
                var sum = 0;
                for (var i = 0; i < ping_pong_times.length; i++)
                    sum += ping_pong_times[i];
                $('#ping-pong').text(Math.round(10 * sum / ping_pong_times.length) / 10);
            });

            // Handlers for the different forms in the page.
            // These accept data from the user and send it to the server in a
            // variety of ways
            $('form#emit').submit(function(event) {
                socket.emit('my_event', {data: $('#emit_data').val()});
                return false;
            });
            $('form#broadcast').submit(function(event) {
                socket.emit('my_broadcast_event', {data: $('#broadcast_data').val()});
                return false;
            });
            $('form#join').submit(function(event) {
                socket.emit('join', {room: $('#join_room').val()});
                return false;
            });
            $('form#leave').submit(function(event) {
                socket.emit('leave', {room: $('#leave_room').val()});
                return false;
            });
            $('form#send_room').submit(function(event) {
                socket.emit('my_room_event', {room: $('#room_name').val(), data: $('#room_data').val()});
                return false;
            });
            $('form#close').submit(function(event) {
                socket.emit('close_room', {room: $('#close_room').val()});
                return false;
            });
            $('form#disconnect').submit(function(event) {
                socket.emit('disconnect_request');
                return false;
            });
        });
    </script>
</head>
<body>
    <h1>Flask-SocketIO Test</h1>
    <p>
      Async mode is: <b>{{ async_mode }}</b><br>
      Current transport is: <b><span id="transport"></span></b><br>
      Average ping/pong latency: <b><span id="ping-pong"></span>ms</b>
    </p>
    <h2>Send:</h2>
    <form id="emit" method="POST" action='#'>
        <input type="text" name="emit_data" id="emit_data" placeholder="Message">
        <input type="submit" value="Echo">
    </form>
    <form id="broadcast" method="POST" action='#'>
        <input type="text" name="broadcast_data" id="broadcast_data" placeholder="Message">
        <input type="submit" value="Broadcast">
    </form>
    <form id="join" method="POST" action='#'>
        <input type="text" name="join_room" id="join_room" placeholder="Room Name">
        <input type="submit" value="Join Room">
    </form>
    <form id="leave" method="POST" action='#'>
        <input type="text" name="leave_room" id="leave_room" placeholder="Room Name">
        <input type="submit" value="Leave Room">
    </form>
    <form id="send_room" method="POST" action='#'>
        <input type="text" name="room_name" id="room_name" placeholder="Room Name">
        <input type="text" name="room_data" id="room_data" placeholder="Message">
        <input type="submit" value="Send to Room">
    </form>
    <form id="close" method="POST" action="#">
        <input type="text" name="close_room" id="close_room" placeholder="Room Name">
        <input type="submit" value="Close Room">
    </form>
    <form id="disconnect" method="POST" action="#">
        <input type="submit" value="Disconnect">
    </form>
    <h2>Receive:</h2>
    <div id="log"></div>
</body>
</html>from threading import Lock
from flask import Flask, render_template, session, request, copy_current_request_context
from flask_socketio import SocketIO, emit, join_room, leave_room, close_room, rooms, disconnect

# Set this variable to "threading", "eventlet" or "gevent" to test the
# different async modes, or leave it set to None for the application to choose
# the best option based on installed packages.
async_mode = None

app = Flask(__name__)
app.config['SECRET_KEY'] = 'secret!'
socketio = SocketIO(app, async_mode=async_mode)
thread = None
thread_lock = Lock()


def background_thread():
    """Example of how to send server generated events to clients."""
    count = 0
    while True:
        socketio.sleep(10)
        count += 1
        socketio.emit('my_response',
                      {'data': 'Server generated event', 'count': count})


@app.route('/')
def index():
    return render_template('index.html', async_mode=socketio.async_mode)


@socketio.event
def my_event(message):
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response',
         {'data': message['data'], 'count': session['receive_count']})


@socketio.event
def my_broadcast_event(message):
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response',
         {'data': message['data'], 'count': session['receive_count']},
         broadcast=True)


@socketio.event
def join(message):
    join_room(message['room'])
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response',
         {'data': 'In rooms: ' + ', '.join(rooms()),
          'count': session['receive_count']})


@socketio.event
def leave(message):
    leave_room(message['room'])
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response',
         {'data': 'In rooms: ' + ', '.join(rooms()),
          'count': session['receive_count']})


@socketio.on('close_room')
def on_close_room(message):
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response', {'data': 'Room ' + message['room'] + ' is closing.',
                         'count': session['receive_count']},
         to=message['room'])
    close_room(message['room'])


@socketio.event
def my_room_event(message):
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response',
         {'data': message['data'], 'count': session['receive_count']},
         to=message['room'])


@socketio.event
def disconnect_request():
    @copy_current_request_context
    def can_disconnect():
        disconnect()
    session['receive_count'] = session.get('receive_count', 0) + 1
    # for this emit we use a callback function
    # when the callback function is invoked we know that the message has been
    # received and it is safe to disconnect
    emit('my_response',
         {'data': 'Disconnected!', 'count': session['receive_count']},
         callback=can_disconnect)


@socketio.event
def my_ping():
    emit('my_pong')


@socketio.event
def connect():
    global thread
    with thread_lock:
        if thread is None:
            thread = socketio.start_background_task(background_thread)
    emit('my_response', {'data': 'Connected', 'count': 0})


@socketio.on('disconnect')
def test_disconnect():
    print('Client disconnected', request.sid)


if __name__ == '__main__':
    socketio.run(app, host='0.0.0.0', debug=True)
send-receive.sh8、重定向侦测

该网站用来查看某个网址的重定向（redirect）情况。8、重定向侦测

该网站用来查看某个网址的重定向（redirect）情况。tall a little extension to allow access to Chttps://pagespy.jikejishu.com/#/devtools?address=aec89720-14e2-4f80-80a4-166ec1fcb45e.localhttps://pagespy.jikejishu.com/#/devtools?address=e546e926-3e80-449c-860e-c320e0503fc2.localaa=interact(f, x='Hi there!');single_htmlinteract_manual(slow_function,i=FloatSlider(min=1e5, max=1e7, step=1e5));""""""layout=Layout(width='50%', height='80px')[Jupyter Notebook Viewer](https://nbviewer.org/github/koldunovn/nk_public_notebooks/blob/master/Apache_log.ipynb)4、13个对前端开发有用的 Chrome 插件（英文）



本文介绍13个用于前端开发的 Chrome 插件。https://jsdevspace.substack.com/p/13-super-useful-chrome-plugins-for1、Presenterm



将 Markdown 文件转成幻灯片，在命令行播放的开源工具。（@lengyijun 投稿）8、OpenAuth



网页登录的第三方认证的集成库。9、Schemio



基于 Web 的示意图可视化编辑器。10、Buzee



一个桌面软件，提供本地文件的全文搜索（包括图片里面的文字），支持 Windows 和 Mac。6、浏览器的人脸检测能力（英文）



Chrome 浏览器已经支持 Shape Detection API，直接调用这个 API，不用加载任何外部库，就可以通过浏览器识别人脸和二维码。https://learnbyexample.github.io/atom.xml5、ffmpeg.wasm

ffmpeg 库的 wasm 移植，使得 Node.js 可以用这个库编辑视频。、PageSpeed Insights



谷歌官方的网页性能的在线评分工具。2、HTTP Toolkit

这个工具可以拦截和查看 HTTP/HTTPS 请求，并且可以 mock 服务器的回应。3、imgproxy

一个 Go 语言写的图片代理网关，可以代理远程图片，并且提供格式转换和大小缩放功能。8、Slouch stoppah

一个在线小工具，通过电脑摄像头，判断坐在屏幕前面的人的坐姿是否正确。javascript:(function () { var script = document.createElement('script'); script.src="https://cdn.jsdelivr.net/npm/eruda"; document.body.append(script); script.onload = function () { eruda.init(); } })();websocat ws://127.0.0.1:import json
import requests
import websocket


class Shell(object):
    def __init__(self, host='127.0.0.1', port=9222):
        """ init """
        self.host = host
        self.port = port
        self.soc = None
        self.connected = None
        self.tablist = None
        self.find_tabs()

    def connect(self, tab=None, update_tabs=True):
        if update_tabs or not self.tablist:
            self.find_tabs()
        if not tab:
            tab = 0
        wsurl = self.tablist[tab]['webSocketDebuggerUrl']
        #if self.soc.connected:
        #    self.soc.close()
        self.soc = websocket.create_connection(wsurl)
        return self.soc

    def close(self):
        """ Close websocket connection to remote browser."""
        if self.soc:
            self.soc.close()
            self.soc = None

    def find_tabs(self):
        """Connect to host:port and request list of tabs
             return list of dicts of data about open tabs."""
        # find websocket endpoint
        response = requests.get("http://%s:%s/json" % (self.host, self.port))
        self.tablist = json.loads(response.text)
        return self.tablist

    def open_url(self, url):
        """Open a URL in the oldest tab."""
        if not self.soc or not self.soc.connected:
            self.connect(tab=0)
        # force the 'oldest' tab to load url
        navcom = json.dumps({"id": 0,
                             "method": "Page.navigate",
                             "params": {"url": url}})
        # This code would open a new window, but browsers really dont
        # like doing so.  And, the results are irritating at best.
        # navcom=json.dumps({"id":0,"method":"Runtime.evaluate",
        #  "params":{"expression": "window.open('%s', #'_blank',
        # 'toolbar=1,scrollbars=1,location=1,statusbar=0,menubar=1,resizable=1'
        # )" % (url) }})Runtime.evaluate
        self.soc.send(navcom)
        return self.soc.recv()
shell = Shell(host='127.0.0.1', port=9222)  
#shell.connect(0)
#url = 'http://www.clift.org/fred' # shameless
url = 'http://example.com' # shameless
#navcom = json.dumps({"id":0, "method":"Target.createTarget", "params":{"url":url}})
#shell.soc.send(navcom)
shell.connect(0)
navcom = json.dumps({"id":0, "method":"Network.getCookies", "params":{"url":url}})
shell.soc.send(navcom)
response = json.loads(shell.soc.recv())

print(len(shell.find_tabs()))
print(shell.find_tabs()[1]["url"])
#print(shell.find_tabs()[1])
print(response)import json
import requests
import websocket


class Shell(object):
    def __init__(self, host='127.0.0.1', port=9222):
        """ init """
        self.host = host
        self.port = port
        self.soc = None
        self.connected = None
        self.tablist = None
        self.find_tabs()

    def connect(self, tab=None, update_tabs=True):
        if update_tabs or not self.tablist:
            self.find_tabs()
        if not tab:
            tab = 0
        wsurl = self.tablist[tab]['webSocketDebuggerUrl']
        #if self.soc.connected:
        #    self.soc.close()
        self.soc = websocket.create_connection(wsurl)
        return self.soc

    def close(self):
        """ Close websocket connection to remote browser."""
        if self.soc:
            self.soc.close()
            self.soc = None

    def find_tabs(self):
        """Connect to host:port and request list of tabs
             return list of dicts of data about open tabs."""
        # find websocket endpoint
        response = requests.get("http://%s:%s/json" % (self.host, self.port))
        self.tablist = json.loads(response.text)
        return self.tablist

    def open_url(self, url):
        """Open a URL in the oldest tab."""
        if not self.soc or not self.soc.connected:
            self.connect(tab=0)
        # force the 'oldest' tab to load url
        navcom = json.dumps({"id": 0,
                             "method": "Page.navigate",
                             "params": {"url": url}})
        # This code would open a new window, but browsers really dont
        # like doing so.  And, the results are irritating at best.
        # navcom=json.dumps({"id":0,"method":"Runtime.evaluate",
        #  "params":{"expression": "window.open('%s', #'_blank',
        # 'toolbar=1,scrollbars=1,location=1,statusbar=0,menubar=1,resizable=1'
        # )" % (url) }})Runtime.evaluate
        self.soc.send(navcom)
        return self.soc.recv()
shell = Shell(host='127.0.0.1', port=9222)  
#shell.connect(0)
#url = 'http://www.clift.org/fred' # shameless
url = 'http://example.com' # shameless
#navcom = json.dumps({"id":0, "method":"Target.createTarget", "params":{"url":url}})
#shell.soc.send(navcom)
shell.connect(0)
navcom = json.dumps({"id":0, "method":"Network.getCookies", "params":{"url":url}})
shell.soc.send(navcom)
response = json.loads(shell.soc.recv())

print(len(shell.find_tabs()))
print(shell.find_tabs()[1]["url"])
#print(shell.find_tabs()[1])
print(response)https://panel4.serv00.com/mysql/github/koldunovn/nk_public_notebooks/blob/master/Apache_log.ipynbhttps://raw.githubusercontent.com/koldunovn/nk_public_notebooks/master/Apache_log.ipynbselect * from messagesjavascript:date = new Date();
url_root = 'http://nbviewer.ipython.org/';
url = null;
gist_re = /^https?:\/\/gist\.github\.com\/(?:\w+\/)?([a-f0-9]+)$/;
github_re = /^https:\/\/(github\.com\/.*\/)blob\/(.*\.ipynb)$/;
https_re = /^https:\/\/(.*\.ipynb)$/;
http_re = /^http:\/\/(.*\.ipynb)$/;
loc = location.href;
if (gist_re.test(loc)) {
    gist = gist_re.exec(loc);
    url = url_root + gist[1];
} else if (github_re.test(loc)) {
    path = github_re.exec(loc);
    url = url_root + 'urls/raw.' + path[1] + path[2];
} else if (https_re.test(loc)) {
    path = https_re.exec(loc);
    url = url_root + 'urls/' + path[1];
} else if (http_re.test(loc)) {
    path = http_re.exec(loc);
    url = url_root + 'url/' + path[1];}
if (url) {void(window.open(url, 'nbviewer' + date.getTime()));}javascript:date = new Date();
url_root = 'http://nbviewer.ipython.org/';
url = null;
gist_re = /^https?:\/\/gist\.github\.com\/(?:\w+\/)?([a-f0-9]+)$/;
github_re = /^https:\/\/(github\.com\/.*\/)blob\/(.*\.ipynb)$/;
https_re = /^https:\/\/(.*\.ipynb)$/;
http_re = /^http:\/\/(.*\.ipynb)$/;
loc = location.href;
if (gist_re.test(loc)) {
    gist = gist_re.exec(loc);
    url = url_root + gist[1];
} else if (github_re.test(loc)) {
    path = github_re.exec(loc);
    url = url_root + 'urls/raw.' + path[1] + path[2];
} else if (https_re.test(loc)) {
    path = https_re.exec(loc);
    url = url_root + 'urls/' + path[1];
} else if (http_re.test(loc)) {
    path = http_re.exec(loc);
    url = url_root + 'url/' + path[1];}
if (url) {void(window.open(url, 'nbviewer' + date.getTime()));}display(slider)pip install jupyterlab-deckpip install jupyterlab-deckpip install jupyterlab-deckpip install jupyterlab_risepip install nbslidejupyter labextension install jupyterlab_vim{
 "nbformat": 4,
 "nbformat_minor": 2,
 "metadata": {
  "language_info": {
   "name": "python",
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "version": "3.6.8-final"
  },
  "orig_nbformat": 2,
  "file_extension": ".py",
  "mimetype": "text/x-python",
  "name": "python",
  "npconvert_exporter": "python",
  "pygments_lexer": "ipython3",
  "version": 3,
  "kernelspec": {
   "name": "python36864bitjupyterapipipenv100023b4210342f0b1028e92ab62ef71",
   "display_name": "Python 3.6.8 64-bit ('jupyter-api': pipenv)"
  }
 },
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "import datetime\n",
    "import requests\n",
    "import pandas as pd\n",
    "import inspect\n",
    "from inspect import getsourcefile\n",
    "from requests_html import HTML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename     = inspect.getframeinfo(inspect.currentframe()).filename\n",
    "BASE_DIR     = os.path.dirname(os.path.abspath(filename))\n",
    "DATA_DIR     = os.path.join(os.path.dirname(BASE_DIR), 'data')\n",
    "os.makedirs(DATA_DIR, exist_ok=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def url_to_txt(url, filename=\"world.html\", save=False):\n",
    "    r = requests.get(url)\n",
    "    if r.status_code == 200:\n",
    "        html_text = r.text\n",
    "        if save:\n",
    "            with open(f\"world-{year}.html\", 'w') as f:\n",
    "                f.write(html_text)\n",
    "        return html_text\n",
    "    return None\n",
    "\n",
    "\n",
    "def parse_and_extract(url, name='2020'):\n",
    "    html_text = url_to_txt(url)\n",
    "    if html_text == None:\n",
    "        return False\n",
    "    r_html = HTML(html=html_text)\n",
    "    table_class = \".imdb-scroll-table\"\n",
    "    # table_class = \"#table\"\n",
    "    r_table = r_html.find(table_class)\n",
    "\n",
    "    # print(r_table)\n",
    "    table_data = []\n",
    "    # table_data_dicts = []\n",
    "    header_names = []\n",
    "    if len(r_table) == 0:\n",
    "        return False\n",
    "    parsed_table = r_table[0]\n",
    "    rows = parsed_table.find(\"tr\")\n",
    "    header_row = rows[0]\n",
    "    header_cols = header_row.find('th')\n",
    "    header_names = [x.text for x in header_cols]\n",
    "    for row in rows[1:]:\n",
    "        # print(row.text)\n",
    "        cols = row.find(\"td\")\n",
    "        row_data = []\n",
    "        row_dict_data = {}\n",
    "        for i, col in enumerate(cols):\n",
    "            # print(i, col.text, '\\n\\n')\n",
    "            header_name = header_names[i]\n",
    "            # row_dict_data[header_name] = col.text\n",
    "            row_data.append(col.text)\n",
    "        # table_data_dicts.append(row_dict_data)\n",
    "        table_data.append(row_data)\n",
    "    df = pd.DataFrame(table_data, columns=header_names)\n",
    "    # df = pd.DataFrame(table_data_dicts)\n",
    "    datadir_path = DATA_DIR\n",
    "    os.makedirs(datadir_path, exist_ok=True)\n",
    "    filepath = os.path.join(datadir_path, f'{name}.csv')\n",
    "    df.to_csv(filepath, index=False)\n",
    "    return True\n",
    "\n",
    "def run(start_year=None, years_ago=0):\n",
    "    if start_year == None:\n",
    "        now = datetime.datetime.now()\n",
    "        start_year = now.year\n",
    "    assert isinstance(start_year, int)\n",
    "    assert isinstance(years_ago, int)\n",
    "    assert len(f\"{start_year}\") == 4\n",
    "    for i in range(0, years_ago+1):\n",
    "        url = f\"https://www.boxofficemojo.com/year/world/{start_year}/\"\n",
    "        finished = parse_and_extract(url, name=start_year)\n",
    "        if finished:\n",
    "            print(f\"Finished {start_year}\")\n",
    "        else:\n",
    "            print(f\"{start_year} not finished\")\n",
    "        start_year -= 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "Finished 2020\n"
    }
   ],
   "source": [
    "run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ]
}{
 "nbformat": 4,
 "nbformat_minor": 2,
 "metadata": {
  "language_info": {
   "name": "python",
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "version": "3.6.8-final"
  },
  "orig_nbformat": 2,
  "file_extension": ".py",
  "mimetype": "text/x-python",
  "name": "python",
  "npconvert_exporter": "python",
  "pygments_lexer": "ipython3",
  "version": 3,
  "kernelspec": {
   "name": "python36864bitjupyterapipipenv100023b4210342f0b1028e92ab62ef71",
   "display_name": "Python 3.6.8 64-bit ('jupyter-api': pipenv)"
  }
 },
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "import datetime\n",
    "import requests\n",
    "import pandas as pd\n",
    "import inspect\n",
    "from inspect import getsourcefile\n",
    "from requests_html import HTML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename     = inspect.getframeinfo(inspect.currentframe()).filename\n",
    "BASE_DIR     = os.path.dirname(os.path.abspath(filename))\n",
    "DATA_DIR     = os.path.join(os.path.dirname(BASE_DIR), 'data')\n",
    "os.makedirs(DATA_DIR, exist_ok=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def url_to_txt(url, filename=\"world.html\", save=False):\n",
    "    r = requests.get(url)\n",
    "    if r.status_code == 200:\n",
    "        html_text = r.text\n",
    "        if save:\n",
    "            with open(f\"world-{year}.html\", 'w') as f:\n",
    "                f.write(html_text)\n",
    "        return html_text\n",
    "    return None\n",
    "\n",
    "\n",
    "def parse_and_extract(url, name='2020'):\n",
    "    html_text = url_to_txt(url)\n",
    "    if html_text == None:\n",
    "        return False\n",
    "    r_html = HTML(html=html_text)\n",
    "    table_class = \".imdb-scroll-table\"\n",
    "    # table_class = \"#table\"\n",
    "    r_table = r_html.find(table_class)\n",
    "\n",
    "    # print(r_table)\n",
    "    table_data = []\n",
    "    # table_data_dicts = []\n",
    "    header_names = []\n",
    "    if len(r_table) == 0:\n",
    "        return False\n",
    "    parsed_table = r_table[0]\n",
    "    rows = parsed_table.find(\"tr\")\n",
    "    header_row = rows[0]\n",
    "    header_cols = header_row.find('th')\n",
    "    header_names = [x.text for x in header_cols]\n",
    "    for row in rows[1:]:\n",
    "        # print(row.text)\n",
    "        cols = row.find(\"td\")\n",
    "        row_data = []\n",
    "        row_dict_data = {}\n",
    "        for i, col in enumerate(cols):\n",
    "            # print(i, col.text, '\\n\\n')\n",
    "            header_name = header_names[i]\n",
    "            # row_dict_data[header_name] = col.text\n",
    "            row_data.append(col.text)\n",
    "        # table_data_dicts.append(row_dict_data)\n",
    "        table_data.append(row_data)\n",
    "    df = pd.DataFrame(table_data, columns=header_names)\n",
    "    # df = pd.DataFrame(table_data_dicts)\n",
    "    datadir_path = DATA_DIR\n",
    "    os.makedirs(datadir_path, exist_ok=True)\n",
    "    filepath = os.path.join(datadir_path, f'{name}.csv')\n",
    "    df.to_csv(filepath, index=False)\n",
    "    return True\n",
    "\n",
    "def run(start_year=None, years_ago=0):\n",
    "    if start_year == None:\n",
    "        now = datetime.datetime.now()\n",
    "        start_year = now.year\n",
    "    assert isinstance(start_year, int)\n",
    "    assert isinstance(years_ago, int)\n",
    "    assert len(f\"{start_year}\") == 4\n",
    "    for i in range(0, years_ago+1):\n",
    "        url = f\"https://www.boxofficemojo.com/year/world/{start_year}/\"\n",
    "        finished = parse_and_extract(url, name=start_year)\n",
    "        if finished:\n",
    "            print(f\"Finished {start_year}\")\n",
    "        else:\n",
    "            print(f\"{start_year} not finished\")\n",
    "        start_year -= 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "Finished 2020\n"
    }
   ],
   "source": [
    "run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ]
}conda env create -f environment.ymljupyter2slideshttps://github.com/hkust-dh/jupyter-slides-demo.gitjupyter<script type="text/template">pip install -r requirements.txtimport nbformat
from nbconvert.preprocessors import ExecutePreprocessor

def trigger(notebook_filename='chp-traffic.ipynb'):
    with open(notebook_filename) as f:
        nb = nbformat.read(f, as_version=4)
    ep = ExecutePreprocessor(timeout=600, kernel_name='python3')
    r = ep.preprocess(nb)
    return rpip install jupyterlab-code-foldingjupyterlab-vimfrom ipywidgets import interact, interactive, fixed, interact_manual,Layout
import ipywidgets as widgets
import subprocess

a=widgets.Textarea(

    value="echo '' | gotify push -p 1",
    placeholder='Type something',
    description='String:',
    layout=Layout(width='550px', height='200px'),
    disabled=False

)
def slow_function(x):
    cmd(x)
    return x
    #ddd='cat r.sh'
def cmd(arg):
    p = subprocess.Popen(args=arg, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    single_html =p.stdout.read().decode(encoding="utf-8", errors="strict")
    print(single_html)

def f1(y):
    cmd(y)
    return y
interact_manual(f1, y=r'echo "select * from messages order by id desc limit 3" | sqlite3 /home/pia/pdf/gotify.db;ls /home/pia/upload/gotify-2014*.db')
from ipywidgets import interact, interactive, fixed, interact_manual,Layout
import ipywidgets as widgets
import subprocess

a=widgets.Textarea(

    value="echo '' | gotify push -p 1",
    placeholder='Type something',
    description='String:',
    layout=Layout(width='550px', height='200px'),
    disabled=False

)
def slow_function(x):
    cmd(x)
    return x
    #ddd='cat r.sh'
def cmd(arg):
    p = subprocess.Popen(args=arg, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    single_html =p.stdout.read().decode(encoding="utf-8", errors="strict")
    print(single_html)

def f1(y):
    cmd(y)
    return y
interact_manual(f1, y=r'echo "select * from messages order by id desc limit 3" | sqlite3 /home/pia/pdf/gotify.db;ls /home/pia/upload/gotify-2014*.db')
9YeExykKItI-Jf2r-AHAz5eAXH3MZx3G5zs7Vj1BWPghttps://binder.curvenote.dev/https://binder.curvenote.dev/from fasthtml.common import *
from collections import deque

app, rt = fast_app(exts='ws')

# All messages here, but only most recent 15 are stored
messages = deque(maxlen=15)
users = {}

# Takes all the messages and renders them
box_style = "border: 1px solid #ccc; border-radius: 10px; padding: 10px; margin: 5px 0;"
def render_messages(messages):
    return Div(*[Div(m, style=box_style) for m in messages], id='msg-list')

# Input field is reset via hx_swap_oob after submitting a message
def mk_input(): return Input(id='msg', placeholder="Type your message", value="", hx_swap_oob="true")

@rt
def index():
    return Titled("Leave a message for others!"),Div(
        Form(mk_input(), ws_send=True), # input field
        P("Leave a message for others!"),
        Div(render_messages(messages),id='msg-list'), # All the Messages
        hx_ext='ws', ws_connect='ws') # Use a web socket 

def on_connect(ws, send): users[id(ws)] = send
def on_disconnect(ws):users.pop(id(ws),None)

@app.ws('/ws', conn=on_connect, disconn=on_disconnect)
async def ws(msg:str,send):
    await send(mk_input()) # reset the input field immediately
    messages.appendleft(msg) # New messages first
    for u in users.values(): # Get `send` function for a user
        await u(render_messages(messages)) # Send the message to that user

serve()from fasthtml.common import *
from collections import deque

app, rt = fast_app(exts='ws')

# All messages here, but only most recent 15 are stored
messages = deque(maxlen=15)
users = {}

# Takes all the messages and renders them
box_style = "border: 1px solid #ccc; border-radius: 10px; padding: 10px; margin: 5px 0;"
def render_messages(messages):
    return Div(*[Div(m, style=box_style) for m in messages], id='msg-list')

# Input field is reset via hx_swap_oob after submitting a message
def mk_input(): return Input(id='msg', placeholder="Type your message", value="", hx_swap_oob="true")

@rt
def index():
    return Titled("Leave a message for others!"),Div(
        Form(mk_input(), ws_send=True), # input field
        P("Leave a message for others!"),
        Div(render_messages(messages),id='msg-list'), # All the Messages
        hx_ext='ws', ws_connect='ws') # Use a web socket 

def on_connect(ws, send): users[id(ws)] = send
def on_disconnect(ws):users.pop(id(ws),None)

@app.ws('/ws', conn=on_connect, disconn=on_disconnect)
async def ws(msg:str,send):
    await send(mk_input()) # reset the input field immediately
    messages.appendleft(msg) # New messages first
    for u in users.values(): # Get `send` function for a user
        await u(render_messages(messages)) # Send the message to that user

serve()--no-use-pep517--no-use-pep517conda create -n binderhub-in-a-box -f environment.ymlTypeError: unsupported operand type(s) for |: 'type' and 'type'import socket

def main():
    # 创建一个TCP套接字
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    # 绑定IP地址和端口
    server_socket.bind(('127.0.0.1', 12346))

    # 监听连接
    server_socket.listen(5)

    print("服务器已启动，等待客户端连接...")

    while True:
        # 接受客户端连接
        client_socket, client_address = server_socket.accept()
        print(f"客户端{client_address}已连接")

        # 接收客户端发送的数据
        data = client_socket.recv(1024)
        print(f"收到来自{client_address}的数据： {data.decode('utf-8')}")

        # 将接收到的数据发送回客户端
        client_socket.send(data)
        print(f"已将数据发送回{client_address}")

        # 关闭客户端套接字
        client_socket.close()
        print(f"客户端{client_address}已断开连接")

if __name__ == "__main__":
    main()loop = asyncio.get_event_loop()const WebSocket = require('ws');

// 替换为你的 WebSocket 服务器地址
const socket = new WebSocket("ws://10.10.49.172:8765");

// 监听连接打开事件
socket.addEventListener("open", (event) => {
    console.log("WebSocket connection opened.");

    // 构造二进制数据，这里使用一个简单的示例
    const binaryData = new Uint8Array([49, 50, 51, 52]);

    // 发送二进制数据
    socket.send(binaryData);

    console.log("Binary data sent successfully.");
});

// 监听接收消息事件
socket.addEventListener("message", (event) => {
    console.log("Received message:", event.data);
});

// 监听连接关闭事件
socket.addEventListener("close", (event) => {
    console.log("WebSocket connection closed.");
});

// 监听错误事件
socket.addEventListener("error", (event) => {
    console.error("WebSocket error:", event);
});websocket<!DOCTYPE html>
<pre id="log"></pre>
<script>
  // helper function: log message to screen
  function log(msg) {
    document.getElementById('log').textContent += msg + '\n';
  }

  // setup websocket with callbacks
  var ws = new WebSocket('ws://localhost:8080/');
  ws.onopen = function() {
    log('CONNECT');
  };
  ws.onclose = function() {
    log('DISCONNECT');
  };
  ws.onmessage = function(event) {
    log('MESSAGE: ' + event.data);
  };
</script><script src="https://res.zvo.cn/websocket.js/websocket.js"></script>

/*
websocket.connect({
	url:'ws://localhost:8081/', //服务端的WebSocket地址
	onopen:function(){ //如果不需要，此不传即可。
		websocket.send({"type":"CONNECT","token":"123456"}); //当WebSocket通道连接成功后，自动给服务器发送一条json格式的消息
	},
	onmessage:function(message){ //如果不需要，此不传即可
		//console.log(message); //服务端发送来的消息会在这里接收到
		document.getElementById('showMessage').innerHTML = JSON.stringify(message) + '<br/>' + document.getElementById('showMessage').innerHTML;
	}
});
*/
</script><script src="https://res.zvo.cn/websocket.js/websocket.js"></script>

/*
websocket.connect({
	url:'ws://localhost:8081/', //服务端的WebSocket地址
	onopen:function(){ //如果不需要，此不传即可。
		websocket.send({"type":"CONNECT","token":"123456"}); //当WebSocket通道连接成功后，自动给服务器发送一条json格式的消息
	},
	onmessage:function(message){ //如果不需要，此不传即可
		//console.log(message); //服务端发送来的消息会在这里接收到
		document.getElementById('showMessage').innerHTML = JSON.stringify(message) + '<br/>' + document.getElementById('showMessage').innerHTML;
	}
});
*/
</script> ./websocketd --port=8765 ./count.shpip install --upgrade jinja2<!DOCTYPE HTML>
<html>
<head>
    <title>Flask-SocketIO Test</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js" integrity="sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/3.0.4/socket.io.js" integrity="sha512-aMGMvNYu8Ue4G+fHa359jcPb1u+ytAF+P2SCb+PxrjCdO3n3ZTxJ30zuH39rimUggmTwmh2u7wvQsDTHESnmfQ==" crossorigin="anonymous"></script>
    <script type="text/javascript" charset="utf-8">
        $(document).ready(function() {
            // Connect to the Socket.IO server.
            // The connection URL has the following format, relative to the current page:
            //     http[s]://<domain>:<port>[/<namespace>]
            var socket = io.connect('http://' + document.domain + ':' + location.port);

            // Event handler for new connections.
            // The callback function is invoked when a connection with the
            // server is established.
            socket.on('connect', function() {
                socket.emit('my_event', {data: 'I\'m connected!'});
            });

            // Event handler for server sent data.
            // The callback function is invoked whenever the server emits data
            // to the client. The data is then displayed in the "Received"
            // section of the page.
            socket.on('my_response', function(msg, cb) {
                $('#log').append('<br>' + $('<div/>').text('Received #' + msg.count + ': ' + msg.data).html());
                if (cb)
                    cb();
            });

            // Interval function that tests message latency by sending a "ping"
            // message. The server then responds with a "pong" message and the
            // round trip time is measured.
            var ping_pong_times = [];
            var start_time;
            window.setInterval(function() {
                start_time = (new Date).getTime();
                $('#transport').text(socket.io.engine.transport.name);
                socket.emit('my_ping');
            }, 1000);

            // Handler for the "pong" message. When the pong is received, the
            // time from the ping is stored, and the average of the last 30
            // samples is average and displayed.
            socket.on('my_pong', function() {
                var latency = (new Date).getTime() - start_time;
                ping_pong_times.push(latency);
                ping_pong_times = ping_pong_times.slice(-30); // keep last 30 samples
                var sum = 0;
                for (var i = 0; i < ping_pong_times.length; i++)
                    sum += ping_pong_times[i];
                $('#ping-pong').text(Math.round(10 * sum / ping_pong_times.length) / 10);
            });

            // Handlers for the different forms in the page.
            // These accept data from the user and send it to the server in a
            // variety of ways
            $('form#emit').submit(function(event) {
                socket.emit('my_event', {data: $('#emit_data').val()});
                return false;
            });
            $('form#broadcast').submit(function(event) {
                socket.emit('my_broadcast_event', {data: $('#broadcast_data').val()});
                return false;
            });
            $('form#join').submit(function(event) {
                socket.emit('join', {room: $('#join_room').val()});
                return false;
            });
            $('form#leave').submit(function(event) {
                socket.emit('leave', {room: $('#leave_room').val()});
                return false;
            });
            $('form#send_room').submit(function(event) {
                socket.emit('my_room_event', {room: $('#room_name').val(), data: $('#room_data').val()});
                return false;
            });
            $('form#close').submit(function(event) {
                socket.emit('close_room', {room: $('#close_room').val()});
                return false;
            });
            $('form#disconnect').submit(function(event) {
                socket.emit('disconnect_request');
                return false;
            });
        });
    </script>
</head>
<body>
    <h1>Flask-SocketIO Test</h1>
    <p>
      Async mode is: <b>{{ async_mode }}</b><br>
      Current transport is: <b><span id="transport"></span></b><br>
      Average ping/pong latency: <b><span id="ping-pong"></span>ms</b>
    </p>
    <h2>Send:</h2>
    <form id="emit" method="POST" action='#'>
        <input type="text" name="emit_data" id="emit_data" placeholder="Message">
        <input type="submit" value="Echo">
    </form>
    <form id="broadcast" method="POST" action='#'>
        <input type="text" name="broadcast_data" id="broadcast_data" placeholder="Message">
        <input type="submit" value="Broadcast">
    </form>
    <form id="join" method="POST" action='#'>
        <input type="text" name="join_room" id="join_room" placeholder="Room Name">
        <input type="submit" value="Join Room">
    </form>
    <form id="leave" method="POST" action='#'>
        <input type="text" name="leave_room" id="leave_room" placeholder="Room Name">
        <input type="submit" value="Leave Room">
    </form>
    <form id="send_room" method="POST" action='#'>
        <input type="text" name="room_name" id="room_name" placeholder="Room Name">
        <input type="text" name="room_data" id="room_data" placeholder="Message">
        <input type="submit" value="Send to Room">
    </form>
    <form id="close" method="POST" action="#">
        <input type="text" name="close_room" id="close_room" placeholder="Room Name">
        <input type="submit" value="Close Room">
    </form>
    <form id="disconnect" method="POST" action="#">
        <input type="submit" value="Disconnect">
    </form>
    <h2>Receive:</h2>
    <div id="log"></div>
</body>
</html>from threading import Lock
from flask import Flask, render_template, session, request, copy_current_request_context
from flask_socketio import SocketIO, emit, join_room, leave_room, close_room, rooms, disconnect

# Set this variable to "threading", "eventlet" or "gevent" to test the
# different async modes, or leave it set to None for the application to choose
# the best option based on installed packages.
async_mode = None

app = Flask(__name__)
app.config['SECRET_KEY'] = 'secret!'
socketio = SocketIO(app, async_mode=async_mode)
thread = None
thread_lock = Lock()


def background_thread():
    """Example of how to send server generated events to clients."""
    count = 0
    while True:
        socketio.sleep(10)
        count += 1
        socketio.emit('my_response',
                      {'data': 'Server generated event', 'count': count})


@app.route('/')
def index():
    return render_template('index.html', async_mode=socketio.async_mode)


@socketio.event
def my_event(message):
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response',
         {'data': message['data'], 'count': session['receive_count']})


@socketio.event
def my_broadcast_event(message):
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response',
         {'data': message['data'], 'count': session['receive_count']},
         broadcast=True)


@socketio.event
def join(message):
    join_room(message['room'])
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response',
         {'data': 'In rooms: ' + ', '.join(rooms()),
          'count': session['receive_count']})


@socketio.event
def leave(message):
    leave_room(message['room'])
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response',
         {'data': 'In rooms: ' + ', '.join(rooms()),
          'count': session['receive_count']})


@socketio.on('close_room')
def on_close_room(message):
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response', {'data': 'Room ' + message['room'] + ' is closing.',
                         'count': session['receive_count']},
         to=message['room'])
    close_room(message['room'])


@socketio.event
def my_room_event(message):
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response',
         {'data': message['data'], 'count': session['receive_count']},
         to=message['room'])


@socketio.event
def disconnect_request():
    @copy_current_request_context
    def can_disconnect():
        disconnect()
    session['receive_count'] = session.get('receive_count', 0) + 1
    # for this emit we use a callback function
    # when the callback function is invoked we know that the message has been
    # received and it is safe to disconnect
    emit('my_response',
         {'data': 'Disconnected!', 'count': session['receive_count']},
         callback=can_disconnect)


@socketio.event
def my_ping():
    emit('my_pong')


@socketio.event
def connect():
    global thread
    with thread_lock:
        if thread is None:
            thread = socketio.start_background_task(background_thread)
    emit('my_response', {'data': 'Connected', 'count': 0})


@socketio.on('disconnect')
def test_disconnect():
    print('Client disconnected', request.sid)


if __name__ == '__main__':
    socketio.run(app, host='0.0.0.0', debug=True)
send-receive.sh<!DOCTYPE html>
<pre id="log"></pre>
<script>
  // helper function: log message to screen
  function log(msg) {
    document.getElementById('log').textContent += msg + '\n';
  }

  // setup websocket with callbacks
  var ws = new WebSocket('ws://localhost:8080/');
  ws.onopen = function() {
    log('CONNECT');
  };
  ws.onclose = function() {
    log('DISCONNECT');
  };
  ws.onmessage = function(event) {
    log('MESSAGE: ' + event.data);
  };
</script>echo $REPLYecho $REPLYhttp://45.32.200.249:1234/count.sh# Then access http://localhost:1234/dump-env.sh
#You can also test the command files by running from the command line.www.example.com/socketserver8、重定向侦测

该网站用来查看某个网址的重定向（redirect）情况。8、重定向侦测

该网站用来查看某个网址的重定向（redirect）情况。tall a little extension to allow access to Chttps://pagespy.jikejishu.com/#/devtools?address=aec89720-14e2-4f80-80a4-166ec1fcb45e.localhttps://pagespy.jikejishu.com/#/devtools?address=e546e926-3e80-449c-860e-c320e0503fc2.localaa=interact(f, x='Hi there!');single_htmlinteract_manual(slow_function,i=FloatSlider(min=1e5, max=1e7, step=1e5));""""""layout=Layout(width='50%', height='80px')[Jupyter Notebook Viewer](https://nbviewer.org/github/koldunovn/nk_public_notebooks/blob/master/Apache_log.ipynb)4、13个对前端开发有用的 Chrome 插件（英文）



本文介绍13个用于前端开发的 Chrome 插件。https://jsdevspace.substack.com/p/13-super-useful-chrome-plugins-for1、Presenterm



将 Markdown 文件转成幻灯片，在命令行播放的开源工具。（@lengyijun 投稿）8、OpenAuth



网页登录的第三方认证的集成库。9、Schemio



基于 Web 的示意图可视化编辑器。10、Buzee



一个桌面软件，提供本地文件的全文搜索（包括图片里面的文字），支持 Windows 和 Mac。6、浏览器的人脸检测能力（英文）



Chrome 浏览器已经支持 Shape Detection API，直接调用这个 API，不用加载任何外部库，就可以通过浏览器识别人脸和二维码。https://learnbyexample.github.io/atom.xml5、ffmpeg.wasm

ffmpeg 库的 wasm 移植，使得 Node.js 可以用这个库编辑视频。、PageSpeed Insights



谷歌官方的网页性能的在线评分工具。2、HTTP Toolkit

这个工具可以拦截和查看 HTTP/HTTPS 请求，并且可以 mock 服务器的回应。3、imgproxy

一个 Go 语言写的图片代理网关，可以代理远程图片，并且提供格式转换和大小缩放功能。8、Slouch stoppah

一个在线小工具，通过电脑摄像头，判断坐在屏幕前面的人的坐姿是否正确。javascript:(function () { var script = document.createElement('script'); script.src="https://cdn.jsdelivr.net/npm/eruda"; document.body.append(script); script.onload = function () { eruda.init(); } })();websocat ws://127.0.0.1:import json
import requests
import websocket


class Shell(object):
    def __init__(self, host='127.0.0.1', port=9222):
        """ init """
        self.host = host
        self.port = port
        self.soc = None
        self.connected = None
        self.tablist = None
        self.find_tabs()

    def connect(self, tab=None, update_tabs=True):
        if update_tabs or not self.tablist:
            self.find_tabs()
        if not tab:
            tab = 0
        wsurl = self.tablist[tab]['webSocketDebuggerUrl']
        #if self.soc.connected:
        #    self.soc.close()
        self.soc = websocket.create_connection(wsurl)
        return self.soc

    def close(self):
        """ Close websocket connection to remote browser."""
        if self.soc:
            self.soc.close()
            self.soc = None

    def find_tabs(self):
        """Connect to host:port and request list of tabs
             return list of dicts of data about open tabs."""
        # find websocket endpoint
        response = requests.get("http://%s:%s/json" % (self.host, self.port))
        self.tablist = json.loads(response.text)
        return self.tablist

    def open_url(self, url):
        """Open a URL in the oldest tab."""
        if not self.soc or not self.soc.connected:
            self.connect(tab=0)
        # force the 'oldest' tab to load url
        navcom = json.dumps({"id": 0,
                             "method": "Page.navigate",
                             "params": {"url": url}})
        # This code would open a new window, but browsers really dont
        # like doing so.  And, the results are irritating at best.
        # navcom=json.dumps({"id":0,"method":"Runtime.evaluate",
        #  "params":{"expression": "window.open('%s', #'_blank',
        # 'toolbar=1,scrollbars=1,location=1,statusbar=0,menubar=1,resizable=1'
        # )" % (url) }})Runtime.evaluate
        self.soc.send(navcom)
        return self.soc.recv()
shell = Shell(host='127.0.0.1', port=9222)  
#shell.connect(0)
#url = 'http://www.clift.org/fred' # shameless
url = 'http://example.com' # shameless
#navcom = json.dumps({"id":0, "method":"Target.createTarget", "params":{"url":url}})
#shell.soc.send(navcom)
shell.connect(0)
navcom = json.dumps({"id":0, "method":"Network.getCookies", "params":{"url":url}})
shell.soc.send(navcom)
response = json.loads(shell.soc.recv())

print(len(shell.find_tabs()))
print(shell.find_tabs()[1]["url"])
#print(shell.find_tabs()[1])
print(response)import json
import requests
import websocket


class Shell(object):
    def __init__(self, host='127.0.0.1', port=9222):
        """ init """
        self.host = host
        self.port = port
        self.soc = None
        self.connected = None
        self.tablist = None
        self.find_tabs()

    def connect(self, tab=None, update_tabs=True):
        if update_tabs or not self.tablist:
            self.find_tabs()
        if not tab:
            tab = 0
        wsurl = self.tablist[tab]['webSocketDebuggerUrl']
        #if self.soc.connected:
        #    self.soc.close()
        self.soc = websocket.create_connection(wsurl)
        return self.soc

    def close(self):
        """ Close websocket connection to remote browser."""
        if self.soc:
            self.soc.close()
            self.soc = None

    def find_tabs(self):
        """Connect to host:port and request list of tabs
             return list of dicts of data about open tabs."""
        # find websocket endpoint
        response = requests.get("http://%s:%s/json" % (self.host, self.port))
        self.tablist = json.loads(response.text)
        return self.tablist

    def open_url(self, url):
        """Open a URL in the oldest tab."""
        if not self.soc or not self.soc.connected:
            self.connect(tab=0)
        # force the 'oldest' tab to load url
        navcom = json.dumps({"id": 0,
                             "method": "Page.navigate",
                             "params": {"url": url}})
        # This code would open a new window, but browsers really dont
        # like doing so.  And, the results are irritating at best.
        # navcom=json.dumps({"id":0,"method":"Runtime.evaluate",
        #  "params":{"expression": "window.open('%s', #'_blank',
        # 'toolbar=1,scrollbars=1,location=1,statusbar=0,menubar=1,resizable=1'
        # )" % (url) }})Runtime.evaluate
        self.soc.send(navcom)
        return self.soc.recv()
shell = Shell(host='127.0.0.1', port=9222)  
#shell.connect(0)
#url = 'http://www.clift.org/fred' # shameless
url = 'http://example.com' # shameless
#navcom = json.dumps({"id":0, "method":"Target.createTarget", "params":{"url":url}})
#shell.soc.send(navcom)
shell.connect(0)
navcom = json.dumps({"id":0, "method":"Network.getCookies", "params":{"url":url}})
shell.soc.send(navcom)
response = json.loads(shell.soc.recv())

print(len(shell.find_tabs()))
print(shell.find_tabs()[1]["url"])
#print(shell.find_tabs()[1])
print(response)https://panel4.serv00.com/mysql/github/koldunovn/nk_public_notebooks/blob/master/Apache_log.ipynbhttps://raw.githubusercontent.com/koldunovn/nk_public_notebooks/master/Apache_log.ipynbselect * from messagesjavascript:date = new Date();
url_root = 'http://nbviewer.ipython.org/';
url = null;
gist_re = /^https?:\/\/gist\.github\.com\/(?:\w+\/)?([a-f0-9]+)$/;
github_re = /^https:\/\/(github\.com\/.*\/)blob\/(.*\.ipynb)$/;
https_re = /^https:\/\/(.*\.ipynb)$/;
http_re = /^http:\/\/(.*\.ipynb)$/;
loc = location.href;
if (gist_re.test(loc)) {
    gist = gist_re.exec(loc);
    url = url_root + gist[1];
} else if (github_re.test(loc)) {
    path = github_re.exec(loc);
    url = url_root + 'urls/raw.' + path[1] + path[2];
} else if (https_re.test(loc)) {
    path = https_re.exec(loc);
    url = url_root + 'urls/' + path[1];
} else if (http_re.test(loc)) {
    path = http_re.exec(loc);
    url = url_root + 'url/' + path[1];}
if (url) {void(window.open(url, 'nbviewer' + date.getTime()));}javascript:date = new Date();
url_root = 'http://nbviewer.ipython.org/';
url = null;
gist_re = /^https?:\/\/gist\.github\.com\/(?:\w+\/)?([a-f0-9]+)$/;
github_re = /^https:\/\/(github\.com\/.*\/)blob\/(.*\.ipynb)$/;
https_re = /^https:\/\/(.*\.ipynb)$/;
http_re = /^http:\/\/(.*\.ipynb)$/;
loc = location.href;
if (gist_re.test(loc)) {
    gist = gist_re.exec(loc);
    url = url_root + gist[1];
} else if (github_re.test(loc)) {
    path = github_re.exec(loc);
    url = url_root + 'urls/raw.' + path[1] + path[2];
} else if (https_re.test(loc)) {
    path = https_re.exec(loc);
    url = url_root + 'urls/' + path[1];
} else if (http_re.test(loc)) {
    path = http_re.exec(loc);
    url = url_root + 'url/' + path[1];}
if (url) {void(window.open(url, 'nbviewer' + date.getTime()));}display(slider)pip install jupyterlab-deckpip install jupyterlab-deckpip install jupyterlab-deckpip install jupyterlab_risepip install nbslidejupyter labextension install jupyterlab_vim{
 "nbformat": 4,
 "nbformat_minor": 2,
 "metadata": {
  "language_info": {
   "name": "python",
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "version": "3.6.8-final"
  },
  "orig_nbformat": 2,
  "file_extension": ".py",
  "mimetype": "text/x-python",
  "name": "python",
  "npconvert_exporter": "python",
  "pygments_lexer": "ipython3",
  "version": 3,
  "kernelspec": {
   "name": "python36864bitjupyterapipipenv100023b4210342f0b1028e92ab62ef71",
   "display_name": "Python 3.6.8 64-bit ('jupyter-api': pipenv)"
  }
 },
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "import datetime\n",
    "import requests\n",
    "import pandas as pd\n",
    "import inspect\n",
    "from inspect import getsourcefile\n",
    "from requests_html import HTML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename     = inspect.getframeinfo(inspect.currentframe()).filename\n",
    "BASE_DIR     = os.path.dirname(os.path.abspath(filename))\n",
    "DATA_DIR     = os.path.join(os.path.dirname(BASE_DIR), 'data')\n",
    "os.makedirs(DATA_DIR, exist_ok=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def url_to_txt(url, filename=\"world.html\", save=False):\n",
    "    r = requests.get(url)\n",
    "    if r.status_code == 200:\n",
    "        html_text = r.text\n",
    "        if save:\n",
    "            with open(f\"world-{year}.html\", 'w') as f:\n",
    "                f.write(html_text)\n",
    "        return html_text\n",
    "    return None\n",
    "\n",
    "\n",
    "def parse_and_extract(url, name='2020'):\n",
    "    html_text = url_to_txt(url)\n",
    "    if html_text == None:\n",
    "        return False\n",
    "    r_html = HTML(html=html_text)\n",
    "    table_class = \".imdb-scroll-table\"\n",
    "    # table_class = \"#table\"\n",
    "    r_table = r_html.find(table_class)\n",
    "\n",
    "    # print(r_table)\n",
    "    table_data = []\n",
    "    # table_data_dicts = []\n",
    "    header_names = []\n",
    "    if len(r_table) == 0:\n",
    "        return False\n",
    "    parsed_table = r_table[0]\n",
    "    rows = parsed_table.find(\"tr\")\n",
    "    header_row = rows[0]\n",
    "    header_cols = header_row.find('th')\n",
    "    header_names = [x.text for x in header_cols]\n",
    "    for row in rows[1:]:\n",
    "        # print(row.text)\n",
    "        cols = row.find(\"td\")\n",
    "        row_data = []\n",
    "        row_dict_data = {}\n",
    "        for i, col in enumerate(cols):\n",
    "            # print(i, col.text, '\\n\\n')\n",
    "            header_name = header_names[i]\n",
    "            # row_dict_data[header_name] = col.text\n",
    "            row_data.append(col.text)\n",
    "        # table_data_dicts.append(row_dict_data)\n",
    "        table_data.append(row_data)\n",
    "    df = pd.DataFrame(table_data, columns=header_names)\n",
    "    # df = pd.DataFrame(table_data_dicts)\n",
    "    datadir_path = DATA_DIR\n",
    "    os.makedirs(datadir_path, exist_ok=True)\n",
    "    filepath = os.path.join(datadir_path, f'{name}.csv')\n",
    "    df.to_csv(filepath, index=False)\n",
    "    return True\n",
    "\n",
    "def run(start_year=None, years_ago=0):\n",
    "    if start_year == None:\n",
    "        now = datetime.datetime.now()\n",
    "        start_year = now.year\n",
    "    assert isinstance(start_year, int)\n",
    "    assert isinstance(years_ago, int)\n",
    "    assert len(f\"{start_year}\") == 4\n",
    "    for i in range(0, years_ago+1):\n",
    "        url = f\"https://www.boxofficemojo.com/year/world/{start_year}/\"\n",
    "        finished = parse_and_extract(url, name=start_year)\n",
    "        if finished:\n",
    "            print(f\"Finished {start_year}\")\n",
    "        else:\n",
    "            print(f\"{start_year} not finished\")\n",
    "        start_year -= 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "Finished 2020\n"
    }
   ],
   "source": [
    "run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ]
}{
 "nbformat": 4,
 "nbformat_minor": 2,
 "metadata": {
  "language_info": {
   "name": "python",
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "version": "3.6.8-final"
  },
  "orig_nbformat": 2,
  "file_extension": ".py",
  "mimetype": "text/x-python",
  "name": "python",
  "npconvert_exporter": "python",
  "pygments_lexer": "ipython3",
  "version": 3,
  "kernelspec": {
   "name": "python36864bitjupyterapipipenv100023b4210342f0b1028e92ab62ef71",
   "display_name": "Python 3.6.8 64-bit ('jupyter-api': pipenv)"
  }
 },
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "import datetime\n",
    "import requests\n",
    "import pandas as pd\n",
    "import inspect\n",
    "from inspect import getsourcefile\n",
    "from requests_html import HTML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename     = inspect.getframeinfo(inspect.currentframe()).filename\n",
    "BASE_DIR     = os.path.dirname(os.path.abspath(filename))\n",
    "DATA_DIR     = os.path.join(os.path.dirname(BASE_DIR), 'data')\n",
    "os.makedirs(DATA_DIR, exist_ok=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def url_to_txt(url, filename=\"world.html\", save=False):\n",
    "    r = requests.get(url)\n",
    "    if r.status_code == 200:\n",
    "        html_text = r.text\n",
    "        if save:\n",
    "            with open(f\"world-{year}.html\", 'w') as f:\n",
    "                f.write(html_text)\n",
    "        return html_text\n",
    "    return None\n",
    "\n",
    "\n",
    "def parse_and_extract(url, name='2020'):\n",
    "    html_text = url_to_txt(url)\n",
    "    if html_text == None:\n",
    "        return False\n",
    "    r_html = HTML(html=html_text)\n",
    "    table_class = \".imdb-scroll-table\"\n",
    "    # table_class = \"#table\"\n",
    "    r_table = r_html.find(table_class)\n",
    "\n",
    "    # print(r_table)\n",
    "    table_data = []\n",
    "    # table_data_dicts = []\n",
    "    header_names = []\n",
    "    if len(r_table) == 0:\n",
    "        return False\n",
    "    parsed_table = r_table[0]\n",
    "    rows = parsed_table.find(\"tr\")\n",
    "    header_row = rows[0]\n",
    "    header_cols = header_row.find('th')\n",
    "    header_names = [x.text for x in header_cols]\n",
    "    for row in rows[1:]:\n",
    "        # print(row.text)\n",
    "        cols = row.find(\"td\")\n",
    "        row_data = []\n",
    "        row_dict_data = {}\n",
    "        for i, col in enumerate(cols):\n",
    "            # print(i, col.text, '\\n\\n')\n",
    "            header_name = header_names[i]\n",
    "            # row_dict_data[header_name] = col.text\n",
    "            row_data.append(col.text)\n",
    "        # table_data_dicts.append(row_dict_data)\n",
    "        table_data.append(row_data)\n",
    "    df = pd.DataFrame(table_data, columns=header_names)\n",
    "    # df = pd.DataFrame(table_data_dicts)\n",
    "    datadir_path = DATA_DIR\n",
    "    os.makedirs(datadir_path, exist_ok=True)\n",
    "    filepath = os.path.join(datadir_path, f'{name}.csv')\n",
    "    df.to_csv(filepath, index=False)\n",
    "    return True\n",
    "\n",
    "def run(start_year=None, years_ago=0):\n",
    "    if start_year == None:\n",
    "        now = datetime.datetime.now()\n",
    "        start_year = now.year\n",
    "    assert isinstance(start_year, int)\n",
    "    assert isinstance(years_ago, int)\n",
    "    assert len(f\"{start_year}\") == 4\n",
    "    for i in range(0, years_ago+1):\n",
    "        url = f\"https://www.boxofficemojo.com/year/world/{start_year}/\"\n",
    "        finished = parse_and_extract(url, name=start_year)\n",
    "        if finished:\n",
    "            print(f\"Finished {start_year}\")\n",
    "        else:\n",
    "            print(f\"{start_year} not finished\")\n",
    "        start_year -= 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "Finished 2020\n"
    }
   ],
   "source": [
    "run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ]
}conda env create -f environment.ymljupyter2slideshttps://github.com/hkust-dh/jupyter-slides-demo.gitjupyter<script type="text/template">pip install -r requirements.txtimport nbformat
from nbconvert.preprocessors import ExecutePreprocessor

def trigger(notebook_filename='chp-traffic.ipynb'):
    with open(notebook_filename) as f:
        nb = nbformat.read(f, as_version=4)
    ep = ExecutePreprocessor(timeout=600, kernel_name='python3')
    r = ep.preprocess(nb)
    return rpip install jupyterlab-code-foldingjupyterlab-vimfrom ipywidgets import interact, interactive, fixed, interact_manual,Layout
import ipywidgets as widgets
import subprocess

a=widgets.Textarea(

    value="echo '' | gotify push -p 1",
    placeholder='Type something',
    description='String:',
    layout=Layout(width='550px', height='200px'),
    disabled=False

)
def slow_function(x):
    cmd(x)
    return x
    #ddd='cat r.sh'
def cmd(arg):
    p = subprocess.Popen(args=arg, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    single_html =p.stdout.read().decode(encoding="utf-8", errors="strict")
    print(single_html)

def f1(y):
    cmd(y)
    return y
interact_manual(f1, y=r'echo "select * from messages order by id desc limit 3" | sqlite3 /home/pia/pdf/gotify.db;ls /home/pia/upload/gotify-2014*.db')
from ipywidgets import interact, interactive, fixed, interact_manual,Layout
import ipywidgets as widgets
import subprocess

a=widgets.Textarea(

    value="echo '' | gotify push -p 1",
    placeholder='Type something',
    description='String:',
    layout=Layout(width='550px', height='200px'),
    disabled=False

)
def slow_function(x):
    cmd(x)
    return x
    #ddd='cat r.sh'
def cmd(arg):
    p = subprocess.Popen(args=arg, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    single_html =p.stdout.read().decode(encoding="utf-8", errors="strict")
    print(single_html)

def f1(y):
    cmd(y)
    return y
interact_manual(f1, y=r'echo "select * from messages order by id desc limit 3" | sqlite3 /home/pia/pdf/gotify.db;ls /home/pia/upload/gotify-2014*.db')
9YeExykKItI-Jf2r-AHAz5eAXH3MZx3G5zs7Vj1BWPghttps://binder.curvenote.dev/https://binder.curvenote.dev/from fasthtml.common import *
from collections import deque

app, rt = fast_app(exts='ws')

# All messages here, but only most recent 15 are stored
messages = deque(maxlen=15)
users = {}

# Takes all the messages and renders them
box_style = "border: 1px solid #ccc; border-radius: 10px; padding: 10px; margin: 5px 0;"
def render_messages(messages):
    return Div(*[Div(m, style=box_style) for m in messages], id='msg-list')

# Input field is reset via hx_swap_oob after submitting a message
def mk_input(): return Input(id='msg', placeholder="Type your message", value="", hx_swap_oob="true")

@rt
def index():
    return Titled("Leave a message for others!"),Div(
        Form(mk_input(), ws_send=True), # input field
        P("Leave a message for others!"),
        Div(render_messages(messages),id='msg-list'), # All the Messages
        hx_ext='ws', ws_connect='ws') # Use a web socket 

def on_connect(ws, send): users[id(ws)] = send
def on_disconnect(ws):users.pop(id(ws),None)

@app.ws('/ws', conn=on_connect, disconn=on_disconnect)
async def ws(msg:str,send):
    await send(mk_input()) # reset the input field immediately
    messages.appendleft(msg) # New messages first
    for u in users.values(): # Get `send` function for a user
        await u(render_messages(messages)) # Send the message to that user

serve()from fasthtml.common import *
from collections import deque

app, rt = fast_app(exts='ws')

# All messages here, but only most recent 15 are stored
messages = deque(maxlen=15)
users = {}

# Takes all the messages and renders them
box_style = "border: 1px solid #ccc; border-radius: 10px; padding: 10px; margin: 5px 0;"
def render_messages(messages):
    return Div(*[Div(m, style=box_style) for m in messages], id='msg-list')

# Input field is reset via hx_swap_oob after submitting a message
def mk_input(): return Input(id='msg', placeholder="Type your message", value="", hx_swap_oob="true")

@rt
def index():
    return Titled("Leave a message for others!"),Div(
        Form(mk_input(), ws_send=True), # input field
        P("Leave a message for others!"),
        Div(render_messages(messages),id='msg-list'), # All the Messages
        hx_ext='ws', ws_connect='ws') # Use a web socket 

def on_connect(ws, send): users[id(ws)] = send
def on_disconnect(ws):users.pop(id(ws),None)

@app.ws('/ws', conn=on_connect, disconn=on_disconnect)
async def ws(msg:str,send):
    await send(mk_input()) # reset the input field immediately
    messages.appendleft(msg) # New messages first
    for u in users.values(): # Get `send` function for a user
        await u(render_messages(messages)) # Send the message to that user

serve()--no-use-pep517--no-use-pep517conda create -n binderhub-in-a-box -f environment.ymlTypeError: unsupported operand type(s) for |: 'type' and 'type'import socket

def main():
    # 创建一个TCP套接字
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    # 绑定IP地址和端口
    server_socket.bind(('127.0.0.1', 12346))

    # 监听连接
    server_socket.listen(5)

    print("服务器已启动，等待客户端连接...")

    while True:
        # 接受客户端连接
        client_socket, client_address = server_socket.accept()
        print(f"客户端{client_address}已连接")

        # 接收客户端发送的数据
        data = client_socket.recv(1024)
        print(f"收到来自{client_address}的数据： {data.decode('utf-8')}")

        # 将接收到的数据发送回客户端
        client_socket.send(data)
        print(f"已将数据发送回{client_address}")

        # 关闭客户端套接字
        client_socket.close()
        print(f"客户端{client_address}已断开连接")

if __name__ == "__main__":
    main()loop = asyncio.get_event_loop()const WebSocket = require('ws');

// 替换为你的 WebSocket 服务器地址
const socket = new WebSocket("ws://10.10.49.172:8765");

// 监听连接打开事件
socket.addEventListener("open", (event) => {
    console.log("WebSocket connection opened.");

    // 构造二进制数据，这里使用一个简单的示例
    const binaryData = new Uint8Array([49, 50, 51, 52]);

    // 发送二进制数据
    socket.send(binaryData);

    console.log("Binary data sent successfully.");
});

// 监听接收消息事件
socket.addEventListener("message", (event) => {
    console.log("Received message:", event.data);
});

// 监听连接关闭事件
socket.addEventListener("close", (event) => {
    console.log("WebSocket connection closed.");
});

// 监听错误事件
socket.addEventListener("error", (event) => {
    console.error("WebSocket error:", event);
});websocket<!DOCTYPE html>
<pre id="log"></pre>
<script>
  // helper function: log message to screen
  function log(msg) {
    document.getElementById('log').textContent += msg + '\n';
  }

  // setup websocket with callbacks
  var ws = new WebSocket('ws://localhost:8080/');
  ws.onopen = function() {
    log('CONNECT');
  };
  ws.onclose = function() {
    log('DISCONNECT');
  };
  ws.onmessage = function(event) {
    log('MESSAGE: ' + event.data);
  };
</script><script src="https://res.zvo.cn/websocket.js/websocket.js"></script>

/*
websocket.connect({
	url:'ws://localhost:8081/', //服务端的WebSocket地址
	onopen:function(){ //如果不需要，此不传即可。
		websocket.send({"type":"CONNECT","token":"123456"}); //当WebSocket通道连接成功后，自动给服务器发送一条json格式的消息
	},
	onmessage:function(message){ //如果不需要，此不传即可
		//console.log(message); //服务端发送来的消息会在这里接收到
		document.getElementById('showMessage').innerHTML = JSON.stringify(message) + '<br/>' + document.getElementById('showMessage').innerHTML;
	}
});
*/
</script><script src="https://res.zvo.cn/websocket.js/websocket.js"></script>

/*
websocket.connect({
	url:'ws://localhost:8081/', //服务端的WebSocket地址
	onopen:function(){ //如果不需要，此不传即可。
		websocket.send({"type":"CONNECT","token":"123456"}); //当WebSocket通道连接成功后，自动给服务器发送一条json格式的消息
	},
	onmessage:function(message){ //如果不需要，此不传即可
		//console.log(message); //服务端发送来的消息会在这里接收到
		document.getElementById('showMessage').innerHTML = JSON.stringify(message) + '<br/>' + document.getElementById('showMessage').innerHTML;
	}
});
*/
</script> ./websocketd --port=8765 ./count.shpip install --upgrade jinja2<!DOCTYPE HTML>
<html>
<head>
    <title>Flask-SocketIO Test</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js" integrity="sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/3.0.4/socket.io.js" integrity="sha512-aMGMvNYu8Ue4G+fHa359jcPb1u+ytAF+P2SCb+PxrjCdO3n3ZTxJ30zuH39rimUggmTwmh2u7wvQsDTHESnmfQ==" crossorigin="anonymous"></script>
    <script type="text/javascript" charset="utf-8">
        $(document).ready(function() {
            // Connect to the Socket.IO server.
            // The connection URL has the following format, relative to the current page:
            //     http[s]://<domain>:<port>[/<namespace>]
            var socket = io.connect('http://' + document.domain + ':' + location.port);

            // Event handler for new connections.
            // The callback function is invoked when a connection with the
            // server is established.
            socket.on('connect', function() {
                socket.emit('my_event', {data: 'I\'m connected!'});
            });

            // Event handler for server sent data.
            // The callback function is invoked whenever the server emits data
            // to the client. The data is then displayed in the "Received"
            // section of the page.
            socket.on('my_response', function(msg, cb) {
                $('#log').append('<br>' + $('<div/>').text('Received #' + msg.count + ': ' + msg.data).html());
                if (cb)
                    cb();
            });

            // Interval function that tests message latency by sending a "ping"
            // message. The server then responds with a "pong" message and the
            // round trip time is measured.
            var ping_pong_times = [];
            var start_time;
            window.setInterval(function() {
                start_time = (new Date).getTime();
                $('#transport').text(socket.io.engine.transport.name);
                socket.emit('my_ping');
            }, 1000);

            // Handler for the "pong" message. When the pong is received, the
            // time from the ping is stored, and the average of the last 30
            // samples is average and displayed.
            socket.on('my_pong', function() {
                var latency = (new Date).getTime() - start_time;
                ping_pong_times.push(latency);
                ping_pong_times = ping_pong_times.slice(-30); // keep last 30 samples
                var sum = 0;
                for (var i = 0; i < ping_pong_times.length; i++)
                    sum += ping_pong_times[i];
                $('#ping-pong').text(Math.round(10 * sum / ping_pong_times.length) / 10);
            });

            // Handlers for the different forms in the page.
            // These accept data from the user and send it to the server in a
            // variety of ways
            $('form#emit').submit(function(event) {
                socket.emit('my_event', {data: $('#emit_data').val()});
                return false;
            });
            $('form#broadcast').submit(function(event) {
                socket.emit('my_broadcast_event', {data: $('#broadcast_data').val()});
                return false;
            });
            $('form#join').submit(function(event) {
                socket.emit('join', {room: $('#join_room').val()});
                return false;
            });
            $('form#leave').submit(function(event) {
                socket.emit('leave', {room: $('#leave_room').val()});
                return false;
            });
            $('form#send_room').submit(function(event) {
                socket.emit('my_room_event', {room: $('#room_name').val(), data: $('#room_data').val()});
                return false;
            });
            $('form#close').submit(function(event) {
                socket.emit('close_room', {room: $('#close_room').val()});
                return false;
            });
            $('form#disconnect').submit(function(event) {
                socket.emit('disconnect_request');
                return false;
            });
        });
    </script>
</head>
<body>
    <h1>Flask-SocketIO Test</h1>
    <p>
      Async mode is: <b>{{ async_mode }}</b><br>
      Current transport is: <b><span id="transport"></span></b><br>
      Average ping/pong latency: <b><span id="ping-pong"></span>ms</b>
    </p>
    <h2>Send:</h2>
    <form id="emit" method="POST" action='#'>
        <input type="text" name="emit_data" id="emit_data" placeholder="Message">
        <input type="submit" value="Echo">
    </form>
    <form id="broadcast" method="POST" action='#'>
        <input type="text" name="broadcast_data" id="broadcast_data" placeholder="Message">
        <input type="submit" value="Broadcast">
    </form>
    <form id="join" method="POST" action='#'>
        <input type="text" name="join_room" id="join_room" placeholder="Room Name">
        <input type="submit" value="Join Room">
    </form>
    <form id="leave" method="POST" action='#'>
        <input type="text" name="leave_room" id="leave_room" placeholder="Room Name">
        <input type="submit" value="Leave Room">
    </form>
    <form id="send_room" method="POST" action='#'>
        <input type="text" name="room_name" id="room_name" placeholder="Room Name">
        <input type="text" name="room_data" id="room_data" placeholder="Message">
        <input type="submit" value="Send to Room">
    </form>
    <form id="close" method="POST" action="#">
        <input type="text" name="close_room" id="close_room" placeholder="Room Name">
        <input type="submit" value="Close Room">
    </form>
    <form id="disconnect" method="POST" action="#">
        <input type="submit" value="Disconnect">
    </form>
    <h2>Receive:</h2>
    <div id="log"></div>
</body>
</html>from threading import Lock
from flask import Flask, render_template, session, request, copy_current_request_context
from flask_socketio import SocketIO, emit, join_room, leave_room, close_room, rooms, disconnect

# Set this variable to "threading", "eventlet" or "gevent" to test the
# different async modes, or leave it set to None for the application to choose
# the best option based on installed packages.
async_mode = None

app = Flask(__name__)
app.config['SECRET_KEY'] = 'secret!'
socketio = SocketIO(app, async_mode=async_mode)
thread = None
thread_lock = Lock()


def background_thread():
    """Example of how to send server generated events to clients."""
    count = 0
    while True:
        socketio.sleep(10)
        count += 1
        socketio.emit('my_response',
                      {'data': 'Server generated event', 'count': count})


@app.route('/')
def index():
    return render_template('index.html', async_mode=socketio.async_mode)


@socketio.event
def my_event(message):
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response',
         {'data': message['data'], 'count': session['receive_count']})


@socketio.event
def my_broadcast_event(message):
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response',
         {'data': message['data'], 'count': session['receive_count']},
         broadcast=True)


@socketio.event
def join(message):
    join_room(message['room'])
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response',
         {'data': 'In rooms: ' + ', '.join(rooms()),
          'count': session['receive_count']})


@socketio.event
def leave(message):
    leave_room(message['room'])
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response',
         {'data': 'In rooms: ' + ', '.join(rooms()),
          'count': session['receive_count']})


@socketio.on('close_room')
def on_close_room(message):
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response', {'data': 'Room ' + message['room'] + ' is closing.',
                         'count': session['receive_count']},
         to=message['room'])
    close_room(message['room'])


@socketio.event
def my_room_event(message):
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response',
         {'data': message['data'], 'count': session['receive_count']},
         to=message['room'])


@socketio.event
def disconnect_request():
    @copy_current_request_context
    def can_disconnect():
        disconnect()
    session['receive_count'] = session.get('receive_count', 0) + 1
    # for this emit we use a callback function
    # when the callback function is invoked we know that the message has been
    # received and it is safe to disconnect
    emit('my_response',
         {'data': 'Disconnected!', 'count': session['receive_count']},
         callback=can_disconnect)


@socketio.event
def my_ping():
    emit('my_pong')


@socketio.event
def connect():
    global thread
    with thread_lock:
        if thread is None:
            thread = socketio.start_background_task(background_thread)
    emit('my_response', {'data': 'Connected', 'count': 0})


@socketio.on('disconnect')
def test_disconnect():
    print('Client disconnected', request.sid)


if __name__ == '__main__':
    socketio.run(app, host='0.0.0.0', debug=True)
send-receive.sh<!DOCTYPE html>
<pre id="log"></pre>
<script>
  // helper function: log message to screen
  function log(msg) {
    document.getElementById('log').textContent += msg + '\n';
  }

  // setup websocket with callbacks
  var ws = new WebSocket('ws://localhost:8080/');
  ws.onopen = function() {
    log('CONNECT');
  };
  ws.onclose = function() {
    log('DISCONNECT');
  };
  ws.onmessage = function(event) {
    log('MESSAGE: ' + event.data);
  };
</script>echo $REPLYecho $REPLYhttp://45.32.200.249:1234/count.sh# Then access http://localhost:1234/dump-env.sh
#You can also test the command files by running from the command line.www.example.com/socketserverTypeError: WS_Server.echo() missing 1 required positional argument: 'path'npm install -g json-socket-serverimport requests

js_code = """
(function(){
    console.log("test")
    return "执行成功"
})()
"""

url = "http://localhost:12080/execjs"
data = {
    "group": "zzz",
    "code": js_code
}
res = requests.post(url, data=data)
print(res.text)https://kkgithub.com/sixgad/py-jsrpc.gitfunction JsClient(wsURL) {
    this.wsURL = wsURL;
    this.handlers = {};
    this.socket = {};
    if (!wsURL) {
        throw new Error('wsURL can not be empty!!')
    }
    this.webSocketFactory = this.resolveWebSocketFactory();
    this.connect()
}

JsClient.prototype.resolveWebSocketFactory = function () {
    if (typeof window === 'object') {
        var theWebSocket = window.WebSocket ? window.WebSocket : window.MozWebSocket;
        return function (wsURL) {

            function WindowWebSocketWrapper(wsURL) {
                this.mSocket = new theWebSocket(wsURL);
            }

            WindowWebSocketWrapper.prototype.close = function () {
                this.mSocket.close();
            };

            WindowWebSocketWrapper.prototype.onmessage = function (onMessageFunction) {
                this.mSocket.onmessage = onMessageFunction;
            };

            WindowWebSocketWrapper.prototype.onopen = function (onOpenFunction) {
                this.mSocket.onopen = onOpenFunction;
            };
            WindowWebSocketWrapper.prototype.onclose = function (onCloseFunction) {
                this.mSocket.onclose = onCloseFunction;
            };

            WindowWebSocketWrapper.prototype.send = function (message) {
                this.mSocket.send(message);
            };

            return new WindowWebSocketWrapper(wsURL);
        }
    }
    if (typeof weex === 'object') {
        try {
            console.log("test webSocket for weex");
            var ws = weex.requireModule('webSocket');
            console.log("find webSocket for weex:" + ws);
            return function (wsURL) {
                try {
                    ws.close();
                } catch (e) {
                }
                ws.WebSocket(wsURL, '');
                return ws;
            }
        } catch (e) {
            console.log(e);
        }
    }
    if (typeof WebSocket === 'object') {
        return function (wsURL) {
            return new theWebSocket(wsURL);
        }
    }
    throw new Error("the js environment do not support websocket");
};

JsClient.prototype.connect = function () {
    console.log('jsclient begin of connect to wsURL: ' + this.wsURL);
    var _this = this;
    try {
        this.socket = this.webSocketFactory(this.wsURL);
    } catch (e) {
        console.log("jsclient create connection failed,reconnect after 2s");
        setTimeout(function () {
            _this.connect()
        }, 2000)
    }

    this.socket.onmessage(function (event) {
        _this.handleJsClientRequest(event.data)
    });

    this.socket.onopen(function (event) {
        console.log('jsclient open a connection')
    });

    this.socket.onclose(function (event) {
        console.log('jsclient disconnected ,reconnection after 2s');
        setTimeout(function () {
            _this.connect()
        }, 2000)
    });
};

JsClient.prototype.handleJsClientRequest = function (requestJson) {
    console.log("receive request: " + requestJson);
    var request = JSON.parse(requestJson);
    var seq = request['__uuid_seq__'];

    if (!request['action']) {
        this.sendFailed(seq, 'need request param {action}');
        return
    }
    var action = request['action'];
    if (!this.handlers[action]) {
        this.sendFailed(seq, 'no action handler: ' + action + ' defined');
        return
    }

    var theHandler = this.handlers[action];
    var _this = this;
    try {
        theHandler(request, function (response) {
            try {
                _this.sendSuccess(seq, response)
            } catch (e) {
                _this.sendFailed(seq, "e:" + e);
            }
        }, function (errorMessage) {
            _this.sendFailed(seq, errorMessage)
        })
    } catch (e) {
        console.log("error: " + e);
        _this.sendFailed(seq, ":" + e);
    }
};

JsClient.prototype.sendSuccess = function (seq, response) {
    var responseJson;
    if (typeof response == 'string') {
        try {
            responseJson = JSON.parse(response);
        } catch (e) {
            responseJson = {};
            responseJson['data'] = response;
        }
    } else if (typeof response == 'object') {
        responseJson = response;
    } else {
        responseJson = {};
        responseJson['data'] = response;
    }

    if (Array.isArray(responseJson)) {
        responseJson = {
            data: responseJson,
            code: 0
        }
    }

    if (responseJson['code']) {
        responseJson['code'] = 0;
    } else if (responseJson['status']) {
        responseJson['status'] = 0;
    } else {
        responseJson['status'] = 0;
    }
    responseJson['__uuid_seq__'] = seq;
    var responseText = JSON.stringify(responseJson);
    console.log("response :" + responseText);
    this.socket.send(responseText);
};

JsClient.prototype.sendFailed = function (seq, errorMessage) {
    if (typeof errorMessage != 'string') {
        errorMessage = JSON.stringify(errorMessage);
    }
    var responseJson = {};
    responseJson['message'] = errorMessage;
    responseJson['status'] = -1;
    responseJson['__uuid_seq__'] = seq;
    var responseText = JSON.stringify(responseJson);
    console.log("jsclient response :" + responseText);
    this.socket.send(responseText)
};

JsClient.prototype.registerAction = function (action, handler) {
    if (typeof action !== 'string') {
        throw new Error("an action must be string");
    }
    if (typeof handler !== 'function') {
        throw new Error("a handler must be function");
    }
    console.log("jsclient register action: " + action);
    this.handlers[action] = handler;
    return this;
};
function guid() {
    function S4() {
        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
    }
    return (S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4() + S4());
}8、重定向侦测

该网站用来查看某个网址的重定向（redirect）情况。8、重定向侦测

该网站用来查看某个网址的重定向（redirect）情况。tall a little extension to allow access to Chttps://pagespy.jikejishu.com/#/devtools?address=aec89720-14e2-4f80-80a4-166ec1fcb45e.localhttps://pagespy.jikejishu.com/#/devtools?address=e546e926-3e80-449c-860e-c320e0503fc2.localaa=interact(f, x='Hi there!');single_htmlinteract_manual(slow_function,i=FloatSlider(min=1e5, max=1e7, step=1e5));""""""layout=Layout(width='50%', height='80px')[Jupyter Notebook Viewer](https://nbviewer.org/github/koldunovn/nk_public_notebooks/blob/master/Apache_log.ipynb)4、13个对前端开发有用的 Chrome 插件（英文）



本文介绍13个用于前端开发的 Chrome 插件。https://jsdevspace.substack.com/p/13-super-useful-chrome-plugins-for1、Presenterm



将 Markdown 文件转成幻灯片，在命令行播放的开源工具。（@lengyijun 投稿）8、OpenAuth



网页登录的第三方认证的集成库。9、Schemio



基于 Web 的示意图可视化编辑器。10、Buzee



一个桌面软件，提供本地文件的全文搜索（包括图片里面的文字），支持 Windows 和 Mac。6、浏览器的人脸检测能力（英文）



Chrome 浏览器已经支持 Shape Detection API，直接调用这个 API，不用加载任何外部库，就可以通过浏览器识别人脸和二维码。https://learnbyexample.github.io/atom.xml5、ffmpeg.wasm

ffmpeg 库的 wasm 移植，使得 Node.js 可以用这个库编辑视频。、PageSpeed Insights



谷歌官方的网页性能的在线评分工具。2、HTTP Toolkit

这个工具可以拦截和查看 HTTP/HTTPS 请求，并且可以 mock 服务器的回应。3、imgproxy

一个 Go 语言写的图片代理网关，可以代理远程图片，并且提供格式转换和大小缩放功能。8、Slouch stoppah

一个在线小工具，通过电脑摄像头，判断坐在屏幕前面的人的坐姿是否正确。javascript:(function () { var script = document.createElement('script'); script.src="https://cdn.jsdelivr.net/npm/eruda"; document.body.append(script); script.onload = function () { eruda.init(); } })();websocat ws://127.0.0.1:import json
import requests
import websocket


class Shell(object):
    def __init__(self, host='127.0.0.1', port=9222):
        """ init """
        self.host = host
        self.port = port
        self.soc = None
        self.connected = None
        self.tablist = None
        self.find_tabs()

    def connect(self, tab=None, update_tabs=True):
        if update_tabs or not self.tablist:
            self.find_tabs()
        if not tab:
            tab = 0
        wsurl = self.tablist[tab]['webSocketDebuggerUrl']
        #if self.soc.connected:
        #    self.soc.close()
        self.soc = websocket.create_connection(wsurl)
        return self.soc

    def close(self):
        """ Close websocket connection to remote browser."""
        if self.soc:
            self.soc.close()
            self.soc = None

    def find_tabs(self):
        """Connect to host:port and request list of tabs
             return list of dicts of data about open tabs."""
        # find websocket endpoint
        response = requests.get("http://%s:%s/json" % (self.host, self.port))
        self.tablist = json.loads(response.text)
        return self.tablist

    def open_url(self, url):
        """Open a URL in the oldest tab."""
        if not self.soc or not self.soc.connected:
            self.connect(tab=0)
        # force the 'oldest' tab to load url
        navcom = json.dumps({"id": 0,
                             "method": "Page.navigate",
                             "params": {"url": url}})
        # This code would open a new window, but browsers really dont
        # like doing so.  And, the results are irritating at best.
        # navcom=json.dumps({"id":0,"method":"Runtime.evaluate",
        #  "params":{"expression": "window.open('%s', #'_blank',
        # 'toolbar=1,scrollbars=1,location=1,statusbar=0,menubar=1,resizable=1'
        # )" % (url) }})Runtime.evaluate
        self.soc.send(navcom)
        return self.soc.recv()
shell = Shell(host='127.0.0.1', port=9222)  
#shell.connect(0)
#url = 'http://www.clift.org/fred' # shameless
url = 'http://example.com' # shameless
#navcom = json.dumps({"id":0, "method":"Target.createTarget", "params":{"url":url}})
#shell.soc.send(navcom)
shell.connect(0)
navcom = json.dumps({"id":0, "method":"Network.getCookies", "params":{"url":url}})
shell.soc.send(navcom)
response = json.loads(shell.soc.recv())

print(len(shell.find_tabs()))
print(shell.find_tabs()[1]["url"])
#print(shell.find_tabs()[1])
print(response)import json
import requests
import websocket


class Shell(object):
    def __init__(self, host='127.0.0.1', port=9222):
        """ init """
        self.host = host
        self.port = port
        self.soc = None
        self.connected = None
        self.tablist = None
        self.find_tabs()

    def connect(self, tab=None, update_tabs=True):
        if update_tabs or not self.tablist:
            self.find_tabs()
        if not tab:
            tab = 0
        wsurl = self.tablist[tab]['webSocketDebuggerUrl']
        #if self.soc.connected:
        #    self.soc.close()
        self.soc = websocket.create_connection(wsurl)
        return self.soc

    def close(self):
        """ Close websocket connection to remote browser."""
        if self.soc:
            self.soc.close()
            self.soc = None

    def find_tabs(self):
        """Connect to host:port and request list of tabs
             return list of dicts of data about open tabs."""
        # find websocket endpoint
        response = requests.get("http://%s:%s/json" % (self.host, self.port))
        self.tablist = json.loads(response.text)
        return self.tablist

    def open_url(self, url):
        """Open a URL in the oldest tab."""
        if not self.soc or not self.soc.connected:
            self.connect(tab=0)
        # force the 'oldest' tab to load url
        navcom = json.dumps({"id": 0,
                             "method": "Page.navigate",
                             "params": {"url": url}})
        # This code would open a new window, but browsers really dont
        # like doing so.  And, the results are irritating at best.
        # navcom=json.dumps({"id":0,"method":"Runtime.evaluate",
        #  "params":{"expression": "window.open('%s', #'_blank',
        # 'toolbar=1,scrollbars=1,location=1,statusbar=0,menubar=1,resizable=1'
        # )" % (url) }})Runtime.evaluate
        self.soc.send(navcom)
        return self.soc.recv()
shell = Shell(host='127.0.0.1', port=9222)  
#shell.connect(0)
#url = 'http://www.clift.org/fred' # shameless
url = 'http://example.com' # shameless
#navcom = json.dumps({"id":0, "method":"Target.createTarget", "params":{"url":url}})
#shell.soc.send(navcom)
shell.connect(0)
navcom = json.dumps({"id":0, "method":"Network.getCookies", "params":{"url":url}})
shell.soc.send(navcom)
response = json.loads(shell.soc.recv())

print(len(shell.find_tabs()))
print(shell.find_tabs()[1]["url"])
#print(shell.find_tabs()[1])
print(response)https://panel4.serv00.com/mysql/github/koldunovn/nk_public_notebooks/blob/master/Apache_log.ipynbhttps://raw.githubusercontent.com/koldunovn/nk_public_notebooks/master/Apache_log.ipynbselect * from messagesjavascript:date = new Date();
url_root = 'http://nbviewer.ipython.org/';
url = null;
gist_re = /^https?:\/\/gist\.github\.com\/(?:\w+\/)?([a-f0-9]+)$/;
github_re = /^https:\/\/(github\.com\/.*\/)blob\/(.*\.ipynb)$/;
https_re = /^https:\/\/(.*\.ipynb)$/;
http_re = /^http:\/\/(.*\.ipynb)$/;
loc = location.href;
if (gist_re.test(loc)) {
    gist = gist_re.exec(loc);
    url = url_root + gist[1];
} else if (github_re.test(loc)) {
    path = github_re.exec(loc);
    url = url_root + 'urls/raw.' + path[1] + path[2];
} else if (https_re.test(loc)) {
    path = https_re.exec(loc);
    url = url_root + 'urls/' + path[1];
} else if (http_re.test(loc)) {
    path = http_re.exec(loc);
    url = url_root + 'url/' + path[1];}
if (url) {void(window.open(url, 'nbviewer' + date.getTime()));}javascript:date = new Date();
url_root = 'http://nbviewer.ipython.org/';
url = null;
gist_re = /^https?:\/\/gist\.github\.com\/(?:\w+\/)?([a-f0-9]+)$/;
github_re = /^https:\/\/(github\.com\/.*\/)blob\/(.*\.ipynb)$/;
https_re = /^https:\/\/(.*\.ipynb)$/;
http_re = /^http:\/\/(.*\.ipynb)$/;
loc = location.href;
if (gist_re.test(loc)) {
    gist = gist_re.exec(loc);
    url = url_root + gist[1];
} else if (github_re.test(loc)) {
    path = github_re.exec(loc);
    url = url_root + 'urls/raw.' + path[1] + path[2];
} else if (https_re.test(loc)) {
    path = https_re.exec(loc);
    url = url_root + 'urls/' + path[1];
} else if (http_re.test(loc)) {
    path = http_re.exec(loc);
    url = url_root + 'url/' + path[1];}
if (url) {void(window.open(url, 'nbviewer' + date.getTime()));}display(slider)pip install jupyterlab-deckpip install jupyterlab-deckpip install jupyterlab-deckpip install jupyterlab_risepip install nbslidejupyter labextension install jupyterlab_vim{
 "nbformat": 4,
 "nbformat_minor": 2,
 "metadata": {
  "language_info": {
   "name": "python",
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "version": "3.6.8-final"
  },
  "orig_nbformat": 2,
  "file_extension": ".py",
  "mimetype": "text/x-python",
  "name": "python",
  "npconvert_exporter": "python",
  "pygments_lexer": "ipython3",
  "version": 3,
  "kernelspec": {
   "name": "python36864bitjupyterapipipenv100023b4210342f0b1028e92ab62ef71",
   "display_name": "Python 3.6.8 64-bit ('jupyter-api': pipenv)"
  }
 },
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "import datetime\n",
    "import requests\n",
    "import pandas as pd\n",
    "import inspect\n",
    "from inspect import getsourcefile\n",
    "from requests_html import HTML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename     = inspect.getframeinfo(inspect.currentframe()).filename\n",
    "BASE_DIR     = os.path.dirname(os.path.abspath(filename))\n",
    "DATA_DIR     = os.path.join(os.path.dirname(BASE_DIR), 'data')\n",
    "os.makedirs(DATA_DIR, exist_ok=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def url_to_txt(url, filename=\"world.html\", save=False):\n",
    "    r = requests.get(url)\n",
    "    if r.status_code == 200:\n",
    "        html_text = r.text\n",
    "        if save:\n",
    "            with open(f\"world-{year}.html\", 'w') as f:\n",
    "                f.write(html_text)\n",
    "        return html_text\n",
    "    return None\n",
    "\n",
    "\n",
    "def parse_and_extract(url, name='2020'):\n",
    "    html_text = url_to_txt(url)\n",
    "    if html_text == None:\n",
    "        return False\n",
    "    r_html = HTML(html=html_text)\n",
    "    table_class = \".imdb-scroll-table\"\n",
    "    # table_class = \"#table\"\n",
    "    r_table = r_html.find(table_class)\n",
    "\n",
    "    # print(r_table)\n",
    "    table_data = []\n",
    "    # table_data_dicts = []\n",
    "    header_names = []\n",
    "    if len(r_table) == 0:\n",
    "        return False\n",
    "    parsed_table = r_table[0]\n",
    "    rows = parsed_table.find(\"tr\")\n",
    "    header_row = rows[0]\n",
    "    header_cols = header_row.find('th')\n",
    "    header_names = [x.text for x in header_cols]\n",
    "    for row in rows[1:]:\n",
    "        # print(row.text)\n",
    "        cols = row.find(\"td\")\n",
    "        row_data = []\n",
    "        row_dict_data = {}\n",
    "        for i, col in enumerate(cols):\n",
    "            # print(i, col.text, '\\n\\n')\n",
    "            header_name = header_names[i]\n",
    "            # row_dict_data[header_name] = col.text\n",
    "            row_data.append(col.text)\n",
    "        # table_data_dicts.append(row_dict_data)\n",
    "        table_data.append(row_data)\n",
    "    df = pd.DataFrame(table_data, columns=header_names)\n",
    "    # df = pd.DataFrame(table_data_dicts)\n",
    "    datadir_path = DATA_DIR\n",
    "    os.makedirs(datadir_path, exist_ok=True)\n",
    "    filepath = os.path.join(datadir_path, f'{name}.csv')\n",
    "    df.to_csv(filepath, index=False)\n",
    "    return True\n",
    "\n",
    "def run(start_year=None, years_ago=0):\n",
    "    if start_year == None:\n",
    "        now = datetime.datetime.now()\n",
    "        start_year = now.year\n",
    "    assert isinstance(start_year, int)\n",
    "    assert isinstance(years_ago, int)\n",
    "    assert len(f\"{start_year}\") == 4\n",
    "    for i in range(0, years_ago+1):\n",
    "        url = f\"https://www.boxofficemojo.com/year/world/{start_year}/\"\n",
    "        finished = parse_and_extract(url, name=start_year)\n",
    "        if finished:\n",
    "            print(f\"Finished {start_year}\")\n",
    "        else:\n",
    "            print(f\"{start_year} not finished\")\n",
    "        start_year -= 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "Finished 2020\n"
    }
   ],
   "source": [
    "run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ]
}{
 "nbformat": 4,
 "nbformat_minor": 2,
 "metadata": {
  "language_info": {
   "name": "python",
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "version": "3.6.8-final"
  },
  "orig_nbformat": 2,
  "file_extension": ".py",
  "mimetype": "text/x-python",
  "name": "python",
  "npconvert_exporter": "python",
  "pygments_lexer": "ipython3",
  "version": 3,
  "kernelspec": {
   "name": "python36864bitjupyterapipipenv100023b4210342f0b1028e92ab62ef71",
   "display_name": "Python 3.6.8 64-bit ('jupyter-api': pipenv)"
  }
 },
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "import datetime\n",
    "import requests\n",
    "import pandas as pd\n",
    "import inspect\n",
    "from inspect import getsourcefile\n",
    "from requests_html import HTML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename     = inspect.getframeinfo(inspect.currentframe()).filename\n",
    "BASE_DIR     = os.path.dirname(os.path.abspath(filename))\n",
    "DATA_DIR     = os.path.join(os.path.dirname(BASE_DIR), 'data')\n",
    "os.makedirs(DATA_DIR, exist_ok=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def url_to_txt(url, filename=\"world.html\", save=False):\n",
    "    r = requests.get(url)\n",
    "    if r.status_code == 200:\n",
    "        html_text = r.text\n",
    "        if save:\n",
    "            with open(f\"world-{year}.html\", 'w') as f:\n",
    "                f.write(html_text)\n",
    "        return html_text\n",
    "    return None\n",
    "\n",
    "\n",
    "def parse_and_extract(url, name='2020'):\n",
    "    html_text = url_to_txt(url)\n",
    "    if html_text == None:\n",
    "        return False\n",
    "    r_html = HTML(html=html_text)\n",
    "    table_class = \".imdb-scroll-table\"\n",
    "    # table_class = \"#table\"\n",
    "    r_table = r_html.find(table_class)\n",
    "\n",
    "    # print(r_table)\n",
    "    table_data = []\n",
    "    # table_data_dicts = []\n",
    "    header_names = []\n",
    "    if len(r_table) == 0:\n",
    "        return False\n",
    "    parsed_table = r_table[0]\n",
    "    rows = parsed_table.find(\"tr\")\n",
    "    header_row = rows[0]\n",
    "    header_cols = header_row.find('th')\n",
    "    header_names = [x.text for x in header_cols]\n",
    "    for row in rows[1:]:\n",
    "        # print(row.text)\n",
    "        cols = row.find(\"td\")\n",
    "        row_data = []\n",
    "        row_dict_data = {}\n",
    "        for i, col in enumerate(cols):\n",
    "            # print(i, col.text, '\\n\\n')\n",
    "            header_name = header_names[i]\n",
    "            # row_dict_data[header_name] = col.text\n",
    "            row_data.append(col.text)\n",
    "        # table_data_dicts.append(row_dict_data)\n",
    "        table_data.append(row_data)\n",
    "    df = pd.DataFrame(table_data, columns=header_names)\n",
    "    # df = pd.DataFrame(table_data_dicts)\n",
    "    datadir_path = DATA_DIR\n",
    "    os.makedirs(datadir_path, exist_ok=True)\n",
    "    filepath = os.path.join(datadir_path, f'{name}.csv')\n",
    "    df.to_csv(filepath, index=False)\n",
    "    return True\n",
    "\n",
    "def run(start_year=None, years_ago=0):\n",
    "    if start_year == None:\n",
    "        now = datetime.datetime.now()\n",
    "        start_year = now.year\n",
    "    assert isinstance(start_year, int)\n",
    "    assert isinstance(years_ago, int)\n",
    "    assert len(f\"{start_year}\") == 4\n",
    "    for i in range(0, years_ago+1):\n",
    "        url = f\"https://www.boxofficemojo.com/year/world/{start_year}/\"\n",
    "        finished = parse_and_extract(url, name=start_year)\n",
    "        if finished:\n",
    "            print(f\"Finished {start_year}\")\n",
    "        else:\n",
    "            print(f\"{start_year} not finished\")\n",
    "        start_year -= 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "Finished 2020\n"
    }
   ],
   "source": [
    "run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ]
}conda env create -f environment.ymljupyter2slideshttps://github.com/hkust-dh/jupyter-slides-demo.gitjupyter<script type="text/template">pip install -r requirements.txtimport nbformat
from nbconvert.preprocessors import ExecutePreprocessor

def trigger(notebook_filename='chp-traffic.ipynb'):
    with open(notebook_filename) as f:
        nb = nbformat.read(f, as_version=4)
    ep = ExecutePreprocessor(timeout=600, kernel_name='python3')
    r = ep.preprocess(nb)
    return rpip install jupyterlab-code-foldingjupyterlab-vimfrom ipywidgets import interact, interactive, fixed, interact_manual,Layout
import ipywidgets as widgets
import subprocess

a=widgets.Textarea(

    value="echo '' | gotify push -p 1",
    placeholder='Type something',
    description='String:',
    layout=Layout(width='550px', height='200px'),
    disabled=False

)
def slow_function(x):
    cmd(x)
    return x
    #ddd='cat r.sh'
def cmd(arg):
    p = subprocess.Popen(args=arg, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    single_html =p.stdout.read().decode(encoding="utf-8", errors="strict")
    print(single_html)

def f1(y):
    cmd(y)
    return y
interact_manual(f1, y=r'echo "select * from messages order by id desc limit 3" | sqlite3 /home/pia/pdf/gotify.db;ls /home/pia/upload/gotify-2014*.db')
from ipywidgets import interact, interactive, fixed, interact_manual,Layout
import ipywidgets as widgets
import subprocess

a=widgets.Textarea(

    value="echo '' | gotify push -p 1",
    placeholder='Type something',
    description='String:',
    layout=Layout(width='550px', height='200px'),
    disabled=False

)
def slow_function(x):
    cmd(x)
    return x
    #ddd='cat r.sh'
def cmd(arg):
    p = subprocess.Popen(args=arg, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    single_html =p.stdout.read().decode(encoding="utf-8", errors="strict")
    print(single_html)

def f1(y):
    cmd(y)
    return y
interact_manual(f1, y=r'echo "select * from messages order by id desc limit 3" | sqlite3 /home/pia/pdf/gotify.db;ls /home/pia/upload/gotify-2014*.db')
9YeExykKItI-Jf2r-AHAz5eAXH3MZx3G5zs7Vj1BWPghttps://binder.curvenote.dev/https://binder.curvenote.dev/from fasthtml.common import *
from collections import deque

app, rt = fast_app(exts='ws')

# All messages here, but only most recent 15 are stored
messages = deque(maxlen=15)
users = {}

# Takes all the messages and renders them
box_style = "border: 1px solid #ccc; border-radius: 10px; padding: 10px; margin: 5px 0;"
def render_messages(messages):
    return Div(*[Div(m, style=box_style) for m in messages], id='msg-list')

# Input field is reset via hx_swap_oob after submitting a message
def mk_input(): return Input(id='msg', placeholder="Type your message", value="", hx_swap_oob="true")

@rt
def index():
    return Titled("Leave a message for others!"),Div(
        Form(mk_input(), ws_send=True), # input field
        P("Leave a message for others!"),
        Div(render_messages(messages),id='msg-list'), # All the Messages
        hx_ext='ws', ws_connect='ws') # Use a web socket 

def on_connect(ws, send): users[id(ws)] = send
def on_disconnect(ws):users.pop(id(ws),None)

@app.ws('/ws', conn=on_connect, disconn=on_disconnect)
async def ws(msg:str,send):
    await send(mk_input()) # reset the input field immediately
    messages.appendleft(msg) # New messages first
    for u in users.values(): # Get `send` function for a user
        await u(render_messages(messages)) # Send the message to that user

serve()from fasthtml.common import *
from collections import deque

app, rt = fast_app(exts='ws')

# All messages here, but only most recent 15 are stored
messages = deque(maxlen=15)
users = {}

# Takes all the messages and renders them
box_style = "border: 1px solid #ccc; border-radius: 10px; padding: 10px; margin: 5px 0;"
def render_messages(messages):
    return Div(*[Div(m, style=box_style) for m in messages], id='msg-list')

# Input field is reset via hx_swap_oob after submitting a message
def mk_input(): return Input(id='msg', placeholder="Type your message", value="", hx_swap_oob="true")

@rt
def index():
    return Titled("Leave a message for others!"),Div(
        Form(mk_input(), ws_send=True), # input field
        P("Leave a message for others!"),
        Div(render_messages(messages),id='msg-list'), # All the Messages
        hx_ext='ws', ws_connect='ws') # Use a web socket 

def on_connect(ws, send): users[id(ws)] = send
def on_disconnect(ws):users.pop(id(ws),None)

@app.ws('/ws', conn=on_connect, disconn=on_disconnect)
async def ws(msg:str,send):
    await send(mk_input()) # reset the input field immediately
    messages.appendleft(msg) # New messages first
    for u in users.values(): # Get `send` function for a user
        await u(render_messages(messages)) # Send the message to that user

serve()--no-use-pep517--no-use-pep517conda create -n binderhub-in-a-box -f environment.ymlTypeError: unsupported operand type(s) for |: 'type' and 'type'import socket

def main():
    # 创建一个TCP套接字
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    # 绑定IP地址和端口
    server_socket.bind(('127.0.0.1', 12346))

    # 监听连接
    server_socket.listen(5)

    print("服务器已启动，等待客户端连接...")

    while True:
        # 接受客户端连接
        client_socket, client_address = server_socket.accept()
        print(f"客户端{client_address}已连接")

        # 接收客户端发送的数据
        data = client_socket.recv(1024)
        print(f"收到来自{client_address}的数据： {data.decode('utf-8')}")

        # 将接收到的数据发送回客户端
        client_socket.send(data)
        print(f"已将数据发送回{client_address}")

        # 关闭客户端套接字
        client_socket.close()
        print(f"客户端{client_address}已断开连接")

if __name__ == "__main__":
    main()loop = asyncio.get_event_loop()const WebSocket = require('ws');

// 替换为你的 WebSocket 服务器地址
const socket = new WebSocket("ws://10.10.49.172:8765");

// 监听连接打开事件
socket.addEventListener("open", (event) => {
    console.log("WebSocket connection opened.");

    // 构造二进制数据，这里使用一个简单的示例
    const binaryData = new Uint8Array([49, 50, 51, 52]);

    // 发送二进制数据
    socket.send(binaryData);

    console.log("Binary data sent successfully.");
});

// 监听接收消息事件
socket.addEventListener("message", (event) => {
    console.log("Received message:", event.data);
});

// 监听连接关闭事件
socket.addEventListener("close", (event) => {
    console.log("WebSocket connection closed.");
});

// 监听错误事件
socket.addEventListener("error", (event) => {
    console.error("WebSocket error:", event);
});websocket<!DOCTYPE html>
<pre id="log"></pre>
<script>
  // helper function: log message to screen
  function log(msg) {
    document.getElementById('log').textContent += msg + '\n';
  }

  // setup websocket with callbacks
  var ws = new WebSocket('ws://localhost:8080/');
  ws.onopen = function() {
    log('CONNECT');
  };
  ws.onclose = function() {
    log('DISCONNECT');
  };
  ws.onmessage = function(event) {
    log('MESSAGE: ' + event.data);
  };
</script><script src="https://res.zvo.cn/websocket.js/websocket.js"></script>

/*
websocket.connect({
	url:'ws://localhost:8081/', //服务端的WebSocket地址
	onopen:function(){ //如果不需要，此不传即可。
		websocket.send({"type":"CONNECT","token":"123456"}); //当WebSocket通道连接成功后，自动给服务器发送一条json格式的消息
	},
	onmessage:function(message){ //如果不需要，此不传即可
		//console.log(message); //服务端发送来的消息会在这里接收到
		document.getElementById('showMessage').innerHTML = JSON.stringify(message) + '<br/>' + document.getElementById('showMessage').innerHTML;
	}
});
*/
</script><script src="https://res.zvo.cn/websocket.js/websocket.js"></script>

/*
websocket.connect({
	url:'ws://localhost:8081/', //服务端的WebSocket地址
	onopen:function(){ //如果不需要，此不传即可。
		websocket.send({"type":"CONNECT","token":"123456"}); //当WebSocket通道连接成功后，自动给服务器发送一条json格式的消息
	},
	onmessage:function(message){ //如果不需要，此不传即可
		//console.log(message); //服务端发送来的消息会在这里接收到
		document.getElementById('showMessage').innerHTML = JSON.stringify(message) + '<br/>' + document.getElementById('showMessage').innerHTML;
	}
});
*/
</script> ./websocketd --port=8765 ./count.shpip install --upgrade jinja2<!DOCTYPE HTML>
<html>
<head>
    <title>Flask-SocketIO Test</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js" integrity="sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/3.0.4/socket.io.js" integrity="sha512-aMGMvNYu8Ue4G+fHa359jcPb1u+ytAF+P2SCb+PxrjCdO3n3ZTxJ30zuH39rimUggmTwmh2u7wvQsDTHESnmfQ==" crossorigin="anonymous"></script>
    <script type="text/javascript" charset="utf-8">
        $(document).ready(function() {
            // Connect to the Socket.IO server.
            // The connection URL has the following format, relative to the current page:
            //     http[s]://<domain>:<port>[/<namespace>]
            var socket = io.connect('http://' + document.domain + ':' + location.port);

            // Event handler for new connections.
            // The callback function is invoked when a connection with the
            // server is established.
            socket.on('connect', function() {
                socket.emit('my_event', {data: 'I\'m connected!'});
            });

            // Event handler for server sent data.
            // The callback function is invoked whenever the server emits data
            // to the client. The data is then displayed in the "Received"
            // section of the page.
            socket.on('my_response', function(msg, cb) {
                $('#log').append('<br>' + $('<div/>').text('Received #' + msg.count + ': ' + msg.data).html());
                if (cb)
                    cb();
            });

            // Interval function that tests message latency by sending a "ping"
            // message. The server then responds with a "pong" message and the
            // round trip time is measured.
            var ping_pong_times = [];
            var start_time;
            window.setInterval(function() {
                start_time = (new Date).getTime();
                $('#transport').text(socket.io.engine.transport.name);
                socket.emit('my_ping');
            }, 1000);

            // Handler for the "pong" message. When the pong is received, the
            // time from the ping is stored, and the average of the last 30
            // samples is average and displayed.
            socket.on('my_pong', function() {
                var latency = (new Date).getTime() - start_time;
                ping_pong_times.push(latency);
                ping_pong_times = ping_pong_times.slice(-30); // keep last 30 samples
                var sum = 0;
                for (var i = 0; i < ping_pong_times.length; i++)
                    sum += ping_pong_times[i];
                $('#ping-pong').text(Math.round(10 * sum / ping_pong_times.length) / 10);
            });

            // Handlers for the different forms in the page.
            // These accept data from the user and send it to the server in a
            // variety of ways
            $('form#emit').submit(function(event) {
                socket.emit('my_event', {data: $('#emit_data').val()});
                return false;
            });
            $('form#broadcast').submit(function(event) {
                socket.emit('my_broadcast_event', {data: $('#broadcast_data').val()});
                return false;
            });
            $('form#join').submit(function(event) {
                socket.emit('join', {room: $('#join_room').val()});
                return false;
            });
            $('form#leave').submit(function(event) {
                socket.emit('leave', {room: $('#leave_room').val()});
                return false;
            });
            $('form#send_room').submit(function(event) {
                socket.emit('my_room_event', {room: $('#room_name').val(), data: $('#room_data').val()});
                return false;
            });
            $('form#close').submit(function(event) {
                socket.emit('close_room', {room: $('#close_room').val()});
                return false;
            });
            $('form#disconnect').submit(function(event) {
                socket.emit('disconnect_request');
                return false;
            });
        });
    </script>
</head>
<body>
    <h1>Flask-SocketIO Test</h1>
    <p>
      Async mode is: <b>{{ async_mode }}</b><br>
      Current transport is: <b><span id="transport"></span></b><br>
      Average ping/pong latency: <b><span id="ping-pong"></span>ms</b>
    </p>
    <h2>Send:</h2>
    <form id="emit" method="POST" action='#'>
        <input type="text" name="emit_data" id="emit_data" placeholder="Message">
        <input type="submit" value="Echo">
    </form>
    <form id="broadcast" method="POST" action='#'>
        <input type="text" name="broadcast_data" id="broadcast_data" placeholder="Message">
        <input type="submit" value="Broadcast">
    </form>
    <form id="join" method="POST" action='#'>
        <input type="text" name="join_room" id="join_room" placeholder="Room Name">
        <input type="submit" value="Join Room">
    </form>
    <form id="leave" method="POST" action='#'>
        <input type="text" name="leave_room" id="leave_room" placeholder="Room Name">
        <input type="submit" value="Leave Room">
    </form>
    <form id="send_room" method="POST" action='#'>
        <input type="text" name="room_name" id="room_name" placeholder="Room Name">
        <input type="text" name="room_data" id="room_data" placeholder="Message">
        <input type="submit" value="Send to Room">
    </form>
    <form id="close" method="POST" action="#">
        <input type="text" name="close_room" id="close_room" placeholder="Room Name">
        <input type="submit" value="Close Room">
    </form>
    <form id="disconnect" method="POST" action="#">
        <input type="submit" value="Disconnect">
    </form>
    <h2>Receive:</h2>
    <div id="log"></div>
</body>
</html>from threading import Lock
from flask import Flask, render_template, session, request, copy_current_request_context
from flask_socketio import SocketIO, emit, join_room, leave_room, close_room, rooms, disconnect

# Set this variable to "threading", "eventlet" or "gevent" to test the
# different async modes, or leave it set to None for the application to choose
# the best option based on installed packages.
async_mode = None

app = Flask(__name__)
app.config['SECRET_KEY'] = 'secret!'
socketio = SocketIO(app, async_mode=async_mode)
thread = None
thread_lock = Lock()


def background_thread():
    """Example of how to send server generated events to clients."""
    count = 0
    while True:
        socketio.sleep(10)
        count += 1
        socketio.emit('my_response',
                      {'data': 'Server generated event', 'count': count})


@app.route('/')
def index():
    return render_template('index.html', async_mode=socketio.async_mode)


@socketio.event
def my_event(message):
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response',
         {'data': message['data'], 'count': session['receive_count']})


@socketio.event
def my_broadcast_event(message):
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response',
         {'data': message['data'], 'count': session['receive_count']},
         broadcast=True)


@socketio.event
def join(message):
    join_room(message['room'])
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response',
         {'data': 'In rooms: ' + ', '.join(rooms()),
          'count': session['receive_count']})


@socketio.event
def leave(message):
    leave_room(message['room'])
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response',
         {'data': 'In rooms: ' + ', '.join(rooms()),
          'count': session['receive_count']})


@socketio.on('close_room')
def on_close_room(message):
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response', {'data': 'Room ' + message['room'] + ' is closing.',
                         'count': session['receive_count']},
         to=message['room'])
    close_room(message['room'])


@socketio.event
def my_room_event(message):
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response',
         {'data': message['data'], 'count': session['receive_count']},
         to=message['room'])


@socketio.event
def disconnect_request():
    @copy_current_request_context
    def can_disconnect():
        disconnect()
    session['receive_count'] = session.get('receive_count', 0) + 1
    # for this emit we use a callback function
    # when the callback function is invoked we know that the message has been
    # received and it is safe to disconnect
    emit('my_response',
         {'data': 'Disconnected!', 'count': session['receive_count']},
         callback=can_disconnect)


@socketio.event
def my_ping():
    emit('my_pong')


@socketio.event
def connect():
    global thread
    with thread_lock:
        if thread is None:
            thread = socketio.start_background_task(background_thread)
    emit('my_response', {'data': 'Connected', 'count': 0})


@socketio.on('disconnect')
def test_disconnect():
    print('Client disconnected', request.sid)


if __name__ == '__main__':
    socketio.run(app, host='0.0.0.0', debug=True)
send-receive.sh<!DOCTYPE html>
<pre id="log"></pre>
<script>
  // helper function: log message to screen
  function log(msg) {
    document.getElementById('log').textContent += msg + '\n';
  }

  // setup websocket with callbacks
  var ws = new WebSocket('ws://localhost:8080/');
  ws.onopen = function() {
    log('CONNECT');
  };
  ws.onclose = function() {
    log('DISCONNECT');
  };
  ws.onmessage = function(event) {
    log('MESSAGE: ' + event.data);
  };
</script>echo $REPLYecho $REPLYhttp://45.32.200.249:1234/count.sh# Then access http://localhost:1234/dump-env.sh
#You can also test the command files by running from the command line.www.example.com/socketserverTypeError: WS_Server.echo() missing 1 required positional argument: 'path'npm install -g json-socket-serverimport requests

js_code = """
(function(){
    console.log("test")
    return "执行成功"
})()
"""

url = "http://localhost:12080/execjs"
data = {
    "group": "zzz",
    "code": js_code
}
res = requests.post(url, data=data)
print(res.text)https://kkgithub.com/sixgad/py-jsrpc.gitfunction JsClient(wsURL) {
    this.wsURL = wsURL;
    this.handlers = {};
    this.socket = {};
    if (!wsURL) {
        throw new Error('wsURL can not be empty!!')
    }
    this.webSocketFactory = this.resolveWebSocketFactory();
    this.connect()
}

JsClient.prototype.resolveWebSocketFactory = function () {
    if (typeof window === 'object') {
        var theWebSocket = window.WebSocket ? window.WebSocket : window.MozWebSocket;
        return function (wsURL) {

            function WindowWebSocketWrapper(wsURL) {
                this.mSocket = new theWebSocket(wsURL);
            }

            WindowWebSocketWrapper.prototype.close = function () {
                this.mSocket.close();
            };

            WindowWebSocketWrapper.prototype.onmessage = function (onMessageFunction) {
                this.mSocket.onmessage = onMessageFunction;
            };

            WindowWebSocketWrapper.prototype.onopen = function (onOpenFunction) {
                this.mSocket.onopen = onOpenFunction;
            };
            WindowWebSocketWrapper.prototype.onclose = function (onCloseFunction) {
                this.mSocket.onclose = onCloseFunction;
            };

            WindowWebSocketWrapper.prototype.send = function (message) {
                this.mSocket.send(message);
            };

            return new WindowWebSocketWrapper(wsURL);
        }
    }
    if (typeof weex === 'object') {
        try {
            console.log("test webSocket for weex");
            var ws = weex.requireModule('webSocket');
            console.log("find webSocket for weex:" + ws);
            return function (wsURL) {
                try {
                    ws.close();
                } catch (e) {
                }
                ws.WebSocket(wsURL, '');
                return ws;
            }
        } catch (e) {
            console.log(e);
        }
    }
    if (typeof WebSocket === 'object') {
        return function (wsURL) {
            return new theWebSocket(wsURL);
        }
    }
    throw new Error("the js environment do not support websocket");
};

JsClient.prototype.connect = function () {
    console.log('jsclient begin of connect to wsURL: ' + this.wsURL);
    var _this = this;
    try {
        this.socket = this.webSocketFactory(this.wsURL);
    } catch (e) {
        console.log("jsclient create connection failed,reconnect after 2s");
        setTimeout(function () {
            _this.connect()
        }, 2000)
    }

    this.socket.onmessage(function (event) {
        _this.handleJsClientRequest(event.data)
    });

    this.socket.onopen(function (event) {
        console.log('jsclient open a connection')
    });

    this.socket.onclose(function (event) {
        console.log('jsclient disconnected ,reconnection after 2s');
        setTimeout(function () {
            _this.connect()
        }, 2000)
    });
};

JsClient.prototype.handleJsClientRequest = function (requestJson) {
    console.log("receive request: " + requestJson);
    var request = JSON.parse(requestJson);
    var seq = request['__uuid_seq__'];

    if (!request['action']) {
        this.sendFailed(seq, 'need request param {action}');
        return
    }
    var action = request['action'];
    if (!this.handlers[action]) {
        this.sendFailed(seq, 'no action handler: ' + action + ' defined');
        return
    }

    var theHandler = this.handlers[action];
    var _this = this;
    try {
        theHandler(request, function (response) {
            try {
                _this.sendSuccess(seq, response)
            } catch (e) {
                _this.sendFailed(seq, "e:" + e);
            }
        }, function (errorMessage) {
            _this.sendFailed(seq, errorMessage)
        })
    } catch (e) {
        console.log("error: " + e);
        _this.sendFailed(seq, ":" + e);
    }
};

JsClient.prototype.sendSuccess = function (seq, response) {
    var responseJson;
    if (typeof response == 'string') {
        try {
            responseJson = JSON.parse(response);
        } catch (e) {
            responseJson = {};
            responseJson['data'] = response;
        }
    } else if (typeof response == 'object') {
        responseJson = response;
    } else {
        responseJson = {};
        responseJson['data'] = response;
    }

    if (Array.isArray(responseJson)) {
        responseJson = {
            data: responseJson,
            code: 0
        }
    }

    if (responseJson['code']) {
        responseJson['code'] = 0;
    } else if (responseJson['status']) {
        responseJson['status'] = 0;
    } else {
        responseJson['status'] = 0;
    }
    responseJson['__uuid_seq__'] = seq;
    var responseText = JSON.stringify(responseJson);
    console.log("response :" + responseText);
    this.socket.send(responseText);
};

JsClient.prototype.sendFailed = function (seq, errorMessage) {
    if (typeof errorMessage != 'string') {
        errorMessage = JSON.stringify(errorMessage);
    }
    var responseJson = {};
    responseJson['message'] = errorMessage;
    responseJson['status'] = -1;
    responseJson['__uuid_seq__'] = seq;
    var responseText = JSON.stringify(responseJson);
    console.log("jsclient response :" + responseText);
    this.socket.send(responseText)
};

JsClient.prototype.registerAction = function (action, handler) {
    if (typeof action !== 'string') {
        throw new Error("an action must be string");
    }
    if (typeof handler !== 'function') {
        throw new Error("a handler must be function");
    }
    console.log("jsclient register action: " + action);
    this.handlers[action] = handler;
    return this;
};
function guid() {
    function S4() {
        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
    }
    return (S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4() + S4());
}# -*- coding: utf-8 -*-
# @Time   : 2021/7/13 21:18
# @Author : zp
# @Python3.7
import asyncio
import websockets
import json
from loguru import logger
from sanic import Sanic, response
import threading
from back_socket_server import ws_run

app = Sanic(__name__)


@app.route('/send', methods=['GET'])
async def get_request(request):
    # http://127.0.0.1:5000/send?group=ws-group&action=clientTime
    args_dic = {}
    for params in request.query_args:
        args_dic[params[0]] = str(params[1])
    if "action" not in args_dic:
        return response.json({"error": "need action"})
    group = args_dic.pop('group')
    async with websockets.connect(f'ws://localhost:6789/invoke?group={group}') as websocket:
        await websocket.send(json.dumps(args_dic))
        res = await websocket.recv()
        logger.info(res)
    return response.json(json.loads(res))


if __name__ == '__main__':
    app.add_task(ws_run())
    app.run(debug=False, host="127.0.0.1", port=5000)@app.main_process_startapp.add_task(ws_run()) gotify push -p 1 ""  | gotify push -p 1var aaa=" gotify push  -t " + "title:" + "'" + encodeURI(document.title)+"'" +" -p 1 " + document.URL
//alert(aaa)
window.open('http://45.32.200.249:8060/ddd?url=ddd&ddd='+aaa)var aaa=" gotify push  -t " + "title:" + "'" + encodeURI(document.title)+"'" +" -p 1 " + document.URL
//alert(aaa)
window.open('http://45.32.200.249:8060/ddd?url=ddd&ddd='+aaa)8、重定向侦测

该网站用来查看某个网址的重定向（redirect）情况。8、重定向侦测

该网站用来查看某个网址的重定向（redirect）情况。tall a little extension to allow access to Chttps://pagespy.jikejishu.com/#/devtools?address=aec89720-14e2-4f80-80a4-166ec1fcb45e.localhttps://pagespy.jikejishu.com/#/devtools?address=e546e926-3e80-449c-860e-c320e0503fc2.localaa=interact(f, x='Hi there!');single_htmlinteract_manual(slow_function,i=FloatSlider(min=1e5, max=1e7, step=1e5));""""""layout=Layout(width='50%', height='80px')[Jupyter Notebook Viewer](https://nbviewer.org/github/koldunovn/nk_public_notebooks/blob/master/Apache_log.ipynb)4、13个对前端开发有用的 Chrome 插件（英文）



本文介绍13个用于前端开发的 Chrome 插件。https://jsdevspace.substack.com/p/13-super-useful-chrome-plugins-for1、Presenterm



将 Markdown 文件转成幻灯片，在命令行播放的开源工具。（@lengyijun 投稿）8、OpenAuth



网页登录的第三方认证的集成库。9、Schemio



基于 Web 的示意图可视化编辑器。10、Buzee



一个桌面软件，提供本地文件的全文搜索（包括图片里面的文字），支持 Windows 和 Mac。6、浏览器的人脸检测能力（英文）



Chrome 浏览器已经支持 Shape Detection API，直接调用这个 API，不用加载任何外部库，就可以通过浏览器识别人脸和二维码。https://learnbyexample.github.io/atom.xml5、ffmpeg.wasm

ffmpeg 库的 wasm 移植，使得 Node.js 可以用这个库编辑视频。、PageSpeed Insights



谷歌官方的网页性能的在线评分工具。2、HTTP Toolkit

这个工具可以拦截和查看 HTTP/HTTPS 请求，并且可以 mock 服务器的回应。3、imgproxy

一个 Go 语言写的图片代理网关，可以代理远程图片，并且提供格式转换和大小缩放功能。8、Slouch stoppah

一个在线小工具，通过电脑摄像头，判断坐在屏幕前面的人的坐姿是否正确。javascript:(function () { var script = document.createElement('script'); script.src="https://cdn.jsdelivr.net/npm/eruda"; document.body.append(script); script.onload = function () { eruda.init(); } })();websocat ws://127.0.0.1:import json
import requests
import websocket


class Shell(object):
    def __init__(self, host='127.0.0.1', port=9222):
        """ init """
        self.host = host
        self.port = port
        self.soc = None
        self.connected = None
        self.tablist = None
        self.find_tabs()

    def connect(self, tab=None, update_tabs=True):
        if update_tabs or not self.tablist:
            self.find_tabs()
        if not tab:
            tab = 0
        wsurl = self.tablist[tab]['webSocketDebuggerUrl']
        #if self.soc.connected:
        #    self.soc.close()
        self.soc = websocket.create_connection(wsurl)
        return self.soc

    def close(self):
        """ Close websocket connection to remote browser."""
        if self.soc:
            self.soc.close()
            self.soc = None

    def find_tabs(self):
        """Connect to host:port and request list of tabs
             return list of dicts of data about open tabs."""
        # find websocket endpoint
        response = requests.get("http://%s:%s/json" % (self.host, self.port))
        self.tablist = json.loads(response.text)
        return self.tablist

    def open_url(self, url):
        """Open a URL in the oldest tab."""
        if not self.soc or not self.soc.connected:
            self.connect(tab=0)
        # force the 'oldest' tab to load url
        navcom = json.dumps({"id": 0,
                             "method": "Page.navigate",
                             "params": {"url": url}})
        # This code would open a new window, but browsers really dont
        # like doing so.  And, the results are irritating at best.
        # navcom=json.dumps({"id":0,"method":"Runtime.evaluate",
        #  "params":{"expression": "window.open('%s', #'_blank',
        # 'toolbar=1,scrollbars=1,location=1,statusbar=0,menubar=1,resizable=1'
        # )" % (url) }})Runtime.evaluate
        self.soc.send(navcom)
        return self.soc.recv()
shell = Shell(host='127.0.0.1', port=9222)  
#shell.connect(0)
#url = 'http://www.clift.org/fred' # shameless
url = 'http://example.com' # shameless
#navcom = json.dumps({"id":0, "method":"Target.createTarget", "params":{"url":url}})
#shell.soc.send(navcom)
shell.connect(0)
navcom = json.dumps({"id":0, "method":"Network.getCookies", "params":{"url":url}})
shell.soc.send(navcom)
response = json.loads(shell.soc.recv())

print(len(shell.find_tabs()))
print(shell.find_tabs()[1]["url"])
#print(shell.find_tabs()[1])
print(response)import json
import requests
import websocket


class Shell(object):
    def __init__(self, host='127.0.0.1', port=9222):
        """ init """
        self.host = host
        self.port = port
        self.soc = None
        self.connected = None
        self.tablist = None
        self.find_tabs()

    def connect(self, tab=None, update_tabs=True):
        if update_tabs or not self.tablist:
            self.find_tabs()
        if not tab:
            tab = 0
        wsurl = self.tablist[tab]['webSocketDebuggerUrl']
        #if self.soc.connected:
        #    self.soc.close()
        self.soc = websocket.create_connection(wsurl)
        return self.soc

    def close(self):
        """ Close websocket connection to remote browser."""
        if self.soc:
            self.soc.close()
            self.soc = None

    def find_tabs(self):
        """Connect to host:port and request list of tabs
             return list of dicts of data about open tabs."""
        # find websocket endpoint
        response = requests.get("http://%s:%s/json" % (self.host, self.port))
        self.tablist = json.loads(response.text)
        return self.tablist

    def open_url(self, url):
        """Open a URL in the oldest tab."""
        if not self.soc or not self.soc.connected:
            self.connect(tab=0)
        # force the 'oldest' tab to load url
        navcom = json.dumps({"id": 0,
                             "method": "Page.navigate",
                             "params": {"url": url}})
        # This code would open a new window, but browsers really dont
        # like doing so.  And, the results are irritating at best.
        # navcom=json.dumps({"id":0,"method":"Runtime.evaluate",
        #  "params":{"expression": "window.open('%s', #'_blank',
        # 'toolbar=1,scrollbars=1,location=1,statusbar=0,menubar=1,resizable=1'
        # )" % (url) }})Runtime.evaluate
        self.soc.send(navcom)
        return self.soc.recv()
shell = Shell(host='127.0.0.1', port=9222)  
#shell.connect(0)
#url = 'http://www.clift.org/fred' # shameless
url = 'http://example.com' # shameless
#navcom = json.dumps({"id":0, "method":"Target.createTarget", "params":{"url":url}})
#shell.soc.send(navcom)
shell.connect(0)
navcom = json.dumps({"id":0, "method":"Network.getCookies", "params":{"url":url}})
shell.soc.send(navcom)
response = json.loads(shell.soc.recv())

print(len(shell.find_tabs()))
print(shell.find_tabs()[1]["url"])
#print(shell.find_tabs()[1])
print(response)https://panel4.serv00.com/mysql/github/koldunovn/nk_public_notebooks/blob/master/Apache_log.ipynbhttps://raw.githubusercontent.com/koldunovn/nk_public_notebooks/master/Apache_log.ipynbselect * from messagesjavascript:date = new Date();
url_root = 'http://nbviewer.ipython.org/';
url = null;
gist_re = /^https?:\/\/gist\.github\.com\/(?:\w+\/)?([a-f0-9]+)$/;
github_re = /^https:\/\/(github\.com\/.*\/)blob\/(.*\.ipynb)$/;
https_re = /^https:\/\/(.*\.ipynb)$/;
http_re = /^http:\/\/(.*\.ipynb)$/;
loc = location.href;
if (gist_re.test(loc)) {
    gist = gist_re.exec(loc);
    url = url_root + gist[1];
} else if (github_re.test(loc)) {
    path = github_re.exec(loc);
    url = url_root + 'urls/raw.' + path[1] + path[2];
} else if (https_re.test(loc)) {
    path = https_re.exec(loc);
    url = url_root + 'urls/' + path[1];
} else if (http_re.test(loc)) {
    path = http_re.exec(loc);
    url = url_root + 'url/' + path[1];}
if (url) {void(window.open(url, 'nbviewer' + date.getTime()));}javascript:date = new Date();
url_root = 'http://nbviewer.ipython.org/';
url = null;
gist_re = /^https?:\/\/gist\.github\.com\/(?:\w+\/)?([a-f0-9]+)$/;
github_re = /^https:\/\/(github\.com\/.*\/)blob\/(.*\.ipynb)$/;
https_re = /^https:\/\/(.*\.ipynb)$/;
http_re = /^http:\/\/(.*\.ipynb)$/;
loc = location.href;
if (gist_re.test(loc)) {
    gist = gist_re.exec(loc);
    url = url_root + gist[1];
} else if (github_re.test(loc)) {
    path = github_re.exec(loc);
    url = url_root + 'urls/raw.' + path[1] + path[2];
} else if (https_re.test(loc)) {
    path = https_re.exec(loc);
    url = url_root + 'urls/' + path[1];
} else if (http_re.test(loc)) {
    path = http_re.exec(loc);
    url = url_root + 'url/' + path[1];}
if (url) {void(window.open(url, 'nbviewer' + date.getTime()));}display(slider)pip install jupyterlab-deckpip install jupyterlab-deckpip install jupyterlab-deckpip install jupyterlab_risepip install nbslidejupyter labextension install jupyterlab_vim{
 "nbformat": 4,
 "nbformat_minor": 2,
 "metadata": {
  "language_info": {
   "name": "python",
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "version": "3.6.8-final"
  },
  "orig_nbformat": 2,
  "file_extension": ".py",
  "mimetype": "text/x-python",
  "name": "python",
  "npconvert_exporter": "python",
  "pygments_lexer": "ipython3",
  "version": 3,
  "kernelspec": {
   "name": "python36864bitjupyterapipipenv100023b4210342f0b1028e92ab62ef71",
   "display_name": "Python 3.6.8 64-bit ('jupyter-api': pipenv)"
  }
 },
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "import datetime\n",
    "import requests\n",
    "import pandas as pd\n",
    "import inspect\n",
    "from inspect import getsourcefile\n",
    "from requests_html import HTML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename     = inspect.getframeinfo(inspect.currentframe()).filename\n",
    "BASE_DIR     = os.path.dirname(os.path.abspath(filename))\n",
    "DATA_DIR     = os.path.join(os.path.dirname(BASE_DIR), 'data')\n",
    "os.makedirs(DATA_DIR, exist_ok=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def url_to_txt(url, filename=\"world.html\", save=False):\n",
    "    r = requests.get(url)\n",
    "    if r.status_code == 200:\n",
    "        html_text = r.text\n",
    "        if save:\n",
    "            with open(f\"world-{year}.html\", 'w') as f:\n",
    "                f.write(html_text)\n",
    "        return html_text\n",
    "    return None\n",
    "\n",
    "\n",
    "def parse_and_extract(url, name='2020'):\n",
    "    html_text = url_to_txt(url)\n",
    "    if html_text == None:\n",
    "        return False\n",
    "    r_html = HTML(html=html_text)\n",
    "    table_class = \".imdb-scroll-table\"\n",
    "    # table_class = \"#table\"\n",
    "    r_table = r_html.find(table_class)\n",
    "\n",
    "    # print(r_table)\n",
    "    table_data = []\n",
    "    # table_data_dicts = []\n",
    "    header_names = []\n",
    "    if len(r_table) == 0:\n",
    "        return False\n",
    "    parsed_table = r_table[0]\n",
    "    rows = parsed_table.find(\"tr\")\n",
    "    header_row = rows[0]\n",
    "    header_cols = header_row.find('th')\n",
    "    header_names = [x.text for x in header_cols]\n",
    "    for row in rows[1:]:\n",
    "        # print(row.text)\n",
    "        cols = row.find(\"td\")\n",
    "        row_data = []\n",
    "        row_dict_data = {}\n",
    "        for i, col in enumerate(cols):\n",
    "            # print(i, col.text, '\\n\\n')\n",
    "            header_name = header_names[i]\n",
    "            # row_dict_data[header_name] = col.text\n",
    "            row_data.append(col.text)\n",
    "        # table_data_dicts.append(row_dict_data)\n",
    "        table_data.append(row_data)\n",
    "    df = pd.DataFrame(table_data, columns=header_names)\n",
    "    # df = pd.DataFrame(table_data_dicts)\n",
    "    datadir_path = DATA_DIR\n",
    "    os.makedirs(datadir_path, exist_ok=True)\n",
    "    filepath = os.path.join(datadir_path, f'{name}.csv')\n",
    "    df.to_csv(filepath, index=False)\n",
    "    return True\n",
    "\n",
    "def run(start_year=None, years_ago=0):\n",
    "    if start_year == None:\n",
    "        now = datetime.datetime.now()\n",
    "        start_year = now.year\n",
    "    assert isinstance(start_year, int)\n",
    "    assert isinstance(years_ago, int)\n",
    "    assert len(f\"{start_year}\") == 4\n",
    "    for i in range(0, years_ago+1):\n",
    "        url = f\"https://www.boxofficemojo.com/year/world/{start_year}/\"\n",
    "        finished = parse_and_extract(url, name=start_year)\n",
    "        if finished:\n",
    "            print(f\"Finished {start_year}\")\n",
    "        else:\n",
    "            print(f\"{start_year} not finished\")\n",
    "        start_year -= 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "Finished 2020\n"
    }
   ],
   "source": [
    "run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ]
}{
 "nbformat": 4,
 "nbformat_minor": 2,
 "metadata": {
  "language_info": {
   "name": "python",
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "version": "3.6.8-final"
  },
  "orig_nbformat": 2,
  "file_extension": ".py",
  "mimetype": "text/x-python",
  "name": "python",
  "npconvert_exporter": "python",
  "pygments_lexer": "ipython3",
  "version": 3,
  "kernelspec": {
   "name": "python36864bitjupyterapipipenv100023b4210342f0b1028e92ab62ef71",
   "display_name": "Python 3.6.8 64-bit ('jupyter-api': pipenv)"
  }
 },
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "import datetime\n",
    "import requests\n",
    "import pandas as pd\n",
    "import inspect\n",
    "from inspect import getsourcefile\n",
    "from requests_html import HTML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename     = inspect.getframeinfo(inspect.currentframe()).filename\n",
    "BASE_DIR     = os.path.dirname(os.path.abspath(filename))\n",
    "DATA_DIR     = os.path.join(os.path.dirname(BASE_DIR), 'data')\n",
    "os.makedirs(DATA_DIR, exist_ok=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def url_to_txt(url, filename=\"world.html\", save=False):\n",
    "    r = requests.get(url)\n",
    "    if r.status_code == 200:\n",
    "        html_text = r.text\n",
    "        if save:\n",
    "            with open(f\"world-{year}.html\", 'w') as f:\n",
    "                f.write(html_text)\n",
    "        return html_text\n",
    "    return None\n",
    "\n",
    "\n",
    "def parse_and_extract(url, name='2020'):\n",
    "    html_text = url_to_txt(url)\n",
    "    if html_text == None:\n",
    "        return False\n",
    "    r_html = HTML(html=html_text)\n",
    "    table_class = \".imdb-scroll-table\"\n",
    "    # table_class = \"#table\"\n",
    "    r_table = r_html.find(table_class)\n",
    "\n",
    "    # print(r_table)\n",
    "    table_data = []\n",
    "    # table_data_dicts = []\n",
    "    header_names = []\n",
    "    if len(r_table) == 0:\n",
    "        return False\n",
    "    parsed_table = r_table[0]\n",
    "    rows = parsed_table.find(\"tr\")\n",
    "    header_row = rows[0]\n",
    "    header_cols = header_row.find('th')\n",
    "    header_names = [x.text for x in header_cols]\n",
    "    for row in rows[1:]:\n",
    "        # print(row.text)\n",
    "        cols = row.find(\"td\")\n",
    "        row_data = []\n",
    "        row_dict_data = {}\n",
    "        for i, col in enumerate(cols):\n",
    "            # print(i, col.text, '\\n\\n')\n",
    "            header_name = header_names[i]\n",
    "            # row_dict_data[header_name] = col.text\n",
    "            row_data.append(col.text)\n",
    "        # table_data_dicts.append(row_dict_data)\n",
    "        table_data.append(row_data)\n",
    "    df = pd.DataFrame(table_data, columns=header_names)\n",
    "    # df = pd.DataFrame(table_data_dicts)\n",
    "    datadir_path = DATA_DIR\n",
    "    os.makedirs(datadir_path, exist_ok=True)\n",
    "    filepath = os.path.join(datadir_path, f'{name}.csv')\n",
    "    df.to_csv(filepath, index=False)\n",
    "    return True\n",
    "\n",
    "def run(start_year=None, years_ago=0):\n",
    "    if start_year == None:\n",
    "        now = datetime.datetime.now()\n",
    "        start_year = now.year\n",
    "    assert isinstance(start_year, int)\n",
    "    assert isinstance(years_ago, int)\n",
    "    assert len(f\"{start_year}\") == 4\n",
    "    for i in range(0, years_ago+1):\n",
    "        url = f\"https://www.boxofficemojo.com/year/world/{start_year}/\"\n",
    "        finished = parse_and_extract(url, name=start_year)\n",
    "        if finished:\n",
    "            print(f\"Finished {start_year}\")\n",
    "        else:\n",
    "            print(f\"{start_year} not finished\")\n",
    "        start_year -= 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "Finished 2020\n"
    }
   ],
   "source": [
    "run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ]
}conda env create -f environment.ymljupyter2slideshttps://github.com/hkust-dh/jupyter-slides-demo.gitjupyter<script type="text/template">pip install -r requirements.txtimport nbformat
from nbconvert.preprocessors import ExecutePreprocessor

def trigger(notebook_filename='chp-traffic.ipynb'):
    with open(notebook_filename) as f:
        nb = nbformat.read(f, as_version=4)
    ep = ExecutePreprocessor(timeout=600, kernel_name='python3')
    r = ep.preprocess(nb)
    return rpip install jupyterlab-code-foldingjupyterlab-vimfrom ipywidgets import interact, interactive, fixed, interact_manual,Layout
import ipywidgets as widgets
import subprocess

a=widgets.Textarea(

    value="echo '' | gotify push -p 1",
    placeholder='Type something',
    description='String:',
    layout=Layout(width='550px', height='200px'),
    disabled=False

)
def slow_function(x):
    cmd(x)
    return x
    #ddd='cat r.sh'
def cmd(arg):
    p = subprocess.Popen(args=arg, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    single_html =p.stdout.read().decode(encoding="utf-8", errors="strict")
    print(single_html)

def f1(y):
    cmd(y)
    return y
interact_manual(f1, y=r'echo "select * from messages order by id desc limit 3" | sqlite3 /home/pia/pdf/gotify.db;ls /home/pia/upload/gotify-2014*.db')
from ipywidgets import interact, interactive, fixed, interact_manual,Layout
import ipywidgets as widgets
import subprocess

a=widgets.Textarea(

    value="echo '' | gotify push -p 1",
    placeholder='Type something',
    description='String:',
    layout=Layout(width='550px', height='200px'),
    disabled=False

)
def slow_function(x):
    cmd(x)
    return x
    #ddd='cat r.sh'
def cmd(arg):
    p = subprocess.Popen(args=arg, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    single_html =p.stdout.read().decode(encoding="utf-8", errors="strict")
    print(single_html)

def f1(y):
    cmd(y)
    return y
interact_manual(f1, y=r'echo "select * from messages order by id desc limit 3" | sqlite3 /home/pia/pdf/gotify.db;ls /home/pia/upload/gotify-2014*.db')
9YeExykKItI-Jf2r-AHAz5eAXH3MZx3G5zs7Vj1BWPghttps://binder.curvenote.dev/https://binder.curvenote.dev/from fasthtml.common import *
from collections import deque

app, rt = fast_app(exts='ws')

# All messages here, but only most recent 15 are stored
messages = deque(maxlen=15)
users = {}

# Takes all the messages and renders them
box_style = "border: 1px solid #ccc; border-radius: 10px; padding: 10px; margin: 5px 0;"
def render_messages(messages):
    return Div(*[Div(m, style=box_style) for m in messages], id='msg-list')

# Input field is reset via hx_swap_oob after submitting a message
def mk_input(): return Input(id='msg', placeholder="Type your message", value="", hx_swap_oob="true")

@rt
def index():
    return Titled("Leave a message for others!"),Div(
        Form(mk_input(), ws_send=True), # input field
        P("Leave a message for others!"),
        Div(render_messages(messages),id='msg-list'), # All the Messages
        hx_ext='ws', ws_connect='ws') # Use a web socket 

def on_connect(ws, send): users[id(ws)] = send
def on_disconnect(ws):users.pop(id(ws),None)

@app.ws('/ws', conn=on_connect, disconn=on_disconnect)
async def ws(msg:str,send):
    await send(mk_input()) # reset the input field immediately
    messages.appendleft(msg) # New messages first
    for u in users.values(): # Get `send` function for a user
        await u(render_messages(messages)) # Send the message to that user

serve()from fasthtml.common import *
from collections import deque

app, rt = fast_app(exts='ws')

# All messages here, but only most recent 15 are stored
messages = deque(maxlen=15)
users = {}

# Takes all the messages and renders them
box_style = "border: 1px solid #ccc; border-radius: 10px; padding: 10px; margin: 5px 0;"
def render_messages(messages):
    return Div(*[Div(m, style=box_style) for m in messages], id='msg-list')

# Input field is reset via hx_swap_oob after submitting a message
def mk_input(): return Input(id='msg', placeholder="Type your message", value="", hx_swap_oob="true")

@rt
def index():
    return Titled("Leave a message for others!"),Div(
        Form(mk_input(), ws_send=True), # input field
        P("Leave a message for others!"),
        Div(render_messages(messages),id='msg-list'), # All the Messages
        hx_ext='ws', ws_connect='ws') # Use a web socket 

def on_connect(ws, send): users[id(ws)] = send
def on_disconnect(ws):users.pop(id(ws),None)

@app.ws('/ws', conn=on_connect, disconn=on_disconnect)
async def ws(msg:str,send):
    await send(mk_input()) # reset the input field immediately
    messages.appendleft(msg) # New messages first
    for u in users.values(): # Get `send` function for a user
        await u(render_messages(messages)) # Send the message to that user

serve()--no-use-pep517--no-use-pep517conda create -n binderhub-in-a-box -f environment.ymlTypeError: unsupported operand type(s) for |: 'type' and 'type'import socket

def main():
    # 创建一个TCP套接字
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    # 绑定IP地址和端口
    server_socket.bind(('127.0.0.1', 12346))

    # 监听连接
    server_socket.listen(5)

    print("服务器已启动，等待客户端连接...")

    while True:
        # 接受客户端连接
        client_socket, client_address = server_socket.accept()
        print(f"客户端{client_address}已连接")

        # 接收客户端发送的数据
        data = client_socket.recv(1024)
        print(f"收到来自{client_address}的数据： {data.decode('utf-8')}")

        # 将接收到的数据发送回客户端
        client_socket.send(data)
        print(f"已将数据发送回{client_address}")

        # 关闭客户端套接字
        client_socket.close()
        print(f"客户端{client_address}已断开连接")

if __name__ == "__main__":
    main()loop = asyncio.get_event_loop()const WebSocket = require('ws');

// 替换为你的 WebSocket 服务器地址
const socket = new WebSocket("ws://10.10.49.172:8765");

// 监听连接打开事件
socket.addEventListener("open", (event) => {
    console.log("WebSocket connection opened.");

    // 构造二进制数据，这里使用一个简单的示例
    const binaryData = new Uint8Array([49, 50, 51, 52]);

    // 发送二进制数据
    socket.send(binaryData);

    console.log("Binary data sent successfully.");
});

// 监听接收消息事件
socket.addEventListener("message", (event) => {
    console.log("Received message:", event.data);
});

// 监听连接关闭事件
socket.addEventListener("close", (event) => {
    console.log("WebSocket connection closed.");
});

// 监听错误事件
socket.addEventListener("error", (event) => {
    console.error("WebSocket error:", event);
});websocket<!DOCTYPE html>
<pre id="log"></pre>
<script>
  // helper function: log message to screen
  function log(msg) {
    document.getElementById('log').textContent += msg + '\n';
  }

  // setup websocket with callbacks
  var ws = new WebSocket('ws://localhost:8080/');
  ws.onopen = function() {
    log('CONNECT');
  };
  ws.onclose = function() {
    log('DISCONNECT');
  };
  ws.onmessage = function(event) {
    log('MESSAGE: ' + event.data);
  };
</script><script src="https://res.zvo.cn/websocket.js/websocket.js"></script>

/*
websocket.connect({
	url:'ws://localhost:8081/', //服务端的WebSocket地址
	onopen:function(){ //如果不需要，此不传即可。
		websocket.send({"type":"CONNECT","token":"123456"}); //当WebSocket通道连接成功后，自动给服务器发送一条json格式的消息
	},
	onmessage:function(message){ //如果不需要，此不传即可
		//console.log(message); //服务端发送来的消息会在这里接收到
		document.getElementById('showMessage').innerHTML = JSON.stringify(message) + '<br/>' + document.getElementById('showMessage').innerHTML;
	}
});
*/
</script><script src="https://res.zvo.cn/websocket.js/websocket.js"></script>

/*
websocket.connect({
	url:'ws://localhost:8081/', //服务端的WebSocket地址
	onopen:function(){ //如果不需要，此不传即可。
		websocket.send({"type":"CONNECT","token":"123456"}); //当WebSocket通道连接成功后，自动给服务器发送一条json格式的消息
	},
	onmessage:function(message){ //如果不需要，此不传即可
		//console.log(message); //服务端发送来的消息会在这里接收到
		document.getElementById('showMessage').innerHTML = JSON.stringify(message) + '<br/>' + document.getElementById('showMessage').innerHTML;
	}
});
*/
</script> ./websocketd --port=8765 ./count.shpip install --upgrade jinja2<!DOCTYPE HTML>
<html>
<head>
    <title>Flask-SocketIO Test</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js" integrity="sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/3.0.4/socket.io.js" integrity="sha512-aMGMvNYu8Ue4G+fHa359jcPb1u+ytAF+P2SCb+PxrjCdO3n3ZTxJ30zuH39rimUggmTwmh2u7wvQsDTHESnmfQ==" crossorigin="anonymous"></script>
    <script type="text/javascript" charset="utf-8">
        $(document).ready(function() {
            // Connect to the Socket.IO server.
            // The connection URL has the following format, relative to the current page:
            //     http[s]://<domain>:<port>[/<namespace>]
            var socket = io.connect('http://' + document.domain + ':' + location.port);

            // Event handler for new connections.
            // The callback function is invoked when a connection with the
            // server is established.
            socket.on('connect', function() {
                socket.emit('my_event', {data: 'I\'m connected!'});
            });

            // Event handler for server sent data.
            // The callback function is invoked whenever the server emits data
            // to the client. The data is then displayed in the "Received"
            // section of the page.
            socket.on('my_response', function(msg, cb) {
                $('#log').append('<br>' + $('<div/>').text('Received #' + msg.count + ': ' + msg.data).html());
                if (cb)
                    cb();
            });

            // Interval function that tests message latency by sending a "ping"
            // message. The server then responds with a "pong" message and the
            // round trip time is measured.
            var ping_pong_times = [];
            var start_time;
            window.setInterval(function() {
                start_time = (new Date).getTime();
                $('#transport').text(socket.io.engine.transport.name);
                socket.emit('my_ping');
            }, 1000);

            // Handler for the "pong" message. When the pong is received, the
            // time from the ping is stored, and the average of the last 30
            // samples is average and displayed.
            socket.on('my_pong', function() {
                var latency = (new Date).getTime() - start_time;
                ping_pong_times.push(latency);
                ping_pong_times = ping_pong_times.slice(-30); // keep last 30 samples
                var sum = 0;
                for (var i = 0; i < ping_pong_times.length; i++)
                    sum += ping_pong_times[i];
                $('#ping-pong').text(Math.round(10 * sum / ping_pong_times.length) / 10);
            });

            // Handlers for the different forms in the page.
            // These accept data from the user and send it to the server in a
            // variety of ways
            $('form#emit').submit(function(event) {
                socket.emit('my_event', {data: $('#emit_data').val()});
                return false;
            });
            $('form#broadcast').submit(function(event) {
                socket.emit('my_broadcast_event', {data: $('#broadcast_data').val()});
                return false;
            });
            $('form#join').submit(function(event) {
                socket.emit('join', {room: $('#join_room').val()});
                return false;
            });
            $('form#leave').submit(function(event) {
                socket.emit('leave', {room: $('#leave_room').val()});
                return false;
            });
            $('form#send_room').submit(function(event) {
                socket.emit('my_room_event', {room: $('#room_name').val(), data: $('#room_data').val()});
                return false;
            });
            $('form#close').submit(function(event) {
                socket.emit('close_room', {room: $('#close_room').val()});
                return false;
            });
            $('form#disconnect').submit(function(event) {
                socket.emit('disconnect_request');
                return false;
            });
        });
    </script>
</head>
<body>
    <h1>Flask-SocketIO Test</h1>
    <p>
      Async mode is: <b>{{ async_mode }}</b><br>
      Current transport is: <b><span id="transport"></span></b><br>
      Average ping/pong latency: <b><span id="ping-pong"></span>ms</b>
    </p>
    <h2>Send:</h2>
    <form id="emit" method="POST" action='#'>
        <input type="text" name="emit_data" id="emit_data" placeholder="Message">
        <input type="submit" value="Echo">
    </form>
    <form id="broadcast" method="POST" action='#'>
        <input type="text" name="broadcast_data" id="broadcast_data" placeholder="Message">
        <input type="submit" value="Broadcast">
    </form>
    <form id="join" method="POST" action='#'>
        <input type="text" name="join_room" id="join_room" placeholder="Room Name">
        <input type="submit" value="Join Room">
    </form>
    <form id="leave" method="POST" action='#'>
        <input type="text" name="leave_room" id="leave_room" placeholder="Room Name">
        <input type="submit" value="Leave Room">
    </form>
    <form id="send_room" method="POST" action='#'>
        <input type="text" name="room_name" id="room_name" placeholder="Room Name">
        <input type="text" name="room_data" id="room_data" placeholder="Message">
        <input type="submit" value="Send to Room">
    </form>
    <form id="close" method="POST" action="#">
        <input type="text" name="close_room" id="close_room" placeholder="Room Name">
        <input type="submit" value="Close Room">
    </form>
    <form id="disconnect" method="POST" action="#">
        <input type="submit" value="Disconnect">
    </form>
    <h2>Receive:</h2>
    <div id="log"></div>
</body>
</html>from threading import Lock
from flask import Flask, render_template, session, request, copy_current_request_context
from flask_socketio import SocketIO, emit, join_room, leave_room, close_room, rooms, disconnect

# Set this variable to "threading", "eventlet" or "gevent" to test the
# different async modes, or leave it set to None for the application to choose
# the best option based on installed packages.
async_mode = None

app = Flask(__name__)
app.config['SECRET_KEY'] = 'secret!'
socketio = SocketIO(app, async_mode=async_mode)
thread = None
thread_lock = Lock()


def background_thread():
    """Example of how to send server generated events to clients."""
    count = 0
    while True:
        socketio.sleep(10)
        count += 1
        socketio.emit('my_response',
                      {'data': 'Server generated event', 'count': count})


@app.route('/')
def index():
    return render_template('index.html', async_mode=socketio.async_mode)


@socketio.event
def my_event(message):
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response',
         {'data': message['data'], 'count': session['receive_count']})


@socketio.event
def my_broadcast_event(message):
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response',
         {'data': message['data'], 'count': session['receive_count']},
         broadcast=True)


@socketio.event
def join(message):
    join_room(message['room'])
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response',
         {'data': 'In rooms: ' + ', '.join(rooms()),
          'count': session['receive_count']})


@socketio.event
def leave(message):
    leave_room(message['room'])
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response',
         {'data': 'In rooms: ' + ', '.join(rooms()),
          'count': session['receive_count']})


@socketio.on('close_room')
def on_close_room(message):
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response', {'data': 'Room ' + message['room'] + ' is closing.',
                         'count': session['receive_count']},
         to=message['room'])
    close_room(message['room'])


@socketio.event
def my_room_event(message):
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response',
         {'data': message['data'], 'count': session['receive_count']},
         to=message['room'])


@socketio.event
def disconnect_request():
    @copy_current_request_context
    def can_disconnect():
        disconnect()
    session['receive_count'] = session.get('receive_count', 0) + 1
    # for this emit we use a callback function
    # when the callback function is invoked we know that the message has been
    # received and it is safe to disconnect
    emit('my_response',
         {'data': 'Disconnected!', 'count': session['receive_count']},
         callback=can_disconnect)


@socketio.event
def my_ping():
    emit('my_pong')


@socketio.event
def connect():
    global thread
    with thread_lock:
        if thread is None:
            thread = socketio.start_background_task(background_thread)
    emit('my_response', {'data': 'Connected', 'count': 0})


@socketio.on('disconnect')
def test_disconnect():
    print('Client disconnected', request.sid)


if __name__ == '__main__':
    socketio.run(app, host='0.0.0.0', debug=True)
send-receive.sh<!DOCTYPE html>
<pre id="log"></pre>
<script>
  // helper function: log message to screen
  function log(msg) {
    document.getElementById('log').textContent += msg + '\n';
  }

  // setup websocket with callbacks
  var ws = new WebSocket('ws://localhost:8080/');
  ws.onopen = function() {
    log('CONNECT');
  };
  ws.onclose = function() {
    log('DISCONNECT');
  };
  ws.onmessage = function(event) {
    log('MESSAGE: ' + event.data);
  };
</script>echo $REPLYecho $REPLYhttp://45.32.200.249:1234/count.sh# Then access http://localhost:1234/dump-env.sh
#You can also test the command files by running from the command line.www.example.com/socketserverTypeError: WS_Server.echo() missing 1 required positional argument: 'path'npm install -g json-socket-serverimport requests

js_code = """
(function(){
    console.log("test")
    return "执行成功"
})()
"""

url = "http://localhost:12080/execjs"
data = {
    "group": "zzz",
    "code": js_code
}
res = requests.post(url, data=data)
print(res.text)https://kkgithub.com/sixgad/py-jsrpc.gitfunction JsClient(wsURL) {
    this.wsURL = wsURL;
    this.handlers = {};
    this.socket = {};
    if (!wsURL) {
        throw new Error('wsURL can not be empty!!')
    }
    this.webSocketFactory = this.resolveWebSocketFactory();
    this.connect()
}

JsClient.prototype.resolveWebSocketFactory = function () {
    if (typeof window === 'object') {
        var theWebSocket = window.WebSocket ? window.WebSocket : window.MozWebSocket;
        return function (wsURL) {

            function WindowWebSocketWrapper(wsURL) {
                this.mSocket = new theWebSocket(wsURL);
            }

            WindowWebSocketWrapper.prototype.close = function () {
                this.mSocket.close();
            };

            WindowWebSocketWrapper.prototype.onmessage = function (onMessageFunction) {
                this.mSocket.onmessage = onMessageFunction;
            };

            WindowWebSocketWrapper.prototype.onopen = function (onOpenFunction) {
                this.mSocket.onopen = onOpenFunction;
            };
            WindowWebSocketWrapper.prototype.onclose = function (onCloseFunction) {
                this.mSocket.onclose = onCloseFunction;
            };

            WindowWebSocketWrapper.prototype.send = function (message) {
                this.mSocket.send(message);
            };

            return new WindowWebSocketWrapper(wsURL);
        }
    }
    if (typeof weex === 'object') {
        try {
            console.log("test webSocket for weex");
            var ws = weex.requireModule('webSocket');
            console.log("find webSocket for weex:" + ws);
            return function (wsURL) {
                try {
                    ws.close();
                } catch (e) {
                }
                ws.WebSocket(wsURL, '');
                return ws;
            }
        } catch (e) {
            console.log(e);
        }
    }
    if (typeof WebSocket === 'object') {
        return function (wsURL) {
            return new theWebSocket(wsURL);
        }
    }
    throw new Error("the js environment do not support websocket");
};

JsClient.prototype.connect = function () {
    console.log('jsclient begin of connect to wsURL: ' + this.wsURL);
    var _this = this;
    try {
        this.socket = this.webSocketFactory(this.wsURL);
    } catch (e) {
        console.log("jsclient create connection failed,reconnect after 2s");
        setTimeout(function () {
            _this.connect()
        }, 2000)
    }

    this.socket.onmessage(function (event) {
        _this.handleJsClientRequest(event.data)
    });

    this.socket.onopen(function (event) {
        console.log('jsclient open a connection')
    });

    this.socket.onclose(function (event) {
        console.log('jsclient disconnected ,reconnection after 2s');
        setTimeout(function () {
            _this.connect()
        }, 2000)
    });
};

JsClient.prototype.handleJsClientRequest = function (requestJson) {
    console.log("receive request: " + requestJson);
    var request = JSON.parse(requestJson);
    var seq = request['__uuid_seq__'];

    if (!request['action']) {
        this.sendFailed(seq, 'need request param {action}');
        return
    }
    var action = request['action'];
    if (!this.handlers[action]) {
        this.sendFailed(seq, 'no action handler: ' + action + ' defined');
        return
    }

    var theHandler = this.handlers[action];
    var _this = this;
    try {
        theHandler(request, function (response) {
            try {
                _this.sendSuccess(seq, response)
            } catch (e) {
                _this.sendFailed(seq, "e:" + e);
            }
        }, function (errorMessage) {
            _this.sendFailed(seq, errorMessage)
        })
    } catch (e) {
        console.log("error: " + e);
        _this.sendFailed(seq, ":" + e);
    }
};

JsClient.prototype.sendSuccess = function (seq, response) {
    var responseJson;
    if (typeof response == 'string') {
        try {
            responseJson = JSON.parse(response);
        } catch (e) {
            responseJson = {};
            responseJson['data'] = response;
        }
    } else if (typeof response == 'object') {
        responseJson = response;
    } else {
        responseJson = {};
        responseJson['data'] = response;
    }

    if (Array.isArray(responseJson)) {
        responseJson = {
            data: responseJson,
            code: 0
        }
    }

    if (responseJson['code']) {
        responseJson['code'] = 0;
    } else if (responseJson['status']) {
        responseJson['status'] = 0;
    } else {
        responseJson['status'] = 0;
    }
    responseJson['__uuid_seq__'] = seq;
    var responseText = JSON.stringify(responseJson);
    console.log("response :" + responseText);
    this.socket.send(responseText);
};

JsClient.prototype.sendFailed = function (seq, errorMessage) {
    if (typeof errorMessage != 'string') {
        errorMessage = JSON.stringify(errorMessage);
    }
    var responseJson = {};
    responseJson['message'] = errorMessage;
    responseJson['status'] = -1;
    responseJson['__uuid_seq__'] = seq;
    var responseText = JSON.stringify(responseJson);
    console.log("jsclient response :" + responseText);
    this.socket.send(responseText)
};

JsClient.prototype.registerAction = function (action, handler) {
    if (typeof action !== 'string') {
        throw new Error("an action must be string");
    }
    if (typeof handler !== 'function') {
        throw new Error("a handler must be function");
    }
    console.log("jsclient register action: " + action);
    this.handlers[action] = handler;
    return this;
};
function guid() {
    function S4() {
        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
    }
    return (S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4() + S4());
}# -*- coding: utf-8 -*-
# @Time   : 2021/7/13 21:18
# @Author : zp
# @Python3.7
import asyncio
import websockets
import json
from loguru import logger
from sanic import Sanic, response
import threading
from back_socket_server import ws_run

app = Sanic(__name__)


@app.route('/send', methods=['GET'])
async def get_request(request):
    # http://127.0.0.1:5000/send?group=ws-group&action=clientTime
    args_dic = {}
    for params in request.query_args:
        args_dic[params[0]] = str(params[1])
    if "action" not in args_dic:
        return response.json({"error": "need action"})
    group = args_dic.pop('group')
    async with websockets.connect(f'ws://localhost:6789/invoke?group={group}') as websocket:
        await websocket.send(json.dumps(args_dic))
        res = await websocket.recv()
        logger.info(res)
    return response.json(json.loads(res))


if __name__ == '__main__':
    app.add_task(ws_run())
    app.run(debug=False, host="127.0.0.1", port=5000)@app.main_process_startapp.add_task(ws_run()) gotify push -p 1 ""  | gotify push -p 1var aaa=" gotify push  -t " + "title:" + "'" + encodeURI(document.title)+"'" +" -p 1 " + document.URL
//alert(aaa)
window.open('http://45.32.200.249:8060/ddd?url=ddd&ddd='+aaa)var aaa=" gotify push  -t " + "title:" + "'" + encodeURI(document.title)+"'" +" -p 1 " + document.URL
//alert(aaa)
window.open('http://45.32.200.249:8060/ddd?url=ddd&ddd='+aaa)var aaa=" gotify push  -t " + "title:" + "'" + encodeURI(document.title)+"'" +" -p 1 " + document.URL
//alert(aaa)
window.open('http://45.32.200.249:8060/ddd?url=ddd&ddd='+aaa)function SekiroClient(e){if(this.wsURL=e,this.handlers={},this.socket={},!e)throw new Error("wsURL can not be empty!!");this.webSocketFactory=this.resolveWebSocketFactory(),this.connect()}SekiroClient.prototype.resolveWebSocketFactory=function(){if("object"==typeof window){var e=window.WebSocket?window.WebSocket:window.MozWebSocket;return function(o){function t(o){this.mSocket=new e(o)}return t.prototype.close=function(){this.mSocket.close()},t.prototype.onmessage=function(e){this.mSocket.onmessage=e},t.prototype.onopen=function(e){this.mSocket.onopen=e},t.prototype.onclose=function(e){this.mSocket.onclose=e},t.prototype.send=function(e){this.mSocket.send(e)},new t(o)}}if("object"==typeof weex)try{console.log("test webSocket for weex");var o=weex.requireModule("webSocket");return console.log("find webSocket for weex:"+o),function(e){try{o.close()}catch(e){}return o.WebSocket(e,""),o}}catch(e){console.log(e)}if("object"==typeof WebSocket)return function(o){return new e(o)};throw new Error("the js environment do not support websocket")},SekiroClient.prototype.connect=function(){console.log("sekiro: begin of connect to wsURL: "+this.wsURL);var e=this;try{this.socket=this.webSocketFactory(this.wsURL)}catch(o){return console.log("sekiro: create connection failed,reconnect after 2s:"+o),void setTimeout(function(){e.connect()},2e3)}this.socket.onmessage(function(o){e.handleSekiroRequest(o.data)}),this.socket.onopen(function(e){console.log("sekiro: open a sekiro client connection")}),this.socket.onclose(function(o){console.log("sekiro: disconnected ,reconnection after 2s"),setTimeout(function(){e.connect()},2e3)})},SekiroClient.prototype.handleSekiroRequest=function(e){console.log("receive sekiro request: "+e);var o=JSON.parse(e),t=o.__sekiro_seq__;if(o.action){var n=o.action;if(this.handlers[n]){var s=this.handlers[n],i=this;try{s(o,function(e){try{i.sendSuccess(t,e)}catch(e){i.sendFailed(t,"e:"+e)}},function(e){i.sendFailed(t,e)})}catch(e){console.log("error: "+e),i.sendFailed(t,":"+e)}}else this.sendFailed(t,"no action handler: "+n+" defined")}else this.sendFailed(t,"need request param {action}")},SekiroClient.prototype.sendSuccess=function(e,o){var t;if("string"==typeof o)try{t=JSON.parse(o)}catch(e){(t={}).data=o}else"object"==typeof o?t=o:(t={}).data=o;(Array.isArray(t)||"string"==typeof t)&&(t={data:t,code:0}),t.code?t.code=0:(t.status,t.status=0),t.__sekiro_seq__=e;var n=JSON.stringify(t);console.log("response :"+n),this.socket.send(n)},SekiroClient.prototype.sendFailed=function(e,o){"string"!=typeof o&&(o=JSON.stringify(o));var t={};t.message=o,t.status=-1,t.__sekiro_seq__=e;var n=JSON.stringify(t);console.log("sekiro: response :"+n),this.socket.send(n)},SekiroClient.prototype.registerAction=function(e,o){if("string"!=typeof e)throw new Error("an action must be string");if("function"!=typeof o)throw new Error("a handler must be function");return console.log("sekiro: register action: "+e),this.handlers[e]=o,this};
var client = new SekiroClient("wss://sekiro.iinti.cn:5612/business/register?group=test_web&clientId=" + Math.random());
client.registerAction("testAction", function (request, resolve, reject) {
    resolve("ok");
});function SekiroClient(e){if(this.wsURL=e,this.handlers={},this.socket={},!e)throw new Error("wsURL can not be empty!!");this.webSocketFactory=this.resolveWebSocketFactory(),this.connect()}SekiroClient.prototype.resolveWebSocketFactory=function(){if("object"==typeof window){var e=window.WebSocket?window.WebSocket:window.MozWebSocket;return function(o){function t(o){this.mSocket=new e(o)}return t.prototype.close=function(){this.mSocket.close()},t.prototype.onmessage=function(e){this.mSocket.onmessage=e},t.prototype.onopen=function(e){this.mSocket.onopen=e},t.prototype.onclose=function(e){this.mSocket.onclose=e},t.prototype.send=function(e){this.mSocket.send(e)},new t(o)}}if("object"==typeof weex)try{console.log("test webSocket for weex");var o=weex.requireModule("webSocket");return console.log("find webSocket for weex:"+o),function(e){try{o.close()}catch(e){}return o.WebSocket(e,""),o}}catch(e){console.log(e)}if("object"==typeof WebSocket)return function(o){return new e(o)};throw new Error("the js environment do not support websocket")},SekiroClient.prototype.connect=function(){console.log("sekiro: begin of connect to wsURL: "+this.wsURL);var e=this;try{this.socket=this.webSocketFactory(this.wsURL)}catch(o){return console.log("sekiro: create connection failed,reconnect after 2s:"+o),void setTimeout(function(){e.connect()},2e3)}this.socket.onmessage(function(o){e.handleSekiroRequest(o.data)}),this.socket.onopen(function(e){console.log("sekiro: open a sekiro client connection")}),this.socket.onclose(function(o){console.log("sekiro: disconnected ,reconnection after 2s"),setTimeout(function(){e.connect()},2e3)})},SekiroClient.prototype.handleSekiroRequest=function(e){console.log("receive sekiro request: "+e);var o=JSON.parse(e),t=o.__sekiro_seq__;if(o.action){var n=o.action;if(this.handlers[n]){var s=this.handlers[n],i=this;try{s(o,function(e){try{i.sendSuccess(t,e)}catch(e){i.sendFailed(t,"e:"+e)}},function(e){i.sendFailed(t,e)})}catch(e){console.log("error: "+e),i.sendFailed(t,":"+e)}}else this.sendFailed(t,"no action handler: "+n+" defined")}else this.sendFailed(t,"need request param {action}")},SekiroClient.prototype.sendSuccess=function(e,o){var t;if("string"==typeof o)try{t=JSON.parse(o)}catch(e){(t={}).data=o}else"object"==typeof o?t=o:(t={}).data=o;(Array.isArray(t)||"string"==typeof t)&&(t={data:t,code:0}),t.code?t.code=0:(t.status,t.status=0),t.__sekiro_seq__=e;var n=JSON.stringify(t);console.log("response :"+n),this.socket.send(n)},SekiroClient.prototype.sendFailed=function(e,o){"string"!=typeof o&&(o=JSON.stringify(o));var t={};t.message=o,t.status=-1,t.__sekiro_seq__=e;var n=JSON.stringify(t);console.log("sekiro: response :"+n),this.socket.send(n)},SekiroClient.prototype.registerAction=function(e,o){if("string"!=typeof e)throw new Error("an action must be string");if("function"!=typeof o)throw new Error("a handler must be function");return console.log("sekiro: register action: "+e),this.handlers[e]=o,this};
var client = new SekiroClient("wss://sekiro.iinti.cn:5612/business/register?group=test_web&clientId=" + Math.random());
client.registerAction("testAction", function (request, resolve, reject) {
    resolve("ok");
});function SekiroClient(e){if(this.wsURL=e,this.handlers={},this.socket={},!e)throw new Error("wsURL can not be empty!!");this.webSocketFactory=this.resolveWebSocketFactory(),this.connect()}SekiroClient.prototype.resolveWebSocketFactory=function(){if("object"==typeof window){var e=window.WebSocket?window.WebSocket:window.MozWebSocket;return function(o){function t(o){this.mSocket=new e(o)}return t.prototype.close=function(){this.mSocket.close()},t.prototype.onmessage=function(e){this.mSocket.onmessage=e},t.prototype.onopen=function(e){this.mSocket.onopen=e},t.prototype.onclose=function(e){this.mSocket.onclose=e},t.prototype.send=function(e){this.mSocket.send(e)},new t(o)}}if("object"==typeof weex)try{console.log("test webSocket for weex");var o=weex.requireModule("webSocket");return console.log("find webSocket for weex:"+o),function(e){try{o.close()}catch(e){}return o.WebSocket(e,""),o}}catch(e){console.log(e)}if("object"==typeof WebSocket)return function(o){return new e(o)};throw new Error("the js environment do not support websocket")},SekiroClient.prototype.connect=function(){console.log("sekiro: begin of connect to wsURL: "+this.wsURL);var e=this;try{this.socket=this.webSocketFactory(this.wsURL)}catch(o){return console.log("sekiro: create connection failed,reconnect after 2s:"+o),void setTimeout(function(){e.connect()},2e3)}this.socket.onmessage(function(o){e.handleSekiroRequest(o.data)}),this.socket.onopen(function(e){console.log("sekiro: open a sekiro client connection")}),this.socket.onclose(function(o){console.log("sekiro: disconnected ,reconnection after 2s"),setTimeout(function(){e.connect()},2e3)})},SekiroClient.prototype.handleSekiroRequest=function(e){console.log("receive sekiro request: "+e);var o=JSON.parse(e),t=o.__sekiro_seq__;if(o.action){var n=o.action;if(this.handlers[n]){var s=this.handlers[n],i=this;try{s(o,function(e){try{i.sendSuccess(t,e)}catch(e){i.sendFailed(t,"e:"+e)}},function(e){i.sendFailed(t,e)})}catch(e){console.log("error: "+e),i.sendFailed(t,":"+e)}}else this.sendFailed(t,"no action handler: "+n+" defined")}else this.sendFailed(t,"need request param {action}")},SekiroClient.prototype.sendSuccess=function(e,o){var t;if("string"==typeof o)try{t=JSON.parse(o)}catch(e){(t={}).data=o}else"object"==typeof o?t=o:(t={}).data=o;(Array.isArray(t)||"string"==typeof t)&&(t={data:t,code:0}),t.code?t.code=0:(t.status,t.status=0),t.__sekiro_seq__=e;var n=JSON.stringify(t);console.log("response :"+n),this.socket.send(n)},SekiroClient.prototype.sendFailed=function(e,o){"string"!=typeof o&&(o=JSON.stringify(o));var t={};t.message=o,t.status=-1,t.__sekiro_seq__=e;var n=JSON.stringify(t);console.log("sekiro: response :"+n),this.socket.send(n)},SekiroClient.prototype.registerAction=function(e,o){if("string"!=typeof e)throw new Error("an action must be string");if("function"!=typeof o)throw new Error("a handler must be function");return console.log("sekiro: register action: "+e),this.handlers[e]=o,this};
var client = new SekiroClient("wss://sekiro.iinti.cn:5612/business/register?group=test_web&clientId=" + Math.random());
client.registerAction("testAction", function (request, resolve, reject) {
    resolve("ok");
});from ipywidgets import interact, interactive, fixed, interact_manual,Layout
import ipywidgets as widgets
import subprocess

a=widgets.Textarea(
    value="echo '' | gotify push -p 1",
    placeholder='Type something',
    description='String:',
    layout=Layout(width='550px', height='200px'),
    disabled=False
)
def slow_function(x):
    cmd(x)
    return x
    #ddd='cat r.sh'
def cmd(arg):
    p = subprocess.Popen(args=arg, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    single_html =p.stdout.read().decode(encoding="utf-8", errors="strict")
    print(single_html)

def f1(y):
    cmd(y)
    return y
interact_manual(f1, y=r'echo "select * from messages order by id desc limit 3" | sqlite3 /home/pia/pdf/gotify.db;ls /home/pia/upload/gotify* -lh;docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db;');
interact_manual(f1, y=r'docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db')
#y.close()!docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db -`date +%Y-%m-%d`.db
#interact_manual(slow_function,x='echo "" | gotify push -p 1  ');
interact_manual(slow_function,x=a);
#interact_manual(slow_function,a);from ipywidgets import interact, interactive, fixed, interact_manual,Layout
import ipywidgets as widgets
import subprocess

a=widgets.Textarea(
    value="echo '' | gotify push -p 1",
    placeholder='Type something',
    description='String:',
    layout=Layout(width='550px', height='200px'),
    disabled=False
)
def slow_function(x):
    cmd(x)
    return x
    #ddd='cat r.sh'
def cmd(arg):
    p = subprocess.Popen(args=arg, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    single_html =p.stdout.read().decode(encoding="utf-8", errors="strict")
    print(single_html)

def f1(y):
    cmd(y)
    return y
interact_manual(f1, y=r'echo "select * from messages order by id desc limit 3" | sqlite3 /home/pia/pdf/gotify.db;ls /home/pia/upload/gotify* -lh;docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db;');
interact_manual(f1, y=r'docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db')
#y.close()!docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db -`date +%Y-%m-%d`.db
#interact_manual(slow_function,x='echo "" | gotify push -p 1  ');
interact_manual(slow_function,x=a);
#interact_manual(slow_function,a);8、重定向侦测

该网站用来查看某个网址的重定向（redirect）情况。8、重定向侦测

该网站用来查看某个网址的重定向（redirect）情况。tall a little extension to allow access to Chttps://pagespy.jikejishu.com/#/devtools?address=aec89720-14e2-4f80-80a4-166ec1fcb45e.localhttps://pagespy.jikejishu.com/#/devtools?address=e546e926-3e80-449c-860e-c320e0503fc2.localaa=interact(f, x='Hi there!');single_htmlinteract_manual(slow_function,i=FloatSlider(min=1e5, max=1e7, step=1e5));""""""layout=Layout(width='50%', height='80px')[Jupyter Notebook Viewer](https://nbviewer.org/github/koldunovn/nk_public_notebooks/blob/master/Apache_log.ipynb)4、13个对前端开发有用的 Chrome 插件（英文）



本文介绍13个用于前端开发的 Chrome 插件。https://jsdevspace.substack.com/p/13-super-useful-chrome-plugins-for1、Presenterm



将 Markdown 文件转成幻灯片，在命令行播放的开源工具。（@lengyijun 投稿）8、OpenAuth



网页登录的第三方认证的集成库。9、Schemio



基于 Web 的示意图可视化编辑器。10、Buzee



一个桌面软件，提供本地文件的全文搜索（包括图片里面的文字），支持 Windows 和 Mac。6、浏览器的人脸检测能力（英文）



Chrome 浏览器已经支持 Shape Detection API，直接调用这个 API，不用加载任何外部库，就可以通过浏览器识别人脸和二维码。https://learnbyexample.github.io/atom.xml5、ffmpeg.wasm

ffmpeg 库的 wasm 移植，使得 Node.js 可以用这个库编辑视频。、PageSpeed Insights



谷歌官方的网页性能的在线评分工具。2、HTTP Toolkit

这个工具可以拦截和查看 HTTP/HTTPS 请求，并且可以 mock 服务器的回应。3、imgproxy

一个 Go 语言写的图片代理网关，可以代理远程图片，并且提供格式转换和大小缩放功能。8、Slouch stoppah

一个在线小工具，通过电脑摄像头，判断坐在屏幕前面的人的坐姿是否正确。javascript:(function () { var script = document.createElement('script'); script.src="https://cdn.jsdelivr.net/npm/eruda"; document.body.append(script); script.onload = function () { eruda.init(); } })();websocat ws://127.0.0.1:import json
import requests
import websocket


class Shell(object):
    def __init__(self, host='127.0.0.1', port=9222):
        """ init """
        self.host = host
        self.port = port
        self.soc = None
        self.connected = None
        self.tablist = None
        self.find_tabs()

    def connect(self, tab=None, update_tabs=True):
        if update_tabs or not self.tablist:
            self.find_tabs()
        if not tab:
            tab = 0
        wsurl = self.tablist[tab]['webSocketDebuggerUrl']
        #if self.soc.connected:
        #    self.soc.close()
        self.soc = websocket.create_connection(wsurl)
        return self.soc

    def close(self):
        """ Close websocket connection to remote browser."""
        if self.soc:
            self.soc.close()
            self.soc = None

    def find_tabs(self):
        """Connect to host:port and request list of tabs
             return list of dicts of data about open tabs."""
        # find websocket endpoint
        response = requests.get("http://%s:%s/json" % (self.host, self.port))
        self.tablist = json.loads(response.text)
        return self.tablist

    def open_url(self, url):
        """Open a URL in the oldest tab."""
        if not self.soc or not self.soc.connected:
            self.connect(tab=0)
        # force the 'oldest' tab to load url
        navcom = json.dumps({"id": 0,
                             "method": "Page.navigate",
                             "params": {"url": url}})
        # This code would open a new window, but browsers really dont
        # like doing so.  And, the results are irritating at best.
        # navcom=json.dumps({"id":0,"method":"Runtime.evaluate",
        #  "params":{"expression": "window.open('%s', #'_blank',
        # 'toolbar=1,scrollbars=1,location=1,statusbar=0,menubar=1,resizable=1'
        # )" % (url) }})Runtime.evaluate
        self.soc.send(navcom)
        return self.soc.recv()
shell = Shell(host='127.0.0.1', port=9222)  
#shell.connect(0)
#url = 'http://www.clift.org/fred' # shameless
url = 'http://example.com' # shameless
#navcom = json.dumps({"id":0, "method":"Target.createTarget", "params":{"url":url}})
#shell.soc.send(navcom)
shell.connect(0)
navcom = json.dumps({"id":0, "method":"Network.getCookies", "params":{"url":url}})
shell.soc.send(navcom)
response = json.loads(shell.soc.recv())

print(len(shell.find_tabs()))
print(shell.find_tabs()[1]["url"])
#print(shell.find_tabs()[1])
print(response)import json
import requests
import websocket


class Shell(object):
    def __init__(self, host='127.0.0.1', port=9222):
        """ init """
        self.host = host
        self.port = port
        self.soc = None
        self.connected = None
        self.tablist = None
        self.find_tabs()

    def connect(self, tab=None, update_tabs=True):
        if update_tabs or not self.tablist:
            self.find_tabs()
        if not tab:
            tab = 0
        wsurl = self.tablist[tab]['webSocketDebuggerUrl']
        #if self.soc.connected:
        #    self.soc.close()
        self.soc = websocket.create_connection(wsurl)
        return self.soc

    def close(self):
        """ Close websocket connection to remote browser."""
        if self.soc:
            self.soc.close()
            self.soc = None

    def find_tabs(self):
        """Connect to host:port and request list of tabs
             return list of dicts of data about open tabs."""
        # find websocket endpoint
        response = requests.get("http://%s:%s/json" % (self.host, self.port))
        self.tablist = json.loads(response.text)
        return self.tablist

    def open_url(self, url):
        """Open a URL in the oldest tab."""
        if not self.soc or not self.soc.connected:
            self.connect(tab=0)
        # force the 'oldest' tab to load url
        navcom = json.dumps({"id": 0,
                             "method": "Page.navigate",
                             "params": {"url": url}})
        # This code would open a new window, but browsers really dont
        # like doing so.  And, the results are irritating at best.
        # navcom=json.dumps({"id":0,"method":"Runtime.evaluate",
        #  "params":{"expression": "window.open('%s', #'_blank',
        # 'toolbar=1,scrollbars=1,location=1,statusbar=0,menubar=1,resizable=1'
        # )" % (url) }})Runtime.evaluate
        self.soc.send(navcom)
        return self.soc.recv()
shell = Shell(host='127.0.0.1', port=9222)  
#shell.connect(0)
#url = 'http://www.clift.org/fred' # shameless
url = 'http://example.com' # shameless
#navcom = json.dumps({"id":0, "method":"Target.createTarget", "params":{"url":url}})
#shell.soc.send(navcom)
shell.connect(0)
navcom = json.dumps({"id":0, "method":"Network.getCookies", "params":{"url":url}})
shell.soc.send(navcom)
response = json.loads(shell.soc.recv())

print(len(shell.find_tabs()))
print(shell.find_tabs()[1]["url"])
#print(shell.find_tabs()[1])
print(response)https://panel4.serv00.com/mysql/github/koldunovn/nk_public_notebooks/blob/master/Apache_log.ipynbhttps://raw.githubusercontent.com/koldunovn/nk_public_notebooks/master/Apache_log.ipynbselect * from messagesjavascript:date = new Date();
url_root = 'http://nbviewer.ipython.org/';
url = null;
gist_re = /^https?:\/\/gist\.github\.com\/(?:\w+\/)?([a-f0-9]+)$/;
github_re = /^https:\/\/(github\.com\/.*\/)blob\/(.*\.ipynb)$/;
https_re = /^https:\/\/(.*\.ipynb)$/;
http_re = /^http:\/\/(.*\.ipynb)$/;
loc = location.href;
if (gist_re.test(loc)) {
    gist = gist_re.exec(loc);
    url = url_root + gist[1];
} else if (github_re.test(loc)) {
    path = github_re.exec(loc);
    url = url_root + 'urls/raw.' + path[1] + path[2];
} else if (https_re.test(loc)) {
    path = https_re.exec(loc);
    url = url_root + 'urls/' + path[1];
} else if (http_re.test(loc)) {
    path = http_re.exec(loc);
    url = url_root + 'url/' + path[1];}
if (url) {void(window.open(url, 'nbviewer' + date.getTime()));}javascript:date = new Date();
url_root = 'http://nbviewer.ipython.org/';
url = null;
gist_re = /^https?:\/\/gist\.github\.com\/(?:\w+\/)?([a-f0-9]+)$/;
github_re = /^https:\/\/(github\.com\/.*\/)blob\/(.*\.ipynb)$/;
https_re = /^https:\/\/(.*\.ipynb)$/;
http_re = /^http:\/\/(.*\.ipynb)$/;
loc = location.href;
if (gist_re.test(loc)) {
    gist = gist_re.exec(loc);
    url = url_root + gist[1];
} else if (github_re.test(loc)) {
    path = github_re.exec(loc);
    url = url_root + 'urls/raw.' + path[1] + path[2];
} else if (https_re.test(loc)) {
    path = https_re.exec(loc);
    url = url_root + 'urls/' + path[1];
} else if (http_re.test(loc)) {
    path = http_re.exec(loc);
    url = url_root + 'url/' + path[1];}
if (url) {void(window.open(url, 'nbviewer' + date.getTime()));}display(slider)pip install jupyterlab-deckpip install jupyterlab-deckpip install jupyterlab-deckpip install jupyterlab_risepip install nbslidejupyter labextension install jupyterlab_vim{
 "nbformat": 4,
 "nbformat_minor": 2,
 "metadata": {
  "language_info": {
   "name": "python",
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "version": "3.6.8-final"
  },
  "orig_nbformat": 2,
  "file_extension": ".py",
  "mimetype": "text/x-python",
  "name": "python",
  "npconvert_exporter": "python",
  "pygments_lexer": "ipython3",
  "version": 3,
  "kernelspec": {
   "name": "python36864bitjupyterapipipenv100023b4210342f0b1028e92ab62ef71",
   "display_name": "Python 3.6.8 64-bit ('jupyter-api': pipenv)"
  }
 },
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "import datetime\n",
    "import requests\n",
    "import pandas as pd\n",
    "import inspect\n",
    "from inspect import getsourcefile\n",
    "from requests_html import HTML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename     = inspect.getframeinfo(inspect.currentframe()).filename\n",
    "BASE_DIR     = os.path.dirname(os.path.abspath(filename))\n",
    "DATA_DIR     = os.path.join(os.path.dirname(BASE_DIR), 'data')\n",
    "os.makedirs(DATA_DIR, exist_ok=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def url_to_txt(url, filename=\"world.html\", save=False):\n",
    "    r = requests.get(url)\n",
    "    if r.status_code == 200:\n",
    "        html_text = r.text\n",
    "        if save:\n",
    "            with open(f\"world-{year}.html\", 'w') as f:\n",
    "                f.write(html_text)\n",
    "        return html_text\n",
    "    return None\n",
    "\n",
    "\n",
    "def parse_and_extract(url, name='2020'):\n",
    "    html_text = url_to_txt(url)\n",
    "    if html_text == None:\n",
    "        return False\n",
    "    r_html = HTML(html=html_text)\n",
    "    table_class = \".imdb-scroll-table\"\n",
    "    # table_class = \"#table\"\n",
    "    r_table = r_html.find(table_class)\n",
    "\n",
    "    # print(r_table)\n",
    "    table_data = []\n",
    "    # table_data_dicts = []\n",
    "    header_names = []\n",
    "    if len(r_table) == 0:\n",
    "        return False\n",
    "    parsed_table = r_table[0]\n",
    "    rows = parsed_table.find(\"tr\")\n",
    "    header_row = rows[0]\n",
    "    header_cols = header_row.find('th')\n",
    "    header_names = [x.text for x in header_cols]\n",
    "    for row in rows[1:]:\n",
    "        # print(row.text)\n",
    "        cols = row.find(\"td\")\n",
    "        row_data = []\n",
    "        row_dict_data = {}\n",
    "        for i, col in enumerate(cols):\n",
    "            # print(i, col.text, '\\n\\n')\n",
    "            header_name = header_names[i]\n",
    "            # row_dict_data[header_name] = col.text\n",
    "            row_data.append(col.text)\n",
    "        # table_data_dicts.append(row_dict_data)\n",
    "        table_data.append(row_data)\n",
    "    df = pd.DataFrame(table_data, columns=header_names)\n",
    "    # df = pd.DataFrame(table_data_dicts)\n",
    "    datadir_path = DATA_DIR\n",
    "    os.makedirs(datadir_path, exist_ok=True)\n",
    "    filepath = os.path.join(datadir_path, f'{name}.csv')\n",
    "    df.to_csv(filepath, index=False)\n",
    "    return True\n",
    "\n",
    "def run(start_year=None, years_ago=0):\n",
    "    if start_year == None:\n",
    "        now = datetime.datetime.now()\n",
    "        start_year = now.year\n",
    "    assert isinstance(start_year, int)\n",
    "    assert isinstance(years_ago, int)\n",
    "    assert len(f\"{start_year}\") == 4\n",
    "    for i in range(0, years_ago+1):\n",
    "        url = f\"https://www.boxofficemojo.com/year/world/{start_year}/\"\n",
    "        finished = parse_and_extract(url, name=start_year)\n",
    "        if finished:\n",
    "            print(f\"Finished {start_year}\")\n",
    "        else:\n",
    "            print(f\"{start_year} not finished\")\n",
    "        start_year -= 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "Finished 2020\n"
    }
   ],
   "source": [
    "run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ]
}{
 "nbformat": 4,
 "nbformat_minor": 2,
 "metadata": {
  "language_info": {
   "name": "python",
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "version": "3.6.8-final"
  },
  "orig_nbformat": 2,
  "file_extension": ".py",
  "mimetype": "text/x-python",
  "name": "python",
  "npconvert_exporter": "python",
  "pygments_lexer": "ipython3",
  "version": 3,
  "kernelspec": {
   "name": "python36864bitjupyterapipipenv100023b4210342f0b1028e92ab62ef71",
   "display_name": "Python 3.6.8 64-bit ('jupyter-api': pipenv)"
  }
 },
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "import datetime\n",
    "import requests\n",
    "import pandas as pd\n",
    "import inspect\n",
    "from inspect import getsourcefile\n",
    "from requests_html import HTML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename     = inspect.getframeinfo(inspect.currentframe()).filename\n",
    "BASE_DIR     = os.path.dirname(os.path.abspath(filename))\n",
    "DATA_DIR     = os.path.join(os.path.dirname(BASE_DIR), 'data')\n",
    "os.makedirs(DATA_DIR, exist_ok=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def url_to_txt(url, filename=\"world.html\", save=False):\n",
    "    r = requests.get(url)\n",
    "    if r.status_code == 200:\n",
    "        html_text = r.text\n",
    "        if save:\n",
    "            with open(f\"world-{year}.html\", 'w') as f:\n",
    "                f.write(html_text)\n",
    "        return html_text\n",
    "    return None\n",
    "\n",
    "\n",
    "def parse_and_extract(url, name='2020'):\n",
    "    html_text = url_to_txt(url)\n",
    "    if html_text == None:\n",
    "        return False\n",
    "    r_html = HTML(html=html_text)\n",
    "    table_class = \".imdb-scroll-table\"\n",
    "    # table_class = \"#table\"\n",
    "    r_table = r_html.find(table_class)\n",
    "\n",
    "    # print(r_table)\n",
    "    table_data = []\n",
    "    # table_data_dicts = []\n",
    "    header_names = []\n",
    "    if len(r_table) == 0:\n",
    "        return False\n",
    "    parsed_table = r_table[0]\n",
    "    rows = parsed_table.find(\"tr\")\n",
    "    header_row = rows[0]\n",
    "    header_cols = header_row.find('th')\n",
    "    header_names = [x.text for x in header_cols]\n",
    "    for row in rows[1:]:\n",
    "        # print(row.text)\n",
    "        cols = row.find(\"td\")\n",
    "        row_data = []\n",
    "        row_dict_data = {}\n",
    "        for i, col in enumerate(cols):\n",
    "            # print(i, col.text, '\\n\\n')\n",
    "            header_name = header_names[i]\n",
    "            # row_dict_data[header_name] = col.text\n",
    "            row_data.append(col.text)\n",
    "        # table_data_dicts.append(row_dict_data)\n",
    "        table_data.append(row_data)\n",
    "    df = pd.DataFrame(table_data, columns=header_names)\n",
    "    # df = pd.DataFrame(table_data_dicts)\n",
    "    datadir_path = DATA_DIR\n",
    "    os.makedirs(datadir_path, exist_ok=True)\n",
    "    filepath = os.path.join(datadir_path, f'{name}.csv')\n",
    "    df.to_csv(filepath, index=False)\n",
    "    return True\n",
    "\n",
    "def run(start_year=None, years_ago=0):\n",
    "    if start_year == None:\n",
    "        now = datetime.datetime.now()\n",
    "        start_year = now.year\n",
    "    assert isinstance(start_year, int)\n",
    "    assert isinstance(years_ago, int)\n",
    "    assert len(f\"{start_year}\") == 4\n",
    "    for i in range(0, years_ago+1):\n",
    "        url = f\"https://www.boxofficemojo.com/year/world/{start_year}/\"\n",
    "        finished = parse_and_extract(url, name=start_year)\n",
    "        if finished:\n",
    "            print(f\"Finished {start_year}\")\n",
    "        else:\n",
    "            print(f\"{start_year} not finished\")\n",
    "        start_year -= 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "Finished 2020\n"
    }
   ],
   "source": [
    "run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ]
}conda env create -f environment.ymljupyter2slideshttps://github.com/hkust-dh/jupyter-slides-demo.gitjupyter<script type="text/template">pip install -r requirements.txtimport nbformat
from nbconvert.preprocessors import ExecutePreprocessor

def trigger(notebook_filename='chp-traffic.ipynb'):
    with open(notebook_filename) as f:
        nb = nbformat.read(f, as_version=4)
    ep = ExecutePreprocessor(timeout=600, kernel_name='python3')
    r = ep.preprocess(nb)
    return rpip install jupyterlab-code-foldingjupyterlab-vimfrom ipywidgets import interact, interactive, fixed, interact_manual,Layout
import ipywidgets as widgets
import subprocess

a=widgets.Textarea(

    value="echo '' | gotify push -p 1",
    placeholder='Type something',
    description='String:',
    layout=Layout(width='550px', height='200px'),
    disabled=False

)
def slow_function(x):
    cmd(x)
    return x
    #ddd='cat r.sh'
def cmd(arg):
    p = subprocess.Popen(args=arg, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    single_html =p.stdout.read().decode(encoding="utf-8", errors="strict")
    print(single_html)

def f1(y):
    cmd(y)
    return y
interact_manual(f1, y=r'echo "select * from messages order by id desc limit 3" | sqlite3 /home/pia/pdf/gotify.db;ls /home/pia/upload/gotify-2014*.db')
from ipywidgets import interact, interactive, fixed, interact_manual,Layout
import ipywidgets as widgets
import subprocess

a=widgets.Textarea(

    value="echo '' | gotify push -p 1",
    placeholder='Type something',
    description='String:',
    layout=Layout(width='550px', height='200px'),
    disabled=False

)
def slow_function(x):
    cmd(x)
    return x
    #ddd='cat r.sh'
def cmd(arg):
    p = subprocess.Popen(args=arg, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    single_html =p.stdout.read().decode(encoding="utf-8", errors="strict")
    print(single_html)

def f1(y):
    cmd(y)
    return y
interact_manual(f1, y=r'echo "select * from messages order by id desc limit 3" | sqlite3 /home/pia/pdf/gotify.db;ls /home/pia/upload/gotify-2014*.db')
9YeExykKItI-Jf2r-AHAz5eAXH3MZx3G5zs7Vj1BWPghttps://binder.curvenote.dev/https://binder.curvenote.dev/from fasthtml.common import *
from collections import deque

app, rt = fast_app(exts='ws')

# All messages here, but only most recent 15 are stored
messages = deque(maxlen=15)
users = {}

# Takes all the messages and renders them
box_style = "border: 1px solid #ccc; border-radius: 10px; padding: 10px; margin: 5px 0;"
def render_messages(messages):
    return Div(*[Div(m, style=box_style) for m in messages], id='msg-list')

# Input field is reset via hx_swap_oob after submitting a message
def mk_input(): return Input(id='msg', placeholder="Type your message", value="", hx_swap_oob="true")

@rt
def index():
    return Titled("Leave a message for others!"),Div(
        Form(mk_input(), ws_send=True), # input field
        P("Leave a message for others!"),
        Div(render_messages(messages),id='msg-list'), # All the Messages
        hx_ext='ws', ws_connect='ws') # Use a web socket 

def on_connect(ws, send): users[id(ws)] = send
def on_disconnect(ws):users.pop(id(ws),None)

@app.ws('/ws', conn=on_connect, disconn=on_disconnect)
async def ws(msg:str,send):
    await send(mk_input()) # reset the input field immediately
    messages.appendleft(msg) # New messages first
    for u in users.values(): # Get `send` function for a user
        await u(render_messages(messages)) # Send the message to that user

serve()from fasthtml.common import *
from collections import deque

app, rt = fast_app(exts='ws')

# All messages here, but only most recent 15 are stored
messages = deque(maxlen=15)
users = {}

# Takes all the messages and renders them
box_style = "border: 1px solid #ccc; border-radius: 10px; padding: 10px; margin: 5px 0;"
def render_messages(messages):
    return Div(*[Div(m, style=box_style) for m in messages], id='msg-list')

# Input field is reset via hx_swap_oob after submitting a message
def mk_input(): return Input(id='msg', placeholder="Type your message", value="", hx_swap_oob="true")

@rt
def index():
    return Titled("Leave a message for others!"),Div(
        Form(mk_input(), ws_send=True), # input field
        P("Leave a message for others!"),
        Div(render_messages(messages),id='msg-list'), # All the Messages
        hx_ext='ws', ws_connect='ws') # Use a web socket 

def on_connect(ws, send): users[id(ws)] = send
def on_disconnect(ws):users.pop(id(ws),None)

@app.ws('/ws', conn=on_connect, disconn=on_disconnect)
async def ws(msg:str,send):
    await send(mk_input()) # reset the input field immediately
    messages.appendleft(msg) # New messages first
    for u in users.values(): # Get `send` function for a user
        await u(render_messages(messages)) # Send the message to that user

serve()--no-use-pep517--no-use-pep517conda create -n binderhub-in-a-box -f environment.ymlTypeError: unsupported operand type(s) for |: 'type' and 'type'import socket

def main():
    # 创建一个TCP套接字
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    # 绑定IP地址和端口
    server_socket.bind(('127.0.0.1', 12346))

    # 监听连接
    server_socket.listen(5)

    print("服务器已启动，等待客户端连接...")

    while True:
        # 接受客户端连接
        client_socket, client_address = server_socket.accept()
        print(f"客户端{client_address}已连接")

        # 接收客户端发送的数据
        data = client_socket.recv(1024)
        print(f"收到来自{client_address}的数据： {data.decode('utf-8')}")

        # 将接收到的数据发送回客户端
        client_socket.send(data)
        print(f"已将数据发送回{client_address}")

        # 关闭客户端套接字
        client_socket.close()
        print(f"客户端{client_address}已断开连接")

if __name__ == "__main__":
    main()loop = asyncio.get_event_loop()const WebSocket = require('ws');

// 替换为你的 WebSocket 服务器地址
const socket = new WebSocket("ws://10.10.49.172:8765");

// 监听连接打开事件
socket.addEventListener("open", (event) => {
    console.log("WebSocket connection opened.");

    // 构造二进制数据，这里使用一个简单的示例
    const binaryData = new Uint8Array([49, 50, 51, 52]);

    // 发送二进制数据
    socket.send(binaryData);

    console.log("Binary data sent successfully.");
});

// 监听接收消息事件
socket.addEventListener("message", (event) => {
    console.log("Received message:", event.data);
});

// 监听连接关闭事件
socket.addEventListener("close", (event) => {
    console.log("WebSocket connection closed.");
});

// 监听错误事件
socket.addEventListener("error", (event) => {
    console.error("WebSocket error:", event);
});websocket<!DOCTYPE html>
<pre id="log"></pre>
<script>
  // helper function: log message to screen
  function log(msg) {
    document.getElementById('log').textContent += msg + '\n';
  }

  // setup websocket with callbacks
  var ws = new WebSocket('ws://localhost:8080/');
  ws.onopen = function() {
    log('CONNECT');
  };
  ws.onclose = function() {
    log('DISCONNECT');
  };
  ws.onmessage = function(event) {
    log('MESSAGE: ' + event.data);
  };
</script><script src="https://res.zvo.cn/websocket.js/websocket.js"></script>

/*
websocket.connect({
	url:'ws://localhost:8081/', //服务端的WebSocket地址
	onopen:function(){ //如果不需要，此不传即可。
		websocket.send({"type":"CONNECT","token":"123456"}); //当WebSocket通道连接成功后，自动给服务器发送一条json格式的消息
	},
	onmessage:function(message){ //如果不需要，此不传即可
		//console.log(message); //服务端发送来的消息会在这里接收到
		document.getElementById('showMessage').innerHTML = JSON.stringify(message) + '<br/>' + document.getElementById('showMessage').innerHTML;
	}
});
*/
</script><script src="https://res.zvo.cn/websocket.js/websocket.js"></script>

/*
websocket.connect({
	url:'ws://localhost:8081/', //服务端的WebSocket地址
	onopen:function(){ //如果不需要，此不传即可。
		websocket.send({"type":"CONNECT","token":"123456"}); //当WebSocket通道连接成功后，自动给服务器发送一条json格式的消息
	},
	onmessage:function(message){ //如果不需要，此不传即可
		//console.log(message); //服务端发送来的消息会在这里接收到
		document.getElementById('showMessage').innerHTML = JSON.stringify(message) + '<br/>' + document.getElementById('showMessage').innerHTML;
	}
});
*/
</script> ./websocketd --port=8765 ./count.shpip install --upgrade jinja2<!DOCTYPE HTML>
<html>
<head>
    <title>Flask-SocketIO Test</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js" integrity="sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/3.0.4/socket.io.js" integrity="sha512-aMGMvNYu8Ue4G+fHa359jcPb1u+ytAF+P2SCb+PxrjCdO3n3ZTxJ30zuH39rimUggmTwmh2u7wvQsDTHESnmfQ==" crossorigin="anonymous"></script>
    <script type="text/javascript" charset="utf-8">
        $(document).ready(function() {
            // Connect to the Socket.IO server.
            // The connection URL has the following format, relative to the current page:
            //     http[s]://<domain>:<port>[/<namespace>]
            var socket = io.connect('http://' + document.domain + ':' + location.port);

            // Event handler for new connections.
            // The callback function is invoked when a connection with the
            // server is established.
            socket.on('connect', function() {
                socket.emit('my_event', {data: 'I\'m connected!'});
            });

            // Event handler for server sent data.
            // The callback function is invoked whenever the server emits data
            // to the client. The data is then displayed in the "Received"
            // section of the page.
            socket.on('my_response', function(msg, cb) {
                $('#log').append('<br>' + $('<div/>').text('Received #' + msg.count + ': ' + msg.data).html());
                if (cb)
                    cb();
            });

            // Interval function that tests message latency by sending a "ping"
            // message. The server then responds with a "pong" message and the
            // round trip time is measured.
            var ping_pong_times = [];
            var start_time;
            window.setInterval(function() {
                start_time = (new Date).getTime();
                $('#transport').text(socket.io.engine.transport.name);
                socket.emit('my_ping');
            }, 1000);

            // Handler for the "pong" message. When the pong is received, the
            // time from the ping is stored, and the average of the last 30
            // samples is average and displayed.
            socket.on('my_pong', function() {
                var latency = (new Date).getTime() - start_time;
                ping_pong_times.push(latency);
                ping_pong_times = ping_pong_times.slice(-30); // keep last 30 samples
                var sum = 0;
                for (var i = 0; i < ping_pong_times.length; i++)
                    sum += ping_pong_times[i];
                $('#ping-pong').text(Math.round(10 * sum / ping_pong_times.length) / 10);
            });

            // Handlers for the different forms in the page.
            // These accept data from the user and send it to the server in a
            // variety of ways
            $('form#emit').submit(function(event) {
                socket.emit('my_event', {data: $('#emit_data').val()});
                return false;
            });
            $('form#broadcast').submit(function(event) {
                socket.emit('my_broadcast_event', {data: $('#broadcast_data').val()});
                return false;
            });
            $('form#join').submit(function(event) {
                socket.emit('join', {room: $('#join_room').val()});
                return false;
            });
            $('form#leave').submit(function(event) {
                socket.emit('leave', {room: $('#leave_room').val()});
                return false;
            });
            $('form#send_room').submit(function(event) {
                socket.emit('my_room_event', {room: $('#room_name').val(), data: $('#room_data').val()});
                return false;
            });
            $('form#close').submit(function(event) {
                socket.emit('close_room', {room: $('#close_room').val()});
                return false;
            });
            $('form#disconnect').submit(function(event) {
                socket.emit('disconnect_request');
                return false;
            });
        });
    </script>
</head>
<body>
    <h1>Flask-SocketIO Test</h1>
    <p>
      Async mode is: <b>{{ async_mode }}</b><br>
      Current transport is: <b><span id="transport"></span></b><br>
      Average ping/pong latency: <b><span id="ping-pong"></span>ms</b>
    </p>
    <h2>Send:</h2>
    <form id="emit" method="POST" action='#'>
        <input type="text" name="emit_data" id="emit_data" placeholder="Message">
        <input type="submit" value="Echo">
    </form>
    <form id="broadcast" method="POST" action='#'>
        <input type="text" name="broadcast_data" id="broadcast_data" placeholder="Message">
        <input type="submit" value="Broadcast">
    </form>
    <form id="join" method="POST" action='#'>
        <input type="text" name="join_room" id="join_room" placeholder="Room Name">
        <input type="submit" value="Join Room">
    </form>
    <form id="leave" method="POST" action='#'>
        <input type="text" name="leave_room" id="leave_room" placeholder="Room Name">
        <input type="submit" value="Leave Room">
    </form>
    <form id="send_room" method="POST" action='#'>
        <input type="text" name="room_name" id="room_name" placeholder="Room Name">
        <input type="text" name="room_data" id="room_data" placeholder="Message">
        <input type="submit" value="Send to Room">
    </form>
    <form id="close" method="POST" action="#">
        <input type="text" name="close_room" id="close_room" placeholder="Room Name">
        <input type="submit" value="Close Room">
    </form>
    <form id="disconnect" method="POST" action="#">
        <input type="submit" value="Disconnect">
    </form>
    <h2>Receive:</h2>
    <div id="log"></div>
</body>
</html>from threading import Lock
from flask import Flask, render_template, session, request, copy_current_request_context
from flask_socketio import SocketIO, emit, join_room, leave_room, close_room, rooms, disconnect

# Set this variable to "threading", "eventlet" or "gevent" to test the
# different async modes, or leave it set to None for the application to choose
# the best option based on installed packages.
async_mode = None

app = Flask(__name__)
app.config['SECRET_KEY'] = 'secret!'
socketio = SocketIO(app, async_mode=async_mode)
thread = None
thread_lock = Lock()


def background_thread():
    """Example of how to send server generated events to clients."""
    count = 0
    while True:
        socketio.sleep(10)
        count += 1
        socketio.emit('my_response',
                      {'data': 'Server generated event', 'count': count})


@app.route('/')
def index():
    return render_template('index.html', async_mode=socketio.async_mode)


@socketio.event
def my_event(message):
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response',
         {'data': message['data'], 'count': session['receive_count']})


@socketio.event
def my_broadcast_event(message):
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response',
         {'data': message['data'], 'count': session['receive_count']},
         broadcast=True)


@socketio.event
def join(message):
    join_room(message['room'])
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response',
         {'data': 'In rooms: ' + ', '.join(rooms()),
          'count': session['receive_count']})


@socketio.event
def leave(message):
    leave_room(message['room'])
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response',
         {'data': 'In rooms: ' + ', '.join(rooms()),
          'count': session['receive_count']})


@socketio.on('close_room')
def on_close_room(message):
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response', {'data': 'Room ' + message['room'] + ' is closing.',
                         'count': session['receive_count']},
         to=message['room'])
    close_room(message['room'])


@socketio.event
def my_room_event(message):
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response',
         {'data': message['data'], 'count': session['receive_count']},
         to=message['room'])


@socketio.event
def disconnect_request():
    @copy_current_request_context
    def can_disconnect():
        disconnect()
    session['receive_count'] = session.get('receive_count', 0) + 1
    # for this emit we use a callback function
    # when the callback function is invoked we know that the message has been
    # received and it is safe to disconnect
    emit('my_response',
         {'data': 'Disconnected!', 'count': session['receive_count']},
         callback=can_disconnect)


@socketio.event
def my_ping():
    emit('my_pong')


@socketio.event
def connect():
    global thread
    with thread_lock:
        if thread is None:
            thread = socketio.start_background_task(background_thread)
    emit('my_response', {'data': 'Connected', 'count': 0})


@socketio.on('disconnect')
def test_disconnect():
    print('Client disconnected', request.sid)


if __name__ == '__main__':
    socketio.run(app, host='0.0.0.0', debug=True)
send-receive.sh<!DOCTYPE html>
<pre id="log"></pre>
<script>
  // helper function: log message to screen
  function log(msg) {
    document.getElementById('log').textContent += msg + '\n';
  }

  // setup websocket with callbacks
  var ws = new WebSocket('ws://localhost:8080/');
  ws.onopen = function() {
    log('CONNECT');
  };
  ws.onclose = function() {
    log('DISCONNECT');
  };
  ws.onmessage = function(event) {
    log('MESSAGE: ' + event.data);
  };
</script>echo $REPLYecho $REPLYhttp://45.32.200.249:1234/count.sh# Then access http://localhost:1234/dump-env.sh
#You can also test the command files by running from the command line.www.example.com/socketserverTypeError: WS_Server.echo() missing 1 required positional argument: 'path'npm install -g json-socket-serverimport requests

js_code = """
(function(){
    console.log("test")
    return "执行成功"
})()
"""

url = "http://localhost:12080/execjs"
data = {
    "group": "zzz",
    "code": js_code
}
res = requests.post(url, data=data)
print(res.text)https://kkgithub.com/sixgad/py-jsrpc.gitfunction JsClient(wsURL) {
    this.wsURL = wsURL;
    this.handlers = {};
    this.socket = {};
    if (!wsURL) {
        throw new Error('wsURL can not be empty!!')
    }
    this.webSocketFactory = this.resolveWebSocketFactory();
    this.connect()
}

JsClient.prototype.resolveWebSocketFactory = function () {
    if (typeof window === 'object') {
        var theWebSocket = window.WebSocket ? window.WebSocket : window.MozWebSocket;
        return function (wsURL) {

            function WindowWebSocketWrapper(wsURL) {
                this.mSocket = new theWebSocket(wsURL);
            }

            WindowWebSocketWrapper.prototype.close = function () {
                this.mSocket.close();
            };

            WindowWebSocketWrapper.prototype.onmessage = function (onMessageFunction) {
                this.mSocket.onmessage = onMessageFunction;
            };

            WindowWebSocketWrapper.prototype.onopen = function (onOpenFunction) {
                this.mSocket.onopen = onOpenFunction;
            };
            WindowWebSocketWrapper.prototype.onclose = function (onCloseFunction) {
                this.mSocket.onclose = onCloseFunction;
            };

            WindowWebSocketWrapper.prototype.send = function (message) {
                this.mSocket.send(message);
            };

            return new WindowWebSocketWrapper(wsURL);
        }
    }
    if (typeof weex === 'object') {
        try {
            console.log("test webSocket for weex");
            var ws = weex.requireModule('webSocket');
            console.log("find webSocket for weex:" + ws);
            return function (wsURL) {
                try {
                    ws.close();
                } catch (e) {
                }
                ws.WebSocket(wsURL, '');
                return ws;
            }
        } catch (e) {
            console.log(e);
        }
    }
    if (typeof WebSocket === 'object') {
        return function (wsURL) {
            return new theWebSocket(wsURL);
        }
    }
    throw new Error("the js environment do not support websocket");
};

JsClient.prototype.connect = function () {
    console.log('jsclient begin of connect to wsURL: ' + this.wsURL);
    var _this = this;
    try {
        this.socket = this.webSocketFactory(this.wsURL);
    } catch (e) {
        console.log("jsclient create connection failed,reconnect after 2s");
        setTimeout(function () {
            _this.connect()
        }, 2000)
    }

    this.socket.onmessage(function (event) {
        _this.handleJsClientRequest(event.data)
    });

    this.socket.onopen(function (event) {
        console.log('jsclient open a connection')
    });

    this.socket.onclose(function (event) {
        console.log('jsclient disconnected ,reconnection after 2s');
        setTimeout(function () {
            _this.connect()
        }, 2000)
    });
};

JsClient.prototype.handleJsClientRequest = function (requestJson) {
    console.log("receive request: " + requestJson);
    var request = JSON.parse(requestJson);
    var seq = request['__uuid_seq__'];

    if (!request['action']) {
        this.sendFailed(seq, 'need request param {action}');
        return
    }
    var action = request['action'];
    if (!this.handlers[action]) {
        this.sendFailed(seq, 'no action handler: ' + action + ' defined');
        return
    }

    var theHandler = this.handlers[action];
    var _this = this;
    try {
        theHandler(request, function (response) {
            try {
                _this.sendSuccess(seq, response)
            } catch (e) {
                _this.sendFailed(seq, "e:" + e);
            }
        }, function (errorMessage) {
            _this.sendFailed(seq, errorMessage)
        })
    } catch (e) {
        console.log("error: " + e);
        _this.sendFailed(seq, ":" + e);
    }
};

JsClient.prototype.sendSuccess = function (seq, response) {
    var responseJson;
    if (typeof response == 'string') {
        try {
            responseJson = JSON.parse(response);
        } catch (e) {
            responseJson = {};
            responseJson['data'] = response;
        }
    } else if (typeof response == 'object') {
        responseJson = response;
    } else {
        responseJson = {};
        responseJson['data'] = response;
    }

    if (Array.isArray(responseJson)) {
        responseJson = {
            data: responseJson,
            code: 0
        }
    }

    if (responseJson['code']) {
        responseJson['code'] = 0;
    } else if (responseJson['status']) {
        responseJson['status'] = 0;
    } else {
        responseJson['status'] = 0;
    }
    responseJson['__uuid_seq__'] = seq;
    var responseText = JSON.stringify(responseJson);
    console.log("response :" + responseText);
    this.socket.send(responseText);
};

JsClient.prototype.sendFailed = function (seq, errorMessage) {
    if (typeof errorMessage != 'string') {
        errorMessage = JSON.stringify(errorMessage);
    }
    var responseJson = {};
    responseJson['message'] = errorMessage;
    responseJson['status'] = -1;
    responseJson['__uuid_seq__'] = seq;
    var responseText = JSON.stringify(responseJson);
    console.log("jsclient response :" + responseText);
    this.socket.send(responseText)
};

JsClient.prototype.registerAction = function (action, handler) {
    if (typeof action !== 'string') {
        throw new Error("an action must be string");
    }
    if (typeof handler !== 'function') {
        throw new Error("a handler must be function");
    }
    console.log("jsclient register action: " + action);
    this.handlers[action] = handler;
    return this;
};
function guid() {
    function S4() {
        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
    }
    return (S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4() + S4());
}# -*- coding: utf-8 -*-
# @Time   : 2021/7/13 21:18
# @Author : zp
# @Python3.7
import asyncio
import websockets
import json
from loguru import logger
from sanic import Sanic, response
import threading
from back_socket_server import ws_run

app = Sanic(__name__)


@app.route('/send', methods=['GET'])
async def get_request(request):
    # http://127.0.0.1:5000/send?group=ws-group&action=clientTime
    args_dic = {}
    for params in request.query_args:
        args_dic[params[0]] = str(params[1])
    if "action" not in args_dic:
        return response.json({"error": "need action"})
    group = args_dic.pop('group')
    async with websockets.connect(f'ws://localhost:6789/invoke?group={group}') as websocket:
        await websocket.send(json.dumps(args_dic))
        res = await websocket.recv()
        logger.info(res)
    return response.json(json.loads(res))


if __name__ == '__main__':
    app.add_task(ws_run())
    app.run(debug=False, host="127.0.0.1", port=5000)@app.main_process_startapp.add_task(ws_run()) gotify push -p 1 ""  | gotify push -p 1var aaa=" gotify push  -t " + "title:" + "'" + encodeURI(document.title)+"'" +" -p 1 " + document.URL
//alert(aaa)
window.open('http://45.32.200.249:8060/ddd?url=ddd&ddd='+aaa)var aaa=" gotify push  -t " + "title:" + "'" + encodeURI(document.title)+"'" +" -p 1 " + document.URL
//alert(aaa)
window.open('http://45.32.200.249:8060/ddd?url=ddd&ddd='+aaa)var aaa=" gotify push  -t " + "title:" + "'" + encodeURI(document.title)+"'" +" -p 1 " + document.URL
//alert(aaa)
window.open('http://45.32.200.249:8060/ddd?url=ddd&ddd='+aaa)function SekiroClient(e){if(this.wsURL=e,this.handlers={},this.socket={},!e)throw new Error("wsURL can not be empty!!");this.webSocketFactory=this.resolveWebSocketFactory(),this.connect()}SekiroClient.prototype.resolveWebSocketFactory=function(){if("object"==typeof window){var e=window.WebSocket?window.WebSocket:window.MozWebSocket;return function(o){function t(o){this.mSocket=new e(o)}return t.prototype.close=function(){this.mSocket.close()},t.prototype.onmessage=function(e){this.mSocket.onmessage=e},t.prototype.onopen=function(e){this.mSocket.onopen=e},t.prototype.onclose=function(e){this.mSocket.onclose=e},t.prototype.send=function(e){this.mSocket.send(e)},new t(o)}}if("object"==typeof weex)try{console.log("test webSocket for weex");var o=weex.requireModule("webSocket");return console.log("find webSocket for weex:"+o),function(e){try{o.close()}catch(e){}return o.WebSocket(e,""),o}}catch(e){console.log(e)}if("object"==typeof WebSocket)return function(o){return new e(o)};throw new Error("the js environment do not support websocket")},SekiroClient.prototype.connect=function(){console.log("sekiro: begin of connect to wsURL: "+this.wsURL);var e=this;try{this.socket=this.webSocketFactory(this.wsURL)}catch(o){return console.log("sekiro: create connection failed,reconnect after 2s:"+o),void setTimeout(function(){e.connect()},2e3)}this.socket.onmessage(function(o){e.handleSekiroRequest(o.data)}),this.socket.onopen(function(e){console.log("sekiro: open a sekiro client connection")}),this.socket.onclose(function(o){console.log("sekiro: disconnected ,reconnection after 2s"),setTimeout(function(){e.connect()},2e3)})},SekiroClient.prototype.handleSekiroRequest=function(e){console.log("receive sekiro request: "+e);var o=JSON.parse(e),t=o.__sekiro_seq__;if(o.action){var n=o.action;if(this.handlers[n]){var s=this.handlers[n],i=this;try{s(o,function(e){try{i.sendSuccess(t,e)}catch(e){i.sendFailed(t,"e:"+e)}},function(e){i.sendFailed(t,e)})}catch(e){console.log("error: "+e),i.sendFailed(t,":"+e)}}else this.sendFailed(t,"no action handler: "+n+" defined")}else this.sendFailed(t,"need request param {action}")},SekiroClient.prototype.sendSuccess=function(e,o){var t;if("string"==typeof o)try{t=JSON.parse(o)}catch(e){(t={}).data=o}else"object"==typeof o?t=o:(t={}).data=o;(Array.isArray(t)||"string"==typeof t)&&(t={data:t,code:0}),t.code?t.code=0:(t.status,t.status=0),t.__sekiro_seq__=e;var n=JSON.stringify(t);console.log("response :"+n),this.socket.send(n)},SekiroClient.prototype.sendFailed=function(e,o){"string"!=typeof o&&(o=JSON.stringify(o));var t={};t.message=o,t.status=-1,t.__sekiro_seq__=e;var n=JSON.stringify(t);console.log("sekiro: response :"+n),this.socket.send(n)},SekiroClient.prototype.registerAction=function(e,o){if("string"!=typeof e)throw new Error("an action must be string");if("function"!=typeof o)throw new Error("a handler must be function");return console.log("sekiro: register action: "+e),this.handlers[e]=o,this};
var client = new SekiroClient("wss://sekiro.iinti.cn:5612/business/register?group=test_web&clientId=" + Math.random());
client.registerAction("testAction", function (request, resolve, reject) {
    resolve("ok");
});function SekiroClient(e){if(this.wsURL=e,this.handlers={},this.socket={},!e)throw new Error("wsURL can not be empty!!");this.webSocketFactory=this.resolveWebSocketFactory(),this.connect()}SekiroClient.prototype.resolveWebSocketFactory=function(){if("object"==typeof window){var e=window.WebSocket?window.WebSocket:window.MozWebSocket;return function(o){function t(o){this.mSocket=new e(o)}return t.prototype.close=function(){this.mSocket.close()},t.prototype.onmessage=function(e){this.mSocket.onmessage=e},t.prototype.onopen=function(e){this.mSocket.onopen=e},t.prototype.onclose=function(e){this.mSocket.onclose=e},t.prototype.send=function(e){this.mSocket.send(e)},new t(o)}}if("object"==typeof weex)try{console.log("test webSocket for weex");var o=weex.requireModule("webSocket");return console.log("find webSocket for weex:"+o),function(e){try{o.close()}catch(e){}return o.WebSocket(e,""),o}}catch(e){console.log(e)}if("object"==typeof WebSocket)return function(o){return new e(o)};throw new Error("the js environment do not support websocket")},SekiroClient.prototype.connect=function(){console.log("sekiro: begin of connect to wsURL: "+this.wsURL);var e=this;try{this.socket=this.webSocketFactory(this.wsURL)}catch(o){return console.log("sekiro: create connection failed,reconnect after 2s:"+o),void setTimeout(function(){e.connect()},2e3)}this.socket.onmessage(function(o){e.handleSekiroRequest(o.data)}),this.socket.onopen(function(e){console.log("sekiro: open a sekiro client connection")}),this.socket.onclose(function(o){console.log("sekiro: disconnected ,reconnection after 2s"),setTimeout(function(){e.connect()},2e3)})},SekiroClient.prototype.handleSekiroRequest=function(e){console.log("receive sekiro request: "+e);var o=JSON.parse(e),t=o.__sekiro_seq__;if(o.action){var n=o.action;if(this.handlers[n]){var s=this.handlers[n],i=this;try{s(o,function(e){try{i.sendSuccess(t,e)}catch(e){i.sendFailed(t,"e:"+e)}},function(e){i.sendFailed(t,e)})}catch(e){console.log("error: "+e),i.sendFailed(t,":"+e)}}else this.sendFailed(t,"no action handler: "+n+" defined")}else this.sendFailed(t,"need request param {action}")},SekiroClient.prototype.sendSuccess=function(e,o){var t;if("string"==typeof o)try{t=JSON.parse(o)}catch(e){(t={}).data=o}else"object"==typeof o?t=o:(t={}).data=o;(Array.isArray(t)||"string"==typeof t)&&(t={data:t,code:0}),t.code?t.code=0:(t.status,t.status=0),t.__sekiro_seq__=e;var n=JSON.stringify(t);console.log("response :"+n),this.socket.send(n)},SekiroClient.prototype.sendFailed=function(e,o){"string"!=typeof o&&(o=JSON.stringify(o));var t={};t.message=o,t.status=-1,t.__sekiro_seq__=e;var n=JSON.stringify(t);console.log("sekiro: response :"+n),this.socket.send(n)},SekiroClient.prototype.registerAction=function(e,o){if("string"!=typeof e)throw new Error("an action must be string");if("function"!=typeof o)throw new Error("a handler must be function");return console.log("sekiro: register action: "+e),this.handlers[e]=o,this};
var client = new SekiroClient("wss://sekiro.iinti.cn:5612/business/register?group=test_web&clientId=" + Math.random());
client.registerAction("testAction", function (request, resolve, reject) {
    resolve("ok");
});function SekiroClient(e){if(this.wsURL=e,this.handlers={},this.socket={},!e)throw new Error("wsURL can not be empty!!");this.webSocketFactory=this.resolveWebSocketFactory(),this.connect()}SekiroClient.prototype.resolveWebSocketFactory=function(){if("object"==typeof window){var e=window.WebSocket?window.WebSocket:window.MozWebSocket;return function(o){function t(o){this.mSocket=new e(o)}return t.prototype.close=function(){this.mSocket.close()},t.prototype.onmessage=function(e){this.mSocket.onmessage=e},t.prototype.onopen=function(e){this.mSocket.onopen=e},t.prototype.onclose=function(e){this.mSocket.onclose=e},t.prototype.send=function(e){this.mSocket.send(e)},new t(o)}}if("object"==typeof weex)try{console.log("test webSocket for weex");var o=weex.requireModule("webSocket");return console.log("find webSocket for weex:"+o),function(e){try{o.close()}catch(e){}return o.WebSocket(e,""),o}}catch(e){console.log(e)}if("object"==typeof WebSocket)return function(o){return new e(o)};throw new Error("the js environment do not support websocket")},SekiroClient.prototype.connect=function(){console.log("sekiro: begin of connect to wsURL: "+this.wsURL);var e=this;try{this.socket=this.webSocketFactory(this.wsURL)}catch(o){return console.log("sekiro: create connection failed,reconnect after 2s:"+o),void setTimeout(function(){e.connect()},2e3)}this.socket.onmessage(function(o){e.handleSekiroRequest(o.data)}),this.socket.onopen(function(e){console.log("sekiro: open a sekiro client connection")}),this.socket.onclose(function(o){console.log("sekiro: disconnected ,reconnection after 2s"),setTimeout(function(){e.connect()},2e3)})},SekiroClient.prototype.handleSekiroRequest=function(e){console.log("receive sekiro request: "+e);var o=JSON.parse(e),t=o.__sekiro_seq__;if(o.action){var n=o.action;if(this.handlers[n]){var s=this.handlers[n],i=this;try{s(o,function(e){try{i.sendSuccess(t,e)}catch(e){i.sendFailed(t,"e:"+e)}},function(e){i.sendFailed(t,e)})}catch(e){console.log("error: "+e),i.sendFailed(t,":"+e)}}else this.sendFailed(t,"no action handler: "+n+" defined")}else this.sendFailed(t,"need request param {action}")},SekiroClient.prototype.sendSuccess=function(e,o){var t;if("string"==typeof o)try{t=JSON.parse(o)}catch(e){(t={}).data=o}else"object"==typeof o?t=o:(t={}).data=o;(Array.isArray(t)||"string"==typeof t)&&(t={data:t,code:0}),t.code?t.code=0:(t.status,t.status=0),t.__sekiro_seq__=e;var n=JSON.stringify(t);console.log("response :"+n),this.socket.send(n)},SekiroClient.prototype.sendFailed=function(e,o){"string"!=typeof o&&(o=JSON.stringify(o));var t={};t.message=o,t.status=-1,t.__sekiro_seq__=e;var n=JSON.stringify(t);console.log("sekiro: response :"+n),this.socket.send(n)},SekiroClient.prototype.registerAction=function(e,o){if("string"!=typeof e)throw new Error("an action must be string");if("function"!=typeof o)throw new Error("a handler must be function");return console.log("sekiro: register action: "+e),this.handlers[e]=o,this};
var client = new SekiroClient("wss://sekiro.iinti.cn:5612/business/register?group=test_web&clientId=" + Math.random());
client.registerAction("testAction", function (request, resolve, reject) {
    resolve("ok");
});from ipywidgets import interact, interactive, fixed, interact_manual,Layout
import ipywidgets as widgets
import subprocess

a=widgets.Textarea(
    value="echo '' | gotify push -p 1",
    placeholder='Type something',
    description='String:',
    layout=Layout(width='550px', height='200px'),
    disabled=False
)
def slow_function(x):
    cmd(x)
    return x
    #ddd='cat r.sh'
def cmd(arg):
    p = subprocess.Popen(args=arg, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    single_html =p.stdout.read().decode(encoding="utf-8", errors="strict")
    print(single_html)

def f1(y):
    cmd(y)
    return y
interact_manual(f1, y=r'echo "select * from messages order by id desc limit 3" | sqlite3 /home/pia/pdf/gotify.db;ls /home/pia/upload/gotify* -lh;docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db;');
interact_manual(f1, y=r'docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db')
#y.close()!docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db -`date +%Y-%m-%d`.db
#interact_manual(slow_function,x='echo "" | gotify push -p 1  ');
interact_manual(slow_function,x=a);
#interact_manual(slow_function,a);from ipywidgets import interact, interactive, fixed, interact_manual,Layout
import ipywidgets as widgets
import subprocess

a=widgets.Textarea(
    value="echo '' | gotify push -p 1",
    placeholder='Type something',
    description='String:',
    layout=Layout(width='550px', height='200px'),
    disabled=False
)
def slow_function(x):
    cmd(x)
    return x
    #ddd='cat r.sh'
def cmd(arg):
    p = subprocess.Popen(args=arg, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    single_html =p.stdout.read().decode(encoding="utf-8", errors="strict")
    print(single_html)

def f1(y):
    cmd(y)
    return y
interact_manual(f1, y=r'echo "select * from messages order by id desc limit 3" | sqlite3 /home/pia/pdf/gotify.db;ls /home/pia/upload/gotify* -lh;docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db;');
interact_manual(f1, y=r'docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db')
#y.close()!docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db -`date +%Y-%m-%d`.db
#interact_manual(slow_function,x='echo "" | gotify push -p 1  ');
interact_manual(slow_function,x=a);
#interact_manual(slow_function,a);from ipywidgets import interact, interactive, fixed, interact_manual,Layout
import ipywidgets as widgets
import subprocess

a=widgets.Textarea(
    value="echo '' | gotify push -p 1",
    placeholder='Type something',
    description='String:',
    layout=Layout(width='550px', height='200px'),
    disabled=False
)
def slow_function(x):
    cmd(x)
    return x
    #ddd='cat r.sh'
def cmd(arg):
    p = subprocess.Popen(args=arg, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    single_html =p.stdout.read().decode(encoding="utf-8", errors="strict")
    print(single_html)

def f1(y):
    cmd(y)
    return y
interact_manual(f1, y=r'echo "select * from messages order by id desc limit 3" | sqlite3 /home/pia/pdf/gotify.db;ls /home/pia/upload/gotify* -lh;docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db;');
interact_manual(f1, y=r'docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db')
#y.close()!docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db -`date +%Y-%m-%d`.db
#interact_manual(slow_function,x='echo "" | gotify push -p 1  ');
interact_manual(slow_function,x=a);
#interact_manual(slow_function,a);from ipywidgets import interact, interactive, fixed, interact_manual,Layout
import ipywidgets as widgets
import subprocess

a=widgets.Textarea(
    value="echo '' | gotify push -p 1",
    placeholder='Type something',
    description='String:',
    layout=Layout(width='550px', height='200px'),
    disabled=False
)
def slow_function(x):
    cmd(x)
    return x
    #ddd='cat r.sh'
def cmd(arg):
    p = subprocess.Popen(args=arg, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    single_html =p.stdout.read().decode(encoding="utf-8", errors="strict")
    print(single_html)

def f1(y):
    cmd(y)
    return y
interact_manual(f1, y=r'echo "select * from messages order by id desc limit 3" | sqlite3 /home/pia/pdf/gotify.db;ls /home/pia/upload/gotify* -lh;docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db;');
interact_manual(f1, y=r'docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db')
#y.close()!docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db -`date +%Y-%m-%d`.db
#interact_manual(slow_function,x='echo "" | gotify push -p 1  ');
interact_manual(slow_function,x=a);
#interact_manual(slow_function,a);https://kkgithub.com/aluzzardi/wsshhttps://kkgithub.com/aluzzardi/wsshwebsocat ws://ws.vi-server.org/mirror/8、重定向侦测

该网站用来查看某个网址的重定向（redirect）情况。8、重定向侦测

该网站用来查看某个网址的重定向（redirect）情况。tall a little extension to allow access to Chttps://pagespy.jikejishu.com/#/devtools?address=aec89720-14e2-4f80-80a4-166ec1fcb45e.localhttps://pagespy.jikejishu.com/#/devtools?address=e546e926-3e80-449c-860e-c320e0503fc2.localaa=interact(f, x='Hi there!');single_htmlinteract_manual(slow_function,i=FloatSlider(min=1e5, max=1e7, step=1e5));""""""layout=Layout(width='50%', height='80px')[Jupyter Notebook Viewer](https://nbviewer.org/github/koldunovn/nk_public_notebooks/blob/master/Apache_log.ipynb)4、13个对前端开发有用的 Chrome 插件（英文）



本文介绍13个用于前端开发的 Chrome 插件。https://jsdevspace.substack.com/p/13-super-useful-chrome-plugins-for1、Presenterm



将 Markdown 文件转成幻灯片，在命令行播放的开源工具。（@lengyijun 投稿）8、OpenAuth



网页登录的第三方认证的集成库。9、Schemio



基于 Web 的示意图可视化编辑器。10、Buzee



一个桌面软件，提供本地文件的全文搜索（包括图片里面的文字），支持 Windows 和 Mac。6、浏览器的人脸检测能力（英文）



Chrome 浏览器已经支持 Shape Detection API，直接调用这个 API，不用加载任何外部库，就可以通过浏览器识别人脸和二维码。https://learnbyexample.github.io/atom.xml5、ffmpeg.wasm

ffmpeg 库的 wasm 移植，使得 Node.js 可以用这个库编辑视频。、PageSpeed Insights



谷歌官方的网页性能的在线评分工具。2、HTTP Toolkit

这个工具可以拦截和查看 HTTP/HTTPS 请求，并且可以 mock 服务器的回应。3、imgproxy

一个 Go 语言写的图片代理网关，可以代理远程图片，并且提供格式转换和大小缩放功能。8、Slouch stoppah

一个在线小工具，通过电脑摄像头，判断坐在屏幕前面的人的坐姿是否正确。javascript:(function () { var script = document.createElement('script'); script.src="https://cdn.jsdelivr.net/npm/eruda"; document.body.append(script); script.onload = function () { eruda.init(); } })();websocat ws://127.0.0.1:import json
import requests
import websocket


class Shell(object):
    def __init__(self, host='127.0.0.1', port=9222):
        """ init """
        self.host = host
        self.port = port
        self.soc = None
        self.connected = None
        self.tablist = None
        self.find_tabs()

    def connect(self, tab=None, update_tabs=True):
        if update_tabs or not self.tablist:
            self.find_tabs()
        if not tab:
            tab = 0
        wsurl = self.tablist[tab]['webSocketDebuggerUrl']
        #if self.soc.connected:
        #    self.soc.close()
        self.soc = websocket.create_connection(wsurl)
        return self.soc

    def close(self):
        """ Close websocket connection to remote browser."""
        if self.soc:
            self.soc.close()
            self.soc = None

    def find_tabs(self):
        """Connect to host:port and request list of tabs
             return list of dicts of data about open tabs."""
        # find websocket endpoint
        response = requests.get("http://%s:%s/json" % (self.host, self.port))
        self.tablist = json.loads(response.text)
        return self.tablist

    def open_url(self, url):
        """Open a URL in the oldest tab."""
        if not self.soc or not self.soc.connected:
            self.connect(tab=0)
        # force the 'oldest' tab to load url
        navcom = json.dumps({"id": 0,
                             "method": "Page.navigate",
                             "params": {"url": url}})
        # This code would open a new window, but browsers really dont
        # like doing so.  And, the results are irritating at best.
        # navcom=json.dumps({"id":0,"method":"Runtime.evaluate",
        #  "params":{"expression": "window.open('%s', #'_blank',
        # 'toolbar=1,scrollbars=1,location=1,statusbar=0,menubar=1,resizable=1'
        # )" % (url) }})Runtime.evaluate
        self.soc.send(navcom)
        return self.soc.recv()
shell = Shell(host='127.0.0.1', port=9222)  
#shell.connect(0)
#url = 'http://www.clift.org/fred' # shameless
url = 'http://example.com' # shameless
#navcom = json.dumps({"id":0, "method":"Target.createTarget", "params":{"url":url}})
#shell.soc.send(navcom)
shell.connect(0)
navcom = json.dumps({"id":0, "method":"Network.getCookies", "params":{"url":url}})
shell.soc.send(navcom)
response = json.loads(shell.soc.recv())

print(len(shell.find_tabs()))
print(shell.find_tabs()[1]["url"])
#print(shell.find_tabs()[1])
print(response)import json
import requests
import websocket


class Shell(object):
    def __init__(self, host='127.0.0.1', port=9222):
        """ init """
        self.host = host
        self.port = port
        self.soc = None
        self.connected = None
        self.tablist = None
        self.find_tabs()

    def connect(self, tab=None, update_tabs=True):
        if update_tabs or not self.tablist:
            self.find_tabs()
        if not tab:
            tab = 0
        wsurl = self.tablist[tab]['webSocketDebuggerUrl']
        #if self.soc.connected:
        #    self.soc.close()
        self.soc = websocket.create_connection(wsurl)
        return self.soc

    def close(self):
        """ Close websocket connection to remote browser."""
        if self.soc:
            self.soc.close()
            self.soc = None

    def find_tabs(self):
        """Connect to host:port and request list of tabs
             return list of dicts of data about open tabs."""
        # find websocket endpoint
        response = requests.get("http://%s:%s/json" % (self.host, self.port))
        self.tablist = json.loads(response.text)
        return self.tablist

    def open_url(self, url):
        """Open a URL in the oldest tab."""
        if not self.soc or not self.soc.connected:
            self.connect(tab=0)
        # force the 'oldest' tab to load url
        navcom = json.dumps({"id": 0,
                             "method": "Page.navigate",
                             "params": {"url": url}})
        # This code would open a new window, but browsers really dont
        # like doing so.  And, the results are irritating at best.
        # navcom=json.dumps({"id":0,"method":"Runtime.evaluate",
        #  "params":{"expression": "window.open('%s', #'_blank',
        # 'toolbar=1,scrollbars=1,location=1,statusbar=0,menubar=1,resizable=1'
        # )" % (url) }})Runtime.evaluate
        self.soc.send(navcom)
        return self.soc.recv()
shell = Shell(host='127.0.0.1', port=9222)  
#shell.connect(0)
#url = 'http://www.clift.org/fred' # shameless
url = 'http://example.com' # shameless
#navcom = json.dumps({"id":0, "method":"Target.createTarget", "params":{"url":url}})
#shell.soc.send(navcom)
shell.connect(0)
navcom = json.dumps({"id":0, "method":"Network.getCookies", "params":{"url":url}})
shell.soc.send(navcom)
response = json.loads(shell.soc.recv())

print(len(shell.find_tabs()))
print(shell.find_tabs()[1]["url"])
#print(shell.find_tabs()[1])
print(response)https://panel4.serv00.com/mysql/github/koldunovn/nk_public_notebooks/blob/master/Apache_log.ipynbhttps://raw.githubusercontent.com/koldunovn/nk_public_notebooks/master/Apache_log.ipynbselect * from messagesjavascript:date = new Date();
url_root = 'http://nbviewer.ipython.org/';
url = null;
gist_re = /^https?:\/\/gist\.github\.com\/(?:\w+\/)?([a-f0-9]+)$/;
github_re = /^https:\/\/(github\.com\/.*\/)blob\/(.*\.ipynb)$/;
https_re = /^https:\/\/(.*\.ipynb)$/;
http_re = /^http:\/\/(.*\.ipynb)$/;
loc = location.href;
if (gist_re.test(loc)) {
    gist = gist_re.exec(loc);
    url = url_root + gist[1];
} else if (github_re.test(loc)) {
    path = github_re.exec(loc);
    url = url_root + 'urls/raw.' + path[1] + path[2];
} else if (https_re.test(loc)) {
    path = https_re.exec(loc);
    url = url_root + 'urls/' + path[1];
} else if (http_re.test(loc)) {
    path = http_re.exec(loc);
    url = url_root + 'url/' + path[1];}
if (url) {void(window.open(url, 'nbviewer' + date.getTime()));}javascript:date = new Date();
url_root = 'http://nbviewer.ipython.org/';
url = null;
gist_re = /^https?:\/\/gist\.github\.com\/(?:\w+\/)?([a-f0-9]+)$/;
github_re = /^https:\/\/(github\.com\/.*\/)blob\/(.*\.ipynb)$/;
https_re = /^https:\/\/(.*\.ipynb)$/;
http_re = /^http:\/\/(.*\.ipynb)$/;
loc = location.href;
if (gist_re.test(loc)) {
    gist = gist_re.exec(loc);
    url = url_root + gist[1];
} else if (github_re.test(loc)) {
    path = github_re.exec(loc);
    url = url_root + 'urls/raw.' + path[1] + path[2];
} else if (https_re.test(loc)) {
    path = https_re.exec(loc);
    url = url_root + 'urls/' + path[1];
} else if (http_re.test(loc)) {
    path = http_re.exec(loc);
    url = url_root + 'url/' + path[1];}
if (url) {void(window.open(url, 'nbviewer' + date.getTime()));}display(slider)pip install jupyterlab-deckpip install jupyterlab-deckpip install jupyterlab-deckpip install jupyterlab_risepip install nbslidejupyter labextension install jupyterlab_vim{
 "nbformat": 4,
 "nbformat_minor": 2,
 "metadata": {
  "language_info": {
   "name": "python",
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "version": "3.6.8-final"
  },
  "orig_nbformat": 2,
  "file_extension": ".py",
  "mimetype": "text/x-python",
  "name": "python",
  "npconvert_exporter": "python",
  "pygments_lexer": "ipython3",
  "version": 3,
  "kernelspec": {
   "name": "python36864bitjupyterapipipenv100023b4210342f0b1028e92ab62ef71",
   "display_name": "Python 3.6.8 64-bit ('jupyter-api': pipenv)"
  }
 },
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "import datetime\n",
    "import requests\n",
    "import pandas as pd\n",
    "import inspect\n",
    "from inspect import getsourcefile\n",
    "from requests_html import HTML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename     = inspect.getframeinfo(inspect.currentframe()).filename\n",
    "BASE_DIR     = os.path.dirname(os.path.abspath(filename))\n",
    "DATA_DIR     = os.path.join(os.path.dirname(BASE_DIR), 'data')\n",
    "os.makedirs(DATA_DIR, exist_ok=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def url_to_txt(url, filename=\"world.html\", save=False):\n",
    "    r = requests.get(url)\n",
    "    if r.status_code == 200:\n",
    "        html_text = r.text\n",
    "        if save:\n",
    "            with open(f\"world-{year}.html\", 'w') as f:\n",
    "                f.write(html_text)\n",
    "        return html_text\n",
    "    return None\n",
    "\n",
    "\n",
    "def parse_and_extract(url, name='2020'):\n",
    "    html_text = url_to_txt(url)\n",
    "    if html_text == None:\n",
    "        return False\n",
    "    r_html = HTML(html=html_text)\n",
    "    table_class = \".imdb-scroll-table\"\n",
    "    # table_class = \"#table\"\n",
    "    r_table = r_html.find(table_class)\n",
    "\n",
    "    # print(r_table)\n",
    "    table_data = []\n",
    "    # table_data_dicts = []\n",
    "    header_names = []\n",
    "    if len(r_table) == 0:\n",
    "        return False\n",
    "    parsed_table = r_table[0]\n",
    "    rows = parsed_table.find(\"tr\")\n",
    "    header_row = rows[0]\n",
    "    header_cols = header_row.find('th')\n",
    "    header_names = [x.text for x in header_cols]\n",
    "    for row in rows[1:]:\n",
    "        # print(row.text)\n",
    "        cols = row.find(\"td\")\n",
    "        row_data = []\n",
    "        row_dict_data = {}\n",
    "        for i, col in enumerate(cols):\n",
    "            # print(i, col.text, '\\n\\n')\n",
    "            header_name = header_names[i]\n",
    "            # row_dict_data[header_name] = col.text\n",
    "            row_data.append(col.text)\n",
    "        # table_data_dicts.append(row_dict_data)\n",
    "        table_data.append(row_data)\n",
    "    df = pd.DataFrame(table_data, columns=header_names)\n",
    "    # df = pd.DataFrame(table_data_dicts)\n",
    "    datadir_path = DATA_DIR\n",
    "    os.makedirs(datadir_path, exist_ok=True)\n",
    "    filepath = os.path.join(datadir_path, f'{name}.csv')\n",
    "    df.to_csv(filepath, index=False)\n",
    "    return True\n",
    "\n",
    "def run(start_year=None, years_ago=0):\n",
    "    if start_year == None:\n",
    "        now = datetime.datetime.now()\n",
    "        start_year = now.year\n",
    "    assert isinstance(start_year, int)\n",
    "    assert isinstance(years_ago, int)\n",
    "    assert len(f\"{start_year}\") == 4\n",
    "    for i in range(0, years_ago+1):\n",
    "        url = f\"https://www.boxofficemojo.com/year/world/{start_year}/\"\n",
    "        finished = parse_and_extract(url, name=start_year)\n",
    "        if finished:\n",
    "            print(f\"Finished {start_year}\")\n",
    "        else:\n",
    "            print(f\"{start_year} not finished\")\n",
    "        start_year -= 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "Finished 2020\n"
    }
   ],
   "source": [
    "run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ]
}{
 "nbformat": 4,
 "nbformat_minor": 2,
 "metadata": {
  "language_info": {
   "name": "python",
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "version": "3.6.8-final"
  },
  "orig_nbformat": 2,
  "file_extension": ".py",
  "mimetype": "text/x-python",
  "name": "python",
  "npconvert_exporter": "python",
  "pygments_lexer": "ipython3",
  "version": 3,
  "kernelspec": {
   "name": "python36864bitjupyterapipipenv100023b4210342f0b1028e92ab62ef71",
   "display_name": "Python 3.6.8 64-bit ('jupyter-api': pipenv)"
  }
 },
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "import datetime\n",
    "import requests\n",
    "import pandas as pd\n",
    "import inspect\n",
    "from inspect import getsourcefile\n",
    "from requests_html import HTML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename     = inspect.getframeinfo(inspect.currentframe()).filename\n",
    "BASE_DIR     = os.path.dirname(os.path.abspath(filename))\n",
    "DATA_DIR     = os.path.join(os.path.dirname(BASE_DIR), 'data')\n",
    "os.makedirs(DATA_DIR, exist_ok=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def url_to_txt(url, filename=\"world.html\", save=False):\n",
    "    r = requests.get(url)\n",
    "    if r.status_code == 200:\n",
    "        html_text = r.text\n",
    "        if save:\n",
    "            with open(f\"world-{year}.html\", 'w') as f:\n",
    "                f.write(html_text)\n",
    "        return html_text\n",
    "    return None\n",
    "\n",
    "\n",
    "def parse_and_extract(url, name='2020'):\n",
    "    html_text = url_to_txt(url)\n",
    "    if html_text == None:\n",
    "        return False\n",
    "    r_html = HTML(html=html_text)\n",
    "    table_class = \".imdb-scroll-table\"\n",
    "    # table_class = \"#table\"\n",
    "    r_table = r_html.find(table_class)\n",
    "\n",
    "    # print(r_table)\n",
    "    table_data = []\n",
    "    # table_data_dicts = []\n",
    "    header_names = []\n",
    "    if len(r_table) == 0:\n",
    "        return False\n",
    "    parsed_table = r_table[0]\n",
    "    rows = parsed_table.find(\"tr\")\n",
    "    header_row = rows[0]\n",
    "    header_cols = header_row.find('th')\n",
    "    header_names = [x.text for x in header_cols]\n",
    "    for row in rows[1:]:\n",
    "        # print(row.text)\n",
    "        cols = row.find(\"td\")\n",
    "        row_data = []\n",
    "        row_dict_data = {}\n",
    "        for i, col in enumerate(cols):\n",
    "            # print(i, col.text, '\\n\\n')\n",
    "            header_name = header_names[i]\n",
    "            # row_dict_data[header_name] = col.text\n",
    "            row_data.append(col.text)\n",
    "        # table_data_dicts.append(row_dict_data)\n",
    "        table_data.append(row_data)\n",
    "    df = pd.DataFrame(table_data, columns=header_names)\n",
    "    # df = pd.DataFrame(table_data_dicts)\n",
    "    datadir_path = DATA_DIR\n",
    "    os.makedirs(datadir_path, exist_ok=True)\n",
    "    filepath = os.path.join(datadir_path, f'{name}.csv')\n",
    "    df.to_csv(filepath, index=False)\n",
    "    return True\n",
    "\n",
    "def run(start_year=None, years_ago=0):\n",
    "    if start_year == None:\n",
    "        now = datetime.datetime.now()\n",
    "        start_year = now.year\n",
    "    assert isinstance(start_year, int)\n",
    "    assert isinstance(years_ago, int)\n",
    "    assert len(f\"{start_year}\") == 4\n",
    "    for i in range(0, years_ago+1):\n",
    "        url = f\"https://www.boxofficemojo.com/year/world/{start_year}/\"\n",
    "        finished = parse_and_extract(url, name=start_year)\n",
    "        if finished:\n",
    "            print(f\"Finished {start_year}\")\n",
    "        else:\n",
    "            print(f\"{start_year} not finished\")\n",
    "        start_year -= 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "Finished 2020\n"
    }
   ],
   "source": [
    "run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ]
}conda env create -f environment.ymljupyter2slideshttps://github.com/hkust-dh/jupyter-slides-demo.gitjupyter<script type="text/template">pip install -r requirements.txtimport nbformat
from nbconvert.preprocessors import ExecutePreprocessor

def trigger(notebook_filename='chp-traffic.ipynb'):
    with open(notebook_filename) as f:
        nb = nbformat.read(f, as_version=4)
    ep = ExecutePreprocessor(timeout=600, kernel_name='python3')
    r = ep.preprocess(nb)
    return rpip install jupyterlab-code-foldingjupyterlab-vimfrom ipywidgets import interact, interactive, fixed, interact_manual,Layout
import ipywidgets as widgets
import subprocess

a=widgets.Textarea(

    value="echo '' | gotify push -p 1",
    placeholder='Type something',
    description='String:',
    layout=Layout(width='550px', height='200px'),
    disabled=False

)
def slow_function(x):
    cmd(x)
    return x
    #ddd='cat r.sh'
def cmd(arg):
    p = subprocess.Popen(args=arg, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    single_html =p.stdout.read().decode(encoding="utf-8", errors="strict")
    print(single_html)

def f1(y):
    cmd(y)
    return y
interact_manual(f1, y=r'echo "select * from messages order by id desc limit 3" | sqlite3 /home/pia/pdf/gotify.db;ls /home/pia/upload/gotify-2014*.db')
from ipywidgets import interact, interactive, fixed, interact_manual,Layout
import ipywidgets as widgets
import subprocess

a=widgets.Textarea(

    value="echo '' | gotify push -p 1",
    placeholder='Type something',
    description='String:',
    layout=Layout(width='550px', height='200px'),
    disabled=False

)
def slow_function(x):
    cmd(x)
    return x
    #ddd='cat r.sh'
def cmd(arg):
    p = subprocess.Popen(args=arg, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    single_html =p.stdout.read().decode(encoding="utf-8", errors="strict")
    print(single_html)

def f1(y):
    cmd(y)
    return y
interact_manual(f1, y=r'echo "select * from messages order by id desc limit 3" | sqlite3 /home/pia/pdf/gotify.db;ls /home/pia/upload/gotify-2014*.db')
9YeExykKItI-Jf2r-AHAz5eAXH3MZx3G5zs7Vj1BWPghttps://binder.curvenote.dev/https://binder.curvenote.dev/from fasthtml.common import *
from collections import deque

app, rt = fast_app(exts='ws')

# All messages here, but only most recent 15 are stored
messages = deque(maxlen=15)
users = {}

# Takes all the messages and renders them
box_style = "border: 1px solid #ccc; border-radius: 10px; padding: 10px; margin: 5px 0;"
def render_messages(messages):
    return Div(*[Div(m, style=box_style) for m in messages], id='msg-list')

# Input field is reset via hx_swap_oob after submitting a message
def mk_input(): return Input(id='msg', placeholder="Type your message", value="", hx_swap_oob="true")

@rt
def index():
    return Titled("Leave a message for others!"),Div(
        Form(mk_input(), ws_send=True), # input field
        P("Leave a message for others!"),
        Div(render_messages(messages),id='msg-list'), # All the Messages
        hx_ext='ws', ws_connect='ws') # Use a web socket 

def on_connect(ws, send): users[id(ws)] = send
def on_disconnect(ws):users.pop(id(ws),None)

@app.ws('/ws', conn=on_connect, disconn=on_disconnect)
async def ws(msg:str,send):
    await send(mk_input()) # reset the input field immediately
    messages.appendleft(msg) # New messages first
    for u in users.values(): # Get `send` function for a user
        await u(render_messages(messages)) # Send the message to that user

serve()from fasthtml.common import *
from collections import deque

app, rt = fast_app(exts='ws')

# All messages here, but only most recent 15 are stored
messages = deque(maxlen=15)
users = {}

# Takes all the messages and renders them
box_style = "border: 1px solid #ccc; border-radius: 10px; padding: 10px; margin: 5px 0;"
def render_messages(messages):
    return Div(*[Div(m, style=box_style) for m in messages], id='msg-list')

# Input field is reset via hx_swap_oob after submitting a message
def mk_input(): return Input(id='msg', placeholder="Type your message", value="", hx_swap_oob="true")

@rt
def index():
    return Titled("Leave a message for others!"),Div(
        Form(mk_input(), ws_send=True), # input field
        P("Leave a message for others!"),
        Div(render_messages(messages),id='msg-list'), # All the Messages
        hx_ext='ws', ws_connect='ws') # Use a web socket 

def on_connect(ws, send): users[id(ws)] = send
def on_disconnect(ws):users.pop(id(ws),None)

@app.ws('/ws', conn=on_connect, disconn=on_disconnect)
async def ws(msg:str,send):
    await send(mk_input()) # reset the input field immediately
    messages.appendleft(msg) # New messages first
    for u in users.values(): # Get `send` function for a user
        await u(render_messages(messages)) # Send the message to that user

serve()--no-use-pep517--no-use-pep517conda create -n binderhub-in-a-box -f environment.ymlTypeError: unsupported operand type(s) for |: 'type' and 'type'import socket

def main():
    # 创建一个TCP套接字
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    # 绑定IP地址和端口
    server_socket.bind(('127.0.0.1', 12346))

    # 监听连接
    server_socket.listen(5)

    print("服务器已启动，等待客户端连接...")

    while True:
        # 接受客户端连接
        client_socket, client_address = server_socket.accept()
        print(f"客户端{client_address}已连接")

        # 接收客户端发送的数据
        data = client_socket.recv(1024)
        print(f"收到来自{client_address}的数据： {data.decode('utf-8')}")

        # 将接收到的数据发送回客户端
        client_socket.send(data)
        print(f"已将数据发送回{client_address}")

        # 关闭客户端套接字
        client_socket.close()
        print(f"客户端{client_address}已断开连接")

if __name__ == "__main__":
    main()loop = asyncio.get_event_loop()const WebSocket = require('ws');

// 替换为你的 WebSocket 服务器地址
const socket = new WebSocket("ws://10.10.49.172:8765");

// 监听连接打开事件
socket.addEventListener("open", (event) => {
    console.log("WebSocket connection opened.");

    // 构造二进制数据，这里使用一个简单的示例
    const binaryData = new Uint8Array([49, 50, 51, 52]);

    // 发送二进制数据
    socket.send(binaryData);

    console.log("Binary data sent successfully.");
});

// 监听接收消息事件
socket.addEventListener("message", (event) => {
    console.log("Received message:", event.data);
});

// 监听连接关闭事件
socket.addEventListener("close", (event) => {
    console.log("WebSocket connection closed.");
});

// 监听错误事件
socket.addEventListener("error", (event) => {
    console.error("WebSocket error:", event);
});websocket<!DOCTYPE html>
<pre id="log"></pre>
<script>
  // helper function: log message to screen
  function log(msg) {
    document.getElementById('log').textContent += msg + '\n';
  }

  // setup websocket with callbacks
  var ws = new WebSocket('ws://localhost:8080/');
  ws.onopen = function() {
    log('CONNECT');
  };
  ws.onclose = function() {
    log('DISCONNECT');
  };
  ws.onmessage = function(event) {
    log('MESSAGE: ' + event.data);
  };
</script><script src="https://res.zvo.cn/websocket.js/websocket.js"></script>

/*
websocket.connect({
	url:'ws://localhost:8081/', //服务端的WebSocket地址
	onopen:function(){ //如果不需要，此不传即可。
		websocket.send({"type":"CONNECT","token":"123456"}); //当WebSocket通道连接成功后，自动给服务器发送一条json格式的消息
	},
	onmessage:function(message){ //如果不需要，此不传即可
		//console.log(message); //服务端发送来的消息会在这里接收到
		document.getElementById('showMessage').innerHTML = JSON.stringify(message) + '<br/>' + document.getElementById('showMessage').innerHTML;
	}
});
*/
</script><script src="https://res.zvo.cn/websocket.js/websocket.js"></script>

/*
websocket.connect({
	url:'ws://localhost:8081/', //服务端的WebSocket地址
	onopen:function(){ //如果不需要，此不传即可。
		websocket.send({"type":"CONNECT","token":"123456"}); //当WebSocket通道连接成功后，自动给服务器发送一条json格式的消息
	},
	onmessage:function(message){ //如果不需要，此不传即可
		//console.log(message); //服务端发送来的消息会在这里接收到
		document.getElementById('showMessage').innerHTML = JSON.stringify(message) + '<br/>' + document.getElementById('showMessage').innerHTML;
	}
});
*/
</script> ./websocketd --port=8765 ./count.shpip install --upgrade jinja2<!DOCTYPE HTML>
<html>
<head>
    <title>Flask-SocketIO Test</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js" integrity="sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/3.0.4/socket.io.js" integrity="sha512-aMGMvNYu8Ue4G+fHa359jcPb1u+ytAF+P2SCb+PxrjCdO3n3ZTxJ30zuH39rimUggmTwmh2u7wvQsDTHESnmfQ==" crossorigin="anonymous"></script>
    <script type="text/javascript" charset="utf-8">
        $(document).ready(function() {
            // Connect to the Socket.IO server.
            // The connection URL has the following format, relative to the current page:
            //     http[s]://<domain>:<port>[/<namespace>]
            var socket = io.connect('http://' + document.domain + ':' + location.port);

            // Event handler for new connections.
            // The callback function is invoked when a connection with the
            // server is established.
            socket.on('connect', function() {
                socket.emit('my_event', {data: 'I\'m connected!'});
            });

            // Event handler for server sent data.
            // The callback function is invoked whenever the server emits data
            // to the client. The data is then displayed in the "Received"
            // section of the page.
            socket.on('my_response', function(msg, cb) {
                $('#log').append('<br>' + $('<div/>').text('Received #' + msg.count + ': ' + msg.data).html());
                if (cb)
                    cb();
            });

            // Interval function that tests message latency by sending a "ping"
            // message. The server then responds with a "pong" message and the
            // round trip time is measured.
            var ping_pong_times = [];
            var start_time;
            window.setInterval(function() {
                start_time = (new Date).getTime();
                $('#transport').text(socket.io.engine.transport.name);
                socket.emit('my_ping');
            }, 1000);

            // Handler for the "pong" message. When the pong is received, the
            // time from the ping is stored, and the average of the last 30
            // samples is average and displayed.
            socket.on('my_pong', function() {
                var latency = (new Date).getTime() - start_time;
                ping_pong_times.push(latency);
                ping_pong_times = ping_pong_times.slice(-30); // keep last 30 samples
                var sum = 0;
                for (var i = 0; i < ping_pong_times.length; i++)
                    sum += ping_pong_times[i];
                $('#ping-pong').text(Math.round(10 * sum / ping_pong_times.length) / 10);
            });

            // Handlers for the different forms in the page.
            // These accept data from the user and send it to the server in a
            // variety of ways
            $('form#emit').submit(function(event) {
                socket.emit('my_event', {data: $('#emit_data').val()});
                return false;
            });
            $('form#broadcast').submit(function(event) {
                socket.emit('my_broadcast_event', {data: $('#broadcast_data').val()});
                return false;
            });
            $('form#join').submit(function(event) {
                socket.emit('join', {room: $('#join_room').val()});
                return false;
            });
            $('form#leave').submit(function(event) {
                socket.emit('leave', {room: $('#leave_room').val()});
                return false;
            });
            $('form#send_room').submit(function(event) {
                socket.emit('my_room_event', {room: $('#room_name').val(), data: $('#room_data').val()});
                return false;
            });
            $('form#close').submit(function(event) {
                socket.emit('close_room', {room: $('#close_room').val()});
                return false;
            });
            $('form#disconnect').submit(function(event) {
                socket.emit('disconnect_request');
                return false;
            });
        });
    </script>
</head>
<body>
    <h1>Flask-SocketIO Test</h1>
    <p>
      Async mode is: <b>{{ async_mode }}</b><br>
      Current transport is: <b><span id="transport"></span></b><br>
      Average ping/pong latency: <b><span id="ping-pong"></span>ms</b>
    </p>
    <h2>Send:</h2>
    <form id="emit" method="POST" action='#'>
        <input type="text" name="emit_data" id="emit_data" placeholder="Message">
        <input type="submit" value="Echo">
    </form>
    <form id="broadcast" method="POST" action='#'>
        <input type="text" name="broadcast_data" id="broadcast_data" placeholder="Message">
        <input type="submit" value="Broadcast">
    </form>
    <form id="join" method="POST" action='#'>
        <input type="text" name="join_room" id="join_room" placeholder="Room Name">
        <input type="submit" value="Join Room">
    </form>
    <form id="leave" method="POST" action='#'>
        <input type="text" name="leave_room" id="leave_room" placeholder="Room Name">
        <input type="submit" value="Leave Room">
    </form>
    <form id="send_room" method="POST" action='#'>
        <input type="text" name="room_name" id="room_name" placeholder="Room Name">
        <input type="text" name="room_data" id="room_data" placeholder="Message">
        <input type="submit" value="Send to Room">
    </form>
    <form id="close" method="POST" action="#">
        <input type="text" name="close_room" id="close_room" placeholder="Room Name">
        <input type="submit" value="Close Room">
    </form>
    <form id="disconnect" method="POST" action="#">
        <input type="submit" value="Disconnect">
    </form>
    <h2>Receive:</h2>
    <div id="log"></div>
</body>
</html>from threading import Lock
from flask import Flask, render_template, session, request, copy_current_request_context
from flask_socketio import SocketIO, emit, join_room, leave_room, close_room, rooms, disconnect

# Set this variable to "threading", "eventlet" or "gevent" to test the
# different async modes, or leave it set to None for the application to choose
# the best option based on installed packages.
async_mode = None

app = Flask(__name__)
app.config['SECRET_KEY'] = 'secret!'
socketio = SocketIO(app, async_mode=async_mode)
thread = None
thread_lock = Lock()


def background_thread():
    """Example of how to send server generated events to clients."""
    count = 0
    while True:
        socketio.sleep(10)
        count += 1
        socketio.emit('my_response',
                      {'data': 'Server generated event', 'count': count})


@app.route('/')
def index():
    return render_template('index.html', async_mode=socketio.async_mode)


@socketio.event
def my_event(message):
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response',
         {'data': message['data'], 'count': session['receive_count']})


@socketio.event
def my_broadcast_event(message):
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response',
         {'data': message['data'], 'count': session['receive_count']},
         broadcast=True)


@socketio.event
def join(message):
    join_room(message['room'])
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response',
         {'data': 'In rooms: ' + ', '.join(rooms()),
          'count': session['receive_count']})


@socketio.event
def leave(message):
    leave_room(message['room'])
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response',
         {'data': 'In rooms: ' + ', '.join(rooms()),
          'count': session['receive_count']})


@socketio.on('close_room')
def on_close_room(message):
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response', {'data': 'Room ' + message['room'] + ' is closing.',
                         'count': session['receive_count']},
         to=message['room'])
    close_room(message['room'])


@socketio.event
def my_room_event(message):
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response',
         {'data': message['data'], 'count': session['receive_count']},
         to=message['room'])


@socketio.event
def disconnect_request():
    @copy_current_request_context
    def can_disconnect():
        disconnect()
    session['receive_count'] = session.get('receive_count', 0) + 1
    # for this emit we use a callback function
    # when the callback function is invoked we know that the message has been
    # received and it is safe to disconnect
    emit('my_response',
         {'data': 'Disconnected!', 'count': session['receive_count']},
         callback=can_disconnect)


@socketio.event
def my_ping():
    emit('my_pong')


@socketio.event
def connect():
    global thread
    with thread_lock:
        if thread is None:
            thread = socketio.start_background_task(background_thread)
    emit('my_response', {'data': 'Connected', 'count': 0})


@socketio.on('disconnect')
def test_disconnect():
    print('Client disconnected', request.sid)


if __name__ == '__main__':
    socketio.run(app, host='0.0.0.0', debug=True)
send-receive.sh<!DOCTYPE html>
<pre id="log"></pre>
<script>
  // helper function: log message to screen
  function log(msg) {
    document.getElementById('log').textContent += msg + '\n';
  }

  // setup websocket with callbacks
  var ws = new WebSocket('ws://localhost:8080/');
  ws.onopen = function() {
    log('CONNECT');
  };
  ws.onclose = function() {
    log('DISCONNECT');
  };
  ws.onmessage = function(event) {
    log('MESSAGE: ' + event.data);
  };
</script>echo $REPLYecho $REPLYhttp://45.32.200.249:1234/count.sh# Then access http://localhost:1234/dump-env.sh
#You can also test the command files by running from the command line.www.example.com/socketserverTypeError: WS_Server.echo() missing 1 required positional argument: 'path'npm install -g json-socket-serverimport requests

js_code = """
(function(){
    console.log("test")
    return "执行成功"
})()
"""

url = "http://localhost:12080/execjs"
data = {
    "group": "zzz",
    "code": js_code
}
res = requests.post(url, data=data)
print(res.text)https://kkgithub.com/sixgad/py-jsrpc.gitfunction JsClient(wsURL) {
    this.wsURL = wsURL;
    this.handlers = {};
    this.socket = {};
    if (!wsURL) {
        throw new Error('wsURL can not be empty!!')
    }
    this.webSocketFactory = this.resolveWebSocketFactory();
    this.connect()
}

JsClient.prototype.resolveWebSocketFactory = function () {
    if (typeof window === 'object') {
        var theWebSocket = window.WebSocket ? window.WebSocket : window.MozWebSocket;
        return function (wsURL) {

            function WindowWebSocketWrapper(wsURL) {
                this.mSocket = new theWebSocket(wsURL);
            }

            WindowWebSocketWrapper.prototype.close = function () {
                this.mSocket.close();
            };

            WindowWebSocketWrapper.prototype.onmessage = function (onMessageFunction) {
                this.mSocket.onmessage = onMessageFunction;
            };

            WindowWebSocketWrapper.prototype.onopen = function (onOpenFunction) {
                this.mSocket.onopen = onOpenFunction;
            };
            WindowWebSocketWrapper.prototype.onclose = function (onCloseFunction) {
                this.mSocket.onclose = onCloseFunction;
            };

            WindowWebSocketWrapper.prototype.send = function (message) {
                this.mSocket.send(message);
            };

            return new WindowWebSocketWrapper(wsURL);
        }
    }
    if (typeof weex === 'object') {
        try {
            console.log("test webSocket for weex");
            var ws = weex.requireModule('webSocket');
            console.log("find webSocket for weex:" + ws);
            return function (wsURL) {
                try {
                    ws.close();
                } catch (e) {
                }
                ws.WebSocket(wsURL, '');
                return ws;
            }
        } catch (e) {
            console.log(e);
        }
    }
    if (typeof WebSocket === 'object') {
        return function (wsURL) {
            return new theWebSocket(wsURL);
        }
    }
    throw new Error("the js environment do not support websocket");
};

JsClient.prototype.connect = function () {
    console.log('jsclient begin of connect to wsURL: ' + this.wsURL);
    var _this = this;
    try {
        this.socket = this.webSocketFactory(this.wsURL);
    } catch (e) {
        console.log("jsclient create connection failed,reconnect after 2s");
        setTimeout(function () {
            _this.connect()
        }, 2000)
    }

    this.socket.onmessage(function (event) {
        _this.handleJsClientRequest(event.data)
    });

    this.socket.onopen(function (event) {
        console.log('jsclient open a connection')
    });

    this.socket.onclose(function (event) {
        console.log('jsclient disconnected ,reconnection after 2s');
        setTimeout(function () {
            _this.connect()
        }, 2000)
    });
};

JsClient.prototype.handleJsClientRequest = function (requestJson) {
    console.log("receive request: " + requestJson);
    var request = JSON.parse(requestJson);
    var seq = request['__uuid_seq__'];

    if (!request['action']) {
        this.sendFailed(seq, 'need request param {action}');
        return
    }
    var action = request['action'];
    if (!this.handlers[action]) {
        this.sendFailed(seq, 'no action handler: ' + action + ' defined');
        return
    }

    var theHandler = this.handlers[action];
    var _this = this;
    try {
        theHandler(request, function (response) {
            try {
                _this.sendSuccess(seq, response)
            } catch (e) {
                _this.sendFailed(seq, "e:" + e);
            }
        }, function (errorMessage) {
            _this.sendFailed(seq, errorMessage)
        })
    } catch (e) {
        console.log("error: " + e);
        _this.sendFailed(seq, ":" + e);
    }
};

JsClient.prototype.sendSuccess = function (seq, response) {
    var responseJson;
    if (typeof response == 'string') {
        try {
            responseJson = JSON.parse(response);
        } catch (e) {
            responseJson = {};
            responseJson['data'] = response;
        }
    } else if (typeof response == 'object') {
        responseJson = response;
    } else {
        responseJson = {};
        responseJson['data'] = response;
    }

    if (Array.isArray(responseJson)) {
        responseJson = {
            data: responseJson,
            code: 0
        }
    }

    if (responseJson['code']) {
        responseJson['code'] = 0;
    } else if (responseJson['status']) {
        responseJson['status'] = 0;
    } else {
        responseJson['status'] = 0;
    }
    responseJson['__uuid_seq__'] = seq;
    var responseText = JSON.stringify(responseJson);
    console.log("response :" + responseText);
    this.socket.send(responseText);
};

JsClient.prototype.sendFailed = function (seq, errorMessage) {
    if (typeof errorMessage != 'string') {
        errorMessage = JSON.stringify(errorMessage);
    }
    var responseJson = {};
    responseJson['message'] = errorMessage;
    responseJson['status'] = -1;
    responseJson['__uuid_seq__'] = seq;
    var responseText = JSON.stringify(responseJson);
    console.log("jsclient response :" + responseText);
    this.socket.send(responseText)
};

JsClient.prototype.registerAction = function (action, handler) {
    if (typeof action !== 'string') {
        throw new Error("an action must be string");
    }
    if (typeof handler !== 'function') {
        throw new Error("a handler must be function");
    }
    console.log("jsclient register action: " + action);
    this.handlers[action] = handler;
    return this;
};
function guid() {
    function S4() {
        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
    }
    return (S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4() + S4());
}# -*- coding: utf-8 -*-
# @Time   : 2021/7/13 21:18
# @Author : zp
# @Python3.7
import asyncio
import websockets
import json
from loguru import logger
from sanic import Sanic, response
import threading
from back_socket_server import ws_run

app = Sanic(__name__)


@app.route('/send', methods=['GET'])
async def get_request(request):
    # http://127.0.0.1:5000/send?group=ws-group&action=clientTime
    args_dic = {}
    for params in request.query_args:
        args_dic[params[0]] = str(params[1])
    if "action" not in args_dic:
        return response.json({"error": "need action"})
    group = args_dic.pop('group')
    async with websockets.connect(f'ws://localhost:6789/invoke?group={group}') as websocket:
        await websocket.send(json.dumps(args_dic))
        res = await websocket.recv()
        logger.info(res)
    return response.json(json.loads(res))


if __name__ == '__main__':
    app.add_task(ws_run())
    app.run(debug=False, host="127.0.0.1", port=5000)@app.main_process_startapp.add_task(ws_run()) gotify push -p 1 ""  | gotify push -p 1var aaa=" gotify push  -t " + "title:" + "'" + encodeURI(document.title)+"'" +" -p 1 " + document.URL
//alert(aaa)
window.open('http://45.32.200.249:8060/ddd?url=ddd&ddd='+aaa)var aaa=" gotify push  -t " + "title:" + "'" + encodeURI(document.title)+"'" +" -p 1 " + document.URL
//alert(aaa)
window.open('http://45.32.200.249:8060/ddd?url=ddd&ddd='+aaa)var aaa=" gotify push  -t " + "title:" + "'" + encodeURI(document.title)+"'" +" -p 1 " + document.URL
//alert(aaa)
window.open('http://45.32.200.249:8060/ddd?url=ddd&ddd='+aaa)function SekiroClient(e){if(this.wsURL=e,this.handlers={},this.socket={},!e)throw new Error("wsURL can not be empty!!");this.webSocketFactory=this.resolveWebSocketFactory(),this.connect()}SekiroClient.prototype.resolveWebSocketFactory=function(){if("object"==typeof window){var e=window.WebSocket?window.WebSocket:window.MozWebSocket;return function(o){function t(o){this.mSocket=new e(o)}return t.prototype.close=function(){this.mSocket.close()},t.prototype.onmessage=function(e){this.mSocket.onmessage=e},t.prototype.onopen=function(e){this.mSocket.onopen=e},t.prototype.onclose=function(e){this.mSocket.onclose=e},t.prototype.send=function(e){this.mSocket.send(e)},new t(o)}}if("object"==typeof weex)try{console.log("test webSocket for weex");var o=weex.requireModule("webSocket");return console.log("find webSocket for weex:"+o),function(e){try{o.close()}catch(e){}return o.WebSocket(e,""),o}}catch(e){console.log(e)}if("object"==typeof WebSocket)return function(o){return new e(o)};throw new Error("the js environment do not support websocket")},SekiroClient.prototype.connect=function(){console.log("sekiro: begin of connect to wsURL: "+this.wsURL);var e=this;try{this.socket=this.webSocketFactory(this.wsURL)}catch(o){return console.log("sekiro: create connection failed,reconnect after 2s:"+o),void setTimeout(function(){e.connect()},2e3)}this.socket.onmessage(function(o){e.handleSekiroRequest(o.data)}),this.socket.onopen(function(e){console.log("sekiro: open a sekiro client connection")}),this.socket.onclose(function(o){console.log("sekiro: disconnected ,reconnection after 2s"),setTimeout(function(){e.connect()},2e3)})},SekiroClient.prototype.handleSekiroRequest=function(e){console.log("receive sekiro request: "+e);var o=JSON.parse(e),t=o.__sekiro_seq__;if(o.action){var n=o.action;if(this.handlers[n]){var s=this.handlers[n],i=this;try{s(o,function(e){try{i.sendSuccess(t,e)}catch(e){i.sendFailed(t,"e:"+e)}},function(e){i.sendFailed(t,e)})}catch(e){console.log("error: "+e),i.sendFailed(t,":"+e)}}else this.sendFailed(t,"no action handler: "+n+" defined")}else this.sendFailed(t,"need request param {action}")},SekiroClient.prototype.sendSuccess=function(e,o){var t;if("string"==typeof o)try{t=JSON.parse(o)}catch(e){(t={}).data=o}else"object"==typeof o?t=o:(t={}).data=o;(Array.isArray(t)||"string"==typeof t)&&(t={data:t,code:0}),t.code?t.code=0:(t.status,t.status=0),t.__sekiro_seq__=e;var n=JSON.stringify(t);console.log("response :"+n),this.socket.send(n)},SekiroClient.prototype.sendFailed=function(e,o){"string"!=typeof o&&(o=JSON.stringify(o));var t={};t.message=o,t.status=-1,t.__sekiro_seq__=e;var n=JSON.stringify(t);console.log("sekiro: response :"+n),this.socket.send(n)},SekiroClient.prototype.registerAction=function(e,o){if("string"!=typeof e)throw new Error("an action must be string");if("function"!=typeof o)throw new Error("a handler must be function");return console.log("sekiro: register action: "+e),this.handlers[e]=o,this};
var client = new SekiroClient("wss://sekiro.iinti.cn:5612/business/register?group=test_web&clientId=" + Math.random());
client.registerAction("testAction", function (request, resolve, reject) {
    resolve("ok");
});function SekiroClient(e){if(this.wsURL=e,this.handlers={},this.socket={},!e)throw new Error("wsURL can not be empty!!");this.webSocketFactory=this.resolveWebSocketFactory(),this.connect()}SekiroClient.prototype.resolveWebSocketFactory=function(){if("object"==typeof window){var e=window.WebSocket?window.WebSocket:window.MozWebSocket;return function(o){function t(o){this.mSocket=new e(o)}return t.prototype.close=function(){this.mSocket.close()},t.prototype.onmessage=function(e){this.mSocket.onmessage=e},t.prototype.onopen=function(e){this.mSocket.onopen=e},t.prototype.onclose=function(e){this.mSocket.onclose=e},t.prototype.send=function(e){this.mSocket.send(e)},new t(o)}}if("object"==typeof weex)try{console.log("test webSocket for weex");var o=weex.requireModule("webSocket");return console.log("find webSocket for weex:"+o),function(e){try{o.close()}catch(e){}return o.WebSocket(e,""),o}}catch(e){console.log(e)}if("object"==typeof WebSocket)return function(o){return new e(o)};throw new Error("the js environment do not support websocket")},SekiroClient.prototype.connect=function(){console.log("sekiro: begin of connect to wsURL: "+this.wsURL);var e=this;try{this.socket=this.webSocketFactory(this.wsURL)}catch(o){return console.log("sekiro: create connection failed,reconnect after 2s:"+o),void setTimeout(function(){e.connect()},2e3)}this.socket.onmessage(function(o){e.handleSekiroRequest(o.data)}),this.socket.onopen(function(e){console.log("sekiro: open a sekiro client connection")}),this.socket.onclose(function(o){console.log("sekiro: disconnected ,reconnection after 2s"),setTimeout(function(){e.connect()},2e3)})},SekiroClient.prototype.handleSekiroRequest=function(e){console.log("receive sekiro request: "+e);var o=JSON.parse(e),t=o.__sekiro_seq__;if(o.action){var n=o.action;if(this.handlers[n]){var s=this.handlers[n],i=this;try{s(o,function(e){try{i.sendSuccess(t,e)}catch(e){i.sendFailed(t,"e:"+e)}},function(e){i.sendFailed(t,e)})}catch(e){console.log("error: "+e),i.sendFailed(t,":"+e)}}else this.sendFailed(t,"no action handler: "+n+" defined")}else this.sendFailed(t,"need request param {action}")},SekiroClient.prototype.sendSuccess=function(e,o){var t;if("string"==typeof o)try{t=JSON.parse(o)}catch(e){(t={}).data=o}else"object"==typeof o?t=o:(t={}).data=o;(Array.isArray(t)||"string"==typeof t)&&(t={data:t,code:0}),t.code?t.code=0:(t.status,t.status=0),t.__sekiro_seq__=e;var n=JSON.stringify(t);console.log("response :"+n),this.socket.send(n)},SekiroClient.prototype.sendFailed=function(e,o){"string"!=typeof o&&(o=JSON.stringify(o));var t={};t.message=o,t.status=-1,t.__sekiro_seq__=e;var n=JSON.stringify(t);console.log("sekiro: response :"+n),this.socket.send(n)},SekiroClient.prototype.registerAction=function(e,o){if("string"!=typeof e)throw new Error("an action must be string");if("function"!=typeof o)throw new Error("a handler must be function");return console.log("sekiro: register action: "+e),this.handlers[e]=o,this};
var client = new SekiroClient("wss://sekiro.iinti.cn:5612/business/register?group=test_web&clientId=" + Math.random());
client.registerAction("testAction", function (request, resolve, reject) {
    resolve("ok");
});function SekiroClient(e){if(this.wsURL=e,this.handlers={},this.socket={},!e)throw new Error("wsURL can not be empty!!");this.webSocketFactory=this.resolveWebSocketFactory(),this.connect()}SekiroClient.prototype.resolveWebSocketFactory=function(){if("object"==typeof window){var e=window.WebSocket?window.WebSocket:window.MozWebSocket;return function(o){function t(o){this.mSocket=new e(o)}return t.prototype.close=function(){this.mSocket.close()},t.prototype.onmessage=function(e){this.mSocket.onmessage=e},t.prototype.onopen=function(e){this.mSocket.onopen=e},t.prototype.onclose=function(e){this.mSocket.onclose=e},t.prototype.send=function(e){this.mSocket.send(e)},new t(o)}}if("object"==typeof weex)try{console.log("test webSocket for weex");var o=weex.requireModule("webSocket");return console.log("find webSocket for weex:"+o),function(e){try{o.close()}catch(e){}return o.WebSocket(e,""),o}}catch(e){console.log(e)}if("object"==typeof WebSocket)return function(o){return new e(o)};throw new Error("the js environment do not support websocket")},SekiroClient.prototype.connect=function(){console.log("sekiro: begin of connect to wsURL: "+this.wsURL);var e=this;try{this.socket=this.webSocketFactory(this.wsURL)}catch(o){return console.log("sekiro: create connection failed,reconnect after 2s:"+o),void setTimeout(function(){e.connect()},2e3)}this.socket.onmessage(function(o){e.handleSekiroRequest(o.data)}),this.socket.onopen(function(e){console.log("sekiro: open a sekiro client connection")}),this.socket.onclose(function(o){console.log("sekiro: disconnected ,reconnection after 2s"),setTimeout(function(){e.connect()},2e3)})},SekiroClient.prototype.handleSekiroRequest=function(e){console.log("receive sekiro request: "+e);var o=JSON.parse(e),t=o.__sekiro_seq__;if(o.action){var n=o.action;if(this.handlers[n]){var s=this.handlers[n],i=this;try{s(o,function(e){try{i.sendSuccess(t,e)}catch(e){i.sendFailed(t,"e:"+e)}},function(e){i.sendFailed(t,e)})}catch(e){console.log("error: "+e),i.sendFailed(t,":"+e)}}else this.sendFailed(t,"no action handler: "+n+" defined")}else this.sendFailed(t,"need request param {action}")},SekiroClient.prototype.sendSuccess=function(e,o){var t;if("string"==typeof o)try{t=JSON.parse(o)}catch(e){(t={}).data=o}else"object"==typeof o?t=o:(t={}).data=o;(Array.isArray(t)||"string"==typeof t)&&(t={data:t,code:0}),t.code?t.code=0:(t.status,t.status=0),t.__sekiro_seq__=e;var n=JSON.stringify(t);console.log("response :"+n),this.socket.send(n)},SekiroClient.prototype.sendFailed=function(e,o){"string"!=typeof o&&(o=JSON.stringify(o));var t={};t.message=o,t.status=-1,t.__sekiro_seq__=e;var n=JSON.stringify(t);console.log("sekiro: response :"+n),this.socket.send(n)},SekiroClient.prototype.registerAction=function(e,o){if("string"!=typeof e)throw new Error("an action must be string");if("function"!=typeof o)throw new Error("a handler must be function");return console.log("sekiro: register action: "+e),this.handlers[e]=o,this};
var client = new SekiroClient("wss://sekiro.iinti.cn:5612/business/register?group=test_web&clientId=" + Math.random());
client.registerAction("testAction", function (request, resolve, reject) {
    resolve("ok");
});from ipywidgets import interact, interactive, fixed, interact_manual,Layout
import ipywidgets as widgets
import subprocess

a=widgets.Textarea(
    value="echo '' | gotify push -p 1",
    placeholder='Type something',
    description='String:',
    layout=Layout(width='550px', height='200px'),
    disabled=False
)
def slow_function(x):
    cmd(x)
    return x
    #ddd='cat r.sh'
def cmd(arg):
    p = subprocess.Popen(args=arg, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    single_html =p.stdout.read().decode(encoding="utf-8", errors="strict")
    print(single_html)

def f1(y):
    cmd(y)
    return y
interact_manual(f1, y=r'echo "select * from messages order by id desc limit 3" | sqlite3 /home/pia/pdf/gotify.db;ls /home/pia/upload/gotify* -lh;docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db;');
interact_manual(f1, y=r'docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db')
#y.close()!docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db -`date +%Y-%m-%d`.db
#interact_manual(slow_function,x='echo "" | gotify push -p 1  ');
interact_manual(slow_function,x=a);
#interact_manual(slow_function,a);from ipywidgets import interact, interactive, fixed, interact_manual,Layout
import ipywidgets as widgets
import subprocess

a=widgets.Textarea(
    value="echo '' | gotify push -p 1",
    placeholder='Type something',
    description='String:',
    layout=Layout(width='550px', height='200px'),
    disabled=False
)
def slow_function(x):
    cmd(x)
    return x
    #ddd='cat r.sh'
def cmd(arg):
    p = subprocess.Popen(args=arg, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    single_html =p.stdout.read().decode(encoding="utf-8", errors="strict")
    print(single_html)

def f1(y):
    cmd(y)
    return y
interact_manual(f1, y=r'echo "select * from messages order by id desc limit 3" | sqlite3 /home/pia/pdf/gotify.db;ls /home/pia/upload/gotify* -lh;docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db;');
interact_manual(f1, y=r'docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db')
#y.close()!docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db -`date +%Y-%m-%d`.db
#interact_manual(slow_function,x='echo "" | gotify push -p 1  ');
interact_manual(slow_function,x=a);
#interact_manual(slow_function,a);from ipywidgets import interact, interactive, fixed, interact_manual,Layout
import ipywidgets as widgets
import subprocess

a=widgets.Textarea(
    value="echo '' | gotify push -p 1",
    placeholder='Type something',
    description='String:',
    layout=Layout(width='550px', height='200px'),
    disabled=False
)
def slow_function(x):
    cmd(x)
    return x
    #ddd='cat r.sh'
def cmd(arg):
    p = subprocess.Popen(args=arg, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    single_html =p.stdout.read().decode(encoding="utf-8", errors="strict")
    print(single_html)

def f1(y):
    cmd(y)
    return y
interact_manual(f1, y=r'echo "select * from messages order by id desc limit 3" | sqlite3 /home/pia/pdf/gotify.db;ls /home/pia/upload/gotify* -lh;docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db;');
interact_manual(f1, y=r'docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db')
#y.close()!docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db -`date +%Y-%m-%d`.db
#interact_manual(slow_function,x='echo "" | gotify push -p 1  ');
interact_manual(slow_function,x=a);
#interact_manual(slow_function,a);from ipywidgets import interact, interactive, fixed, interact_manual,Layout
import ipywidgets as widgets
import subprocess

a=widgets.Textarea(
    value="echo '' | gotify push -p 1",
    placeholder='Type something',
    description='String:',
    layout=Layout(width='550px', height='200px'),
    disabled=False
)
def slow_function(x):
    cmd(x)
    return x
    #ddd='cat r.sh'
def cmd(arg):
    p = subprocess.Popen(args=arg, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    single_html =p.stdout.read().decode(encoding="utf-8", errors="strict")
    print(single_html)

def f1(y):
    cmd(y)
    return y
interact_manual(f1, y=r'echo "select * from messages order by id desc limit 3" | sqlite3 /home/pia/pdf/gotify.db;ls /home/pia/upload/gotify* -lh;docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db;');
interact_manual(f1, y=r'docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db')
#y.close()!docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db -`date +%Y-%m-%d`.db
#interact_manual(slow_function,x='echo "" | gotify push -p 1  ');
interact_manual(slow_function,x=a);
#interact_manual(slow_function,a);https://kkgithub.com/aluzzardi/wsshhttps://kkgithub.com/aluzzardi/wsshwebsocat ws://ws.vi-server.org/mirror/https://github.com/wijnen/python-websocketd/tree/master/example/htmlnp.array(mask, dtype = np.int8--port=8080 sh -c 'sh 2>&1'--port=8080 sh -c 'sh 2>&1'tall a little extension to allow access to Chttps://pagespy.jikejishu.com/#/devtools?address=aec89720-14e2-4f80-80a4-166ec1fcb45e.localhttps://pagespy.jikejishu.com/#/devtools?address=e546e926-3e80-449c-860e-c320e0503fc2.localaa=interact(f, x='Hi there!');single_htmlinteract_manual(slow_function,i=FloatSlider(min=1e5, max=1e7, step=1e5));""""""layout=Layout(width='50%', height='80px')[Jupyter Notebook Viewer](https://nbviewer.org/github/koldunovn/nk_public_notebooks/blob/master/Apache_log.ipynb)4、13个对前端开发有用的 Chrome 插件（英文）



本文介绍13个用于前端开发的 Chrome 插件。https://jsdevspace.substack.com/p/13-super-useful-chrome-plugins-for1、Presenterm



将 Markdown 文件转成幻灯片，在命令行播放的开源工具。（@lengyijun 投稿）8、OpenAuth



网页登录的第三方认证的集成库。9、Schemio



基于 Web 的示意图可视化编辑器。10、Buzee



一个桌面软件，提供本地文件的全文搜索（包括图片里面的文字），支持 Windows 和 Mac。6、浏览器的人脸检测能力（英文）



Chrome 浏览器已经支持 Shape Detection API，直接调用这个 API，不用加载任何外部库，就可以通过浏览器识别人脸和二维码。https://learnbyexample.github.io/atom.xml5、ffmpeg.wasm

ffmpeg 库的 wasm 移植，使得 Node.js 可以用这个库编辑视频。、PageSpeed Insights



谷歌官方的网页性能的在线评分工具。2、HTTP Toolkit

这个工具可以拦截和查看 HTTP/HTTPS 请求，并且可以 mock 服务器的回应。3、imgproxy

一个 Go 语言写的图片代理网关，可以代理远程图片，并且提供格式转换和大小缩放功能。8、Slouch stoppah

一个在线小工具，通过电脑摄像头，判断坐在屏幕前面的人的坐姿是否正确。javascript:(function () { var script = document.createElement('script'); script.src="https://cdn.jsdelivr.net/npm/eruda"; document.body.append(script); script.onload = function () { eruda.init(); } })();websocat ws://127.0.0.1:import json
import requests
import websocket


class Shell(object):
    def __init__(self, host='127.0.0.1', port=9222):
        """ init """
        self.host = host
        self.port = port
        self.soc = None
        self.connected = None
        self.tablist = None
        self.find_tabs()

    def connect(self, tab=None, update_tabs=True):
        if update_tabs or not self.tablist:
            self.find_tabs()
        if not tab:
            tab = 0
        wsurl = self.tablist[tab]['webSocketDebuggerUrl']
        #if self.soc.connected:
        #    self.soc.close()
        self.soc = websocket.create_connection(wsurl)
        return self.soc

    def close(self):
        """ Close websocket connection to remote browser."""
        if self.soc:
            self.soc.close()
            self.soc = None

    def find_tabs(self):
        """Connect to host:port and request list of tabs
             return list of dicts of data about open tabs."""
        # find websocket endpoint
        response = requests.get("http://%s:%s/json" % (self.host, self.port))
        self.tablist = json.loads(response.text)
        return self.tablist

    def open_url(self, url):
        """Open a URL in the oldest tab."""
        if not self.soc or not self.soc.connected:
            self.connect(tab=0)
        # force the 'oldest' tab to load url
        navcom = json.dumps({"id": 0,
                             "method": "Page.navigate",
                             "params": {"url": url}})
        # This code would open a new window, but browsers really dont
        # like doing so.  And, the results are irritating at best.
        # navcom=json.dumps({"id":0,"method":"Runtime.evaluate",
        #  "params":{"expression": "window.open('%s', #'_blank',
        # 'toolbar=1,scrollbars=1,location=1,statusbar=0,menubar=1,resizable=1'
        # )" % (url) }})Runtime.evaluate
        self.soc.send(navcom)
        return self.soc.recv()
shell = Shell(host='127.0.0.1', port=9222)  
#shell.connect(0)
#url = 'http://www.clift.org/fred' # shameless
url = 'http://example.com' # shameless
#navcom = json.dumps({"id":0, "method":"Target.createTarget", "params":{"url":url}})
#shell.soc.send(navcom)
shell.connect(0)
navcom = json.dumps({"id":0, "method":"Network.getCookies", "params":{"url":url}})
shell.soc.send(navcom)
response = json.loads(shell.soc.recv())

print(len(shell.find_tabs()))
print(shell.find_tabs()[1]["url"])
#print(shell.find_tabs()[1])
print(response)import json
import requests
import websocket


class Shell(object):
    def __init__(self, host='127.0.0.1', port=9222):
        """ init """
        self.host = host
        self.port = port
        self.soc = None
        self.connected = None
        self.tablist = None
        self.find_tabs()

    def connect(self, tab=None, update_tabs=True):
        if update_tabs or not self.tablist:
            self.find_tabs()
        if not tab:
            tab = 0
        wsurl = self.tablist[tab]['webSocketDebuggerUrl']
        #if self.soc.connected:
        #    self.soc.close()
        self.soc = websocket.create_connection(wsurl)
        return self.soc

    def close(self):
        """ Close websocket connection to remote browser."""
        if self.soc:
            self.soc.close()
            self.soc = None

    def find_tabs(self):
        """Connect to host:port and request list of tabs
             return list of dicts of data about open tabs."""
        # find websocket endpoint
        response = requests.get("http://%s:%s/json" % (self.host, self.port))
        self.tablist = json.loads(response.text)
        return self.tablist

    def open_url(self, url):
        """Open a URL in the oldest tab."""
        if not self.soc or not self.soc.connected:
            self.connect(tab=0)
        # force the 'oldest' tab to load url
        navcom = json.dumps({"id": 0,
                             "method": "Page.navigate",
                             "params": {"url": url}})
        # This code would open a new window, but browsers really dont
        # like doing so.  And, the results are irritating at best.
        # navcom=json.dumps({"id":0,"method":"Runtime.evaluate",
        #  "params":{"expression": "window.open('%s', #'_blank',
        # 'toolbar=1,scrollbars=1,location=1,statusbar=0,menubar=1,resizable=1'
        # )" % (url) }})Runtime.evaluate
        self.soc.send(navcom)
        return self.soc.recv()
shell = Shell(host='127.0.0.1', port=9222)  
#shell.connect(0)
#url = 'http://www.clift.org/fred' # shameless
url = 'http://example.com' # shameless
#navcom = json.dumps({"id":0, "method":"Target.createTarget", "params":{"url":url}})
#shell.soc.send(navcom)
shell.connect(0)
navcom = json.dumps({"id":0, "method":"Network.getCookies", "params":{"url":url}})
shell.soc.send(navcom)
response = json.loads(shell.soc.recv())

print(len(shell.find_tabs()))
print(shell.find_tabs()[1]["url"])
#print(shell.find_tabs()[1])
print(response)https://panel4.serv00.com/mysql/github/koldunovn/nk_public_notebooks/blob/master/Apache_log.ipynbhttps://raw.githubusercontent.com/koldunovn/nk_public_notebooks/master/Apache_log.ipynbselect * from messagesjavascript:date = new Date();
url_root = 'http://nbviewer.ipython.org/';
url = null;
gist_re = /^https?:\/\/gist\.github\.com\/(?:\w+\/)?([a-f0-9]+)$/;
github_re = /^https:\/\/(github\.com\/.*\/)blob\/(.*\.ipynb)$/;
https_re = /^https:\/\/(.*\.ipynb)$/;
http_re = /^http:\/\/(.*\.ipynb)$/;
loc = location.href;
if (gist_re.test(loc)) {
    gist = gist_re.exec(loc);
    url = url_root + gist[1];
} else if (github_re.test(loc)) {
    path = github_re.exec(loc);
    url = url_root + 'urls/raw.' + path[1] + path[2];
} else if (https_re.test(loc)) {
    path = https_re.exec(loc);
    url = url_root + 'urls/' + path[1];
} else if (http_re.test(loc)) {
    path = http_re.exec(loc);
    url = url_root + 'url/' + path[1];}
if (url) {void(window.open(url, 'nbviewer' + date.getTime()));}javascript:date = new Date();
url_root = 'http://nbviewer.ipython.org/';
url = null;
gist_re = /^https?:\/\/gist\.github\.com\/(?:\w+\/)?([a-f0-9]+)$/;
github_re = /^https:\/\/(github\.com\/.*\/)blob\/(.*\.ipynb)$/;
https_re = /^https:\/\/(.*\.ipynb)$/;
http_re = /^http:\/\/(.*\.ipynb)$/;
loc = location.href;
if (gist_re.test(loc)) {
    gist = gist_re.exec(loc);
    url = url_root + gist[1];
} else if (github_re.test(loc)) {
    path = github_re.exec(loc);
    url = url_root + 'urls/raw.' + path[1] + path[2];
} else if (https_re.test(loc)) {
    path = https_re.exec(loc);
    url = url_root + 'urls/' + path[1];
} else if (http_re.test(loc)) {
    path = http_re.exec(loc);
    url = url_root + 'url/' + path[1];}
if (url) {void(window.open(url, 'nbviewer' + date.getTime()));}display(slider)pip install jupyterlab-deckpip install jupyterlab-deckpip install jupyterlab-deckpip install jupyterlab_risepip install nbslidejupyter labextension install jupyterlab_vim{
 "nbformat": 4,
 "nbformat_minor": 2,
 "metadata": {
  "language_info": {
   "name": "python",
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "version": "3.6.8-final"
  },
  "orig_nbformat": 2,
  "file_extension": ".py",
  "mimetype": "text/x-python",
  "name": "python",
  "npconvert_exporter": "python",
  "pygments_lexer": "ipython3",
  "version": 3,
  "kernelspec": {
   "name": "python36864bitjupyterapipipenv100023b4210342f0b1028e92ab62ef71",
   "display_name": "Python 3.6.8 64-bit ('jupyter-api': pipenv)"
  }
 },
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "import datetime\n",
    "import requests\n",
    "import pandas as pd\n",
    "import inspect\n",
    "from inspect import getsourcefile\n",
    "from requests_html import HTML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename     = inspect.getframeinfo(inspect.currentframe()).filename\n",
    "BASE_DIR     = os.path.dirname(os.path.abspath(filename))\n",
    "DATA_DIR     = os.path.join(os.path.dirname(BASE_DIR), 'data')\n",
    "os.makedirs(DATA_DIR, exist_ok=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def url_to_txt(url, filename=\"world.html\", save=False):\n",
    "    r = requests.get(url)\n",
    "    if r.status_code == 200:\n",
    "        html_text = r.text\n",
    "        if save:\n",
    "            with open(f\"world-{year}.html\", 'w') as f:\n",
    "                f.write(html_text)\n",
    "        return html_text\n",
    "    return None\n",
    "\n",
    "\n",
    "def parse_and_extract(url, name='2020'):\n",
    "    html_text = url_to_txt(url)\n",
    "    if html_text == None:\n",
    "        return False\n",
    "    r_html = HTML(html=html_text)\n",
    "    table_class = \".imdb-scroll-table\"\n",
    "    # table_class = \"#table\"\n",
    "    r_table = r_html.find(table_class)\n",
    "\n",
    "    # print(r_table)\n",
    "    table_data = []\n",
    "    # table_data_dicts = []\n",
    "    header_names = []\n",
    "    if len(r_table) == 0:\n",
    "        return False\n",
    "    parsed_table = r_table[0]\n",
    "    rows = parsed_table.find(\"tr\")\n",
    "    header_row = rows[0]\n",
    "    header_cols = header_row.find('th')\n",
    "    header_names = [x.text for x in header_cols]\n",
    "    for row in rows[1:]:\n",
    "        # print(row.text)\n",
    "        cols = row.find(\"td\")\n",
    "        row_data = []\n",
    "        row_dict_data = {}\n",
    "        for i, col in enumerate(cols):\n",
    "            # print(i, col.text, '\\n\\n')\n",
    "            header_name = header_names[i]\n",
    "            # row_dict_data[header_name] = col.text\n",
    "            row_data.append(col.text)\n",
    "        # table_data_dicts.append(row_dict_data)\n",
    "        table_data.append(row_data)\n",
    "    df = pd.DataFrame(table_data, columns=header_names)\n",
    "    # df = pd.DataFrame(table_data_dicts)\n",
    "    datadir_path = DATA_DIR\n",
    "    os.makedirs(datadir_path, exist_ok=True)\n",
    "    filepath = os.path.join(datadir_path, f'{name}.csv')\n",
    "    df.to_csv(filepath, index=False)\n",
    "    return True\n",
    "\n",
    "def run(start_year=None, years_ago=0):\n",
    "    if start_year == None:\n",
    "        now = datetime.datetime.now()\n",
    "        start_year = now.year\n",
    "    assert isinstance(start_year, int)\n",
    "    assert isinstance(years_ago, int)\n",
    "    assert len(f\"{start_year}\") == 4\n",
    "    for i in range(0, years_ago+1):\n",
    "        url = f\"https://www.boxofficemojo.com/year/world/{start_year}/\"\n",
    "        finished = parse_and_extract(url, name=start_year)\n",
    "        if finished:\n",
    "            print(f\"Finished {start_year}\")\n",
    "        else:\n",
    "            print(f\"{start_year} not finished\")\n",
    "        start_year -= 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "Finished 2020\n"
    }
   ],
   "source": [
    "run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ]
}{
 "nbformat": 4,
 "nbformat_minor": 2,
 "metadata": {
  "language_info": {
   "name": "python",
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "version": "3.6.8-final"
  },
  "orig_nbformat": 2,
  "file_extension": ".py",
  "mimetype": "text/x-python",
  "name": "python",
  "npconvert_exporter": "python",
  "pygments_lexer": "ipython3",
  "version": 3,
  "kernelspec": {
   "name": "python36864bitjupyterapipipenv100023b4210342f0b1028e92ab62ef71",
   "display_name": "Python 3.6.8 64-bit ('jupyter-api': pipenv)"
  }
 },
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "import datetime\n",
    "import requests\n",
    "import pandas as pd\n",
    "import inspect\n",
    "from inspect import getsourcefile\n",
    "from requests_html import HTML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename     = inspect.getframeinfo(inspect.currentframe()).filename\n",
    "BASE_DIR     = os.path.dirname(os.path.abspath(filename))\n",
    "DATA_DIR     = os.path.join(os.path.dirname(BASE_DIR), 'data')\n",
    "os.makedirs(DATA_DIR, exist_ok=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def url_to_txt(url, filename=\"world.html\", save=False):\n",
    "    r = requests.get(url)\n",
    "    if r.status_code == 200:\n",
    "        html_text = r.text\n",
    "        if save:\n",
    "            with open(f\"world-{year}.html\", 'w') as f:\n",
    "                f.write(html_text)\n",
    "        return html_text\n",
    "    return None\n",
    "\n",
    "\n",
    "def parse_and_extract(url, name='2020'):\n",
    "    html_text = url_to_txt(url)\n",
    "    if html_text == None:\n",
    "        return False\n",
    "    r_html = HTML(html=html_text)\n",
    "    table_class = \".imdb-scroll-table\"\n",
    "    # table_class = \"#table\"\n",
    "    r_table = r_html.find(table_class)\n",
    "\n",
    "    # print(r_table)\n",
    "    table_data = []\n",
    "    # table_data_dicts = []\n",
    "    header_names = []\n",
    "    if len(r_table) == 0:\n",
    "        return False\n",
    "    parsed_table = r_table[0]\n",
    "    rows = parsed_table.find(\"tr\")\n",
    "    header_row = rows[0]\n",
    "    header_cols = header_row.find('th')\n",
    "    header_names = [x.text for x in header_cols]\n",
    "    for row in rows[1:]:\n",
    "        # print(row.text)\n",
    "        cols = row.find(\"td\")\n",
    "        row_data = []\n",
    "        row_dict_data = {}\n",
    "        for i, col in enumerate(cols):\n",
    "            # print(i, col.text, '\\n\\n')\n",
    "            header_name = header_names[i]\n",
    "            # row_dict_data[header_name] = col.text\n",
    "            row_data.append(col.text)\n",
    "        # table_data_dicts.append(row_dict_data)\n",
    "        table_data.append(row_data)\n",
    "    df = pd.DataFrame(table_data, columns=header_names)\n",
    "    # df = pd.DataFrame(table_data_dicts)\n",
    "    datadir_path = DATA_DIR\n",
    "    os.makedirs(datadir_path, exist_ok=True)\n",
    "    filepath = os.path.join(datadir_path, f'{name}.csv')\n",
    "    df.to_csv(filepath, index=False)\n",
    "    return True\n",
    "\n",
    "def run(start_year=None, years_ago=0):\n",
    "    if start_year == None:\n",
    "        now = datetime.datetime.now()\n",
    "        start_year = now.year\n",
    "    assert isinstance(start_year, int)\n",
    "    assert isinstance(years_ago, int)\n",
    "    assert len(f\"{start_year}\") == 4\n",
    "    for i in range(0, years_ago+1):\n",
    "        url = f\"https://www.boxofficemojo.com/year/world/{start_year}/\"\n",
    "        finished = parse_and_extract(url, name=start_year)\n",
    "        if finished:\n",
    "            print(f\"Finished {start_year}\")\n",
    "        else:\n",
    "            print(f\"{start_year} not finished\")\n",
    "        start_year -= 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "Finished 2020\n"
    }
   ],
   "source": [
    "run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ]
}conda env create -f environment.ymljupyter2slideshttps://github.com/hkust-dh/jupyter-slides-demo.gitjupyter<script type="text/template">pip install -r requirements.txtimport nbformat
from nbconvert.preprocessors import ExecutePreprocessor

def trigger(notebook_filename='chp-traffic.ipynb'):
    with open(notebook_filename) as f:
        nb = nbformat.read(f, as_version=4)
    ep = ExecutePreprocessor(timeout=600, kernel_name='python3')
    r = ep.preprocess(nb)
    return rpip install jupyterlab-code-foldingjupyterlab-vimfrom ipywidgets import interact, interactive, fixed, interact_manual,Layout
import ipywidgets as widgets
import subprocess

a=widgets.Textarea(

    value="echo '' | gotify push -p 1",
    placeholder='Type something',
    description='String:',
    layout=Layout(width='550px', height='200px'),
    disabled=False

)
def slow_function(x):
    cmd(x)
    return x
    #ddd='cat r.sh'
def cmd(arg):
    p = subprocess.Popen(args=arg, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    single_html =p.stdout.read().decode(encoding="utf-8", errors="strict")
    print(single_html)

def f1(y):
    cmd(y)
    return y
interact_manual(f1, y=r'echo "select * from messages order by id desc limit 3" | sqlite3 /home/pia/pdf/gotify.db;ls /home/pia/upload/gotify-2014*.db')
from ipywidgets import interact, interactive, fixed, interact_manual,Layout
import ipywidgets as widgets
import subprocess

a=widgets.Textarea(

    value="echo '' | gotify push -p 1",
    placeholder='Type something',
    description='String:',
    layout=Layout(width='550px', height='200px'),
    disabled=False

)
def slow_function(x):
    cmd(x)
    return x
    #ddd='cat r.sh'
def cmd(arg):
    p = subprocess.Popen(args=arg, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    single_html =p.stdout.read().decode(encoding="utf-8", errors="strict")
    print(single_html)

def f1(y):
    cmd(y)
    return y
interact_manual(f1, y=r'echo "select * from messages order by id desc limit 3" | sqlite3 /home/pia/pdf/gotify.db;ls /home/pia/upload/gotify-2014*.db')
9YeExykKItI-Jf2r-AHAz5eAXH3MZx3G5zs7Vj1BWPghttps://binder.curvenote.dev/https://binder.curvenote.dev/from fasthtml.common import *
from collections import deque

app, rt = fast_app(exts='ws')

# All messages here, but only most recent 15 are stored
messages = deque(maxlen=15)
users = {}

# Takes all the messages and renders them
box_style = "border: 1px solid #ccc; border-radius: 10px; padding: 10px; margin: 5px 0;"
def render_messages(messages):
    return Div(*[Div(m, style=box_style) for m in messages], id='msg-list')

# Input field is reset via hx_swap_oob after submitting a message
def mk_input(): return Input(id='msg', placeholder="Type your message", value="", hx_swap_oob="true")

@rt
def index():
    return Titled("Leave a message for others!"),Div(
        Form(mk_input(), ws_send=True), # input field
        P("Leave a message for others!"),
        Div(render_messages(messages),id='msg-list'), # All the Messages
        hx_ext='ws', ws_connect='ws') # Use a web socket 

def on_connect(ws, send): users[id(ws)] = send
def on_disconnect(ws):users.pop(id(ws),None)

@app.ws('/ws', conn=on_connect, disconn=on_disconnect)
async def ws(msg:str,send):
    await send(mk_input()) # reset the input field immediately
    messages.appendleft(msg) # New messages first
    for u in users.values(): # Get `send` function for a user
        await u(render_messages(messages)) # Send the message to that user

serve()from fasthtml.common import *
from collections import deque

app, rt = fast_app(exts='ws')

# All messages here, but only most recent 15 are stored
messages = deque(maxlen=15)
users = {}

# Takes all the messages and renders them
box_style = "border: 1px solid #ccc; border-radius: 10px; padding: 10px; margin: 5px 0;"
def render_messages(messages):
    return Div(*[Div(m, style=box_style) for m in messages], id='msg-list')

# Input field is reset via hx_swap_oob after submitting a message
def mk_input(): return Input(id='msg', placeholder="Type your message", value="", hx_swap_oob="true")

@rt
def index():
    return Titled("Leave a message for others!"),Div(
        Form(mk_input(), ws_send=True), # input field
        P("Leave a message for others!"),
        Div(render_messages(messages),id='msg-list'), # All the Messages
        hx_ext='ws', ws_connect='ws') # Use a web socket 

def on_connect(ws, send): users[id(ws)] = send
def on_disconnect(ws):users.pop(id(ws),None)

@app.ws('/ws', conn=on_connect, disconn=on_disconnect)
async def ws(msg:str,send):
    await send(mk_input()) # reset the input field immediately
    messages.appendleft(msg) # New messages first
    for u in users.values(): # Get `send` function for a user
        await u(render_messages(messages)) # Send the message to that user

serve()--no-use-pep517--no-use-pep517conda create -n binderhub-in-a-box -f environment.ymlTypeError: unsupported operand type(s) for |: 'type' and 'type'import socket

def main():
    # 创建一个TCP套接字
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    # 绑定IP地址和端口
    server_socket.bind(('127.0.0.1', 12346))

    # 监听连接
    server_socket.listen(5)

    print("服务器已启动，等待客户端连接...")

    while True:
        # 接受客户端连接
        client_socket, client_address = server_socket.accept()
        print(f"客户端{client_address}已连接")

        # 接收客户端发送的数据
        data = client_socket.recv(1024)
        print(f"收到来自{client_address}的数据： {data.decode('utf-8')}")

        # 将接收到的数据发送回客户端
        client_socket.send(data)
        print(f"已将数据发送回{client_address}")

        # 关闭客户端套接字
        client_socket.close()
        print(f"客户端{client_address}已断开连接")

if __name__ == "__main__":
    main()loop = asyncio.get_event_loop()const WebSocket = require('ws');

// 替换为你的 WebSocket 服务器地址
const socket = new WebSocket("ws://10.10.49.172:8765");

// 监听连接打开事件
socket.addEventListener("open", (event) => {
    console.log("WebSocket connection opened.");

    // 构造二进制数据，这里使用一个简单的示例
    const binaryData = new Uint8Array([49, 50, 51, 52]);

    // 发送二进制数据
    socket.send(binaryData);

    console.log("Binary data sent successfully.");
});

// 监听接收消息事件
socket.addEventListener("message", (event) => {
    console.log("Received message:", event.data);
});

// 监听连接关闭事件
socket.addEventListener("close", (event) => {
    console.log("WebSocket connection closed.");
});

// 监听错误事件
socket.addEventListener("error", (event) => {
    console.error("WebSocket error:", event);
});websocket<!DOCTYPE html>
<pre id="log"></pre>
<script>
  // helper function: log message to screen
  function log(msg) {
    document.getElementById('log').textContent += msg + '\n';
  }

  // setup websocket with callbacks
  var ws = new WebSocket('ws://localhost:8080/');
  ws.onopen = function() {
    log('CONNECT');
  };
  ws.onclose = function() {
    log('DISCONNECT');
  };
  ws.onmessage = function(event) {
    log('MESSAGE: ' + event.data);
  };
</script><script src="https://res.zvo.cn/websocket.js/websocket.js"></script>

/*
websocket.connect({
	url:'ws://localhost:8081/', //服务端的WebSocket地址
	onopen:function(){ //如果不需要，此不传即可。
		websocket.send({"type":"CONNECT","token":"123456"}); //当WebSocket通道连接成功后，自动给服务器发送一条json格式的消息
	},
	onmessage:function(message){ //如果不需要，此不传即可
		//console.log(message); //服务端发送来的消息会在这里接收到
		document.getElementById('showMessage').innerHTML = JSON.stringify(message) + '<br/>' + document.getElementById('showMessage').innerHTML;
	}
});
*/
</script><script src="https://res.zvo.cn/websocket.js/websocket.js"></script>

/*
websocket.connect({
	url:'ws://localhost:8081/', //服务端的WebSocket地址
	onopen:function(){ //如果不需要，此不传即可。
		websocket.send({"type":"CONNECT","token":"123456"}); //当WebSocket通道连接成功后，自动给服务器发送一条json格式的消息
	},
	onmessage:function(message){ //如果不需要，此不传即可
		//console.log(message); //服务端发送来的消息会在这里接收到
		document.getElementById('showMessage').innerHTML = JSON.stringify(message) + '<br/>' + document.getElementById('showMessage').innerHTML;
	}
});
*/
</script> ./websocketd --port=8765 ./count.shpip install --upgrade jinja2<!DOCTYPE HTML>
<html>
<head>
    <title>Flask-SocketIO Test</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js" integrity="sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/3.0.4/socket.io.js" integrity="sha512-aMGMvNYu8Ue4G+fHa359jcPb1u+ytAF+P2SCb+PxrjCdO3n3ZTxJ30zuH39rimUggmTwmh2u7wvQsDTHESnmfQ==" crossorigin="anonymous"></script>
    <script type="text/javascript" charset="utf-8">
        $(document).ready(function() {
            // Connect to the Socket.IO server.
            // The connection URL has the following format, relative to the current page:
            //     http[s]://<domain>:<port>[/<namespace>]
            var socket = io.connect('http://' + document.domain + ':' + location.port);

            // Event handler for new connections.
            // The callback function is invoked when a connection with the
            // server is established.
            socket.on('connect', function() {
                socket.emit('my_event', {data: 'I\'m connected!'});
            });

            // Event handler for server sent data.
            // The callback function is invoked whenever the server emits data
            // to the client. The data is then displayed in the "Received"
            // section of the page.
            socket.on('my_response', function(msg, cb) {
                $('#log').append('<br>' + $('<div/>').text('Received #' + msg.count + ': ' + msg.data).html());
                if (cb)
                    cb();
            });

            // Interval function that tests message latency by sending a "ping"
            // message. The server then responds with a "pong" message and the
            // round trip time is measured.
            var ping_pong_times = [];
            var start_time;
            window.setInterval(function() {
                start_time = (new Date).getTime();
                $('#transport').text(socket.io.engine.transport.name);
                socket.emit('my_ping');
            }, 1000);

            // Handler for the "pong" message. When the pong is received, the
            // time from the ping is stored, and the average of the last 30
            // samples is average and displayed.
            socket.on('my_pong', function() {
                var latency = (new Date).getTime() - start_time;
                ping_pong_times.push(latency);
                ping_pong_times = ping_pong_times.slice(-30); // keep last 30 samples
                var sum = 0;
                for (var i = 0; i < ping_pong_times.length; i++)
                    sum += ping_pong_times[i];
                $('#ping-pong').text(Math.round(10 * sum / ping_pong_times.length) / 10);
            });

            // Handlers for the different forms in the page.
            // These accept data from the user and send it to the server in a
            // variety of ways
            $('form#emit').submit(function(event) {
                socket.emit('my_event', {data: $('#emit_data').val()});
                return false;
            });
            $('form#broadcast').submit(function(event) {
                socket.emit('my_broadcast_event', {data: $('#broadcast_data').val()});
                return false;
            });
            $('form#join').submit(function(event) {
                socket.emit('join', {room: $('#join_room').val()});
                return false;
            });
            $('form#leave').submit(function(event) {
                socket.emit('leave', {room: $('#leave_room').val()});
                return false;
            });
            $('form#send_room').submit(function(event) {
                socket.emit('my_room_event', {room: $('#room_name').val(), data: $('#room_data').val()});
                return false;
            });
            $('form#close').submit(function(event) {
                socket.emit('close_room', {room: $('#close_room').val()});
                return false;
            });
            $('form#disconnect').submit(function(event) {
                socket.emit('disconnect_request');
                return false;
            });
        });
    </script>
</head>
<body>
    <h1>Flask-SocketIO Test</h1>
    <p>
      Async mode is: <b>{{ async_mode }}</b><br>
      Current transport is: <b><span id="transport"></span></b><br>
      Average ping/pong latency: <b><span id="ping-pong"></span>ms</b>
    </p>
    <h2>Send:</h2>
    <form id="emit" method="POST" action='#'>
        <input type="text" name="emit_data" id="emit_data" placeholder="Message">
        <input type="submit" value="Echo">
    </form>
    <form id="broadcast" method="POST" action='#'>
        <input type="text" name="broadcast_data" id="broadcast_data" placeholder="Message">
        <input type="submit" value="Broadcast">
    </form>
    <form id="join" method="POST" action='#'>
        <input type="text" name="join_room" id="join_room" placeholder="Room Name">
        <input type="submit" value="Join Room">
    </form>
    <form id="leave" method="POST" action='#'>
        <input type="text" name="leave_room" id="leave_room" placeholder="Room Name">
        <input type="submit" value="Leave Room">
    </form>
    <form id="send_room" method="POST" action='#'>
        <input type="text" name="room_name" id="room_name" placeholder="Room Name">
        <input type="text" name="room_data" id="room_data" placeholder="Message">
        <input type="submit" value="Send to Room">
    </form>
    <form id="close" method="POST" action="#">
        <input type="text" name="close_room" id="close_room" placeholder="Room Name">
        <input type="submit" value="Close Room">
    </form>
    <form id="disconnect" method="POST" action="#">
        <input type="submit" value="Disconnect">
    </form>
    <h2>Receive:</h2>
    <div id="log"></div>
</body>
</html>from threading import Lock
from flask import Flask, render_template, session, request, copy_current_request_context
from flask_socketio import SocketIO, emit, join_room, leave_room, close_room, rooms, disconnect

# Set this variable to "threading", "eventlet" or "gevent" to test the
# different async modes, or leave it set to None for the application to choose
# the best option based on installed packages.
async_mode = None

app = Flask(__name__)
app.config['SECRET_KEY'] = 'secret!'
socketio = SocketIO(app, async_mode=async_mode)
thread = None
thread_lock = Lock()


def background_thread():
    """Example of how to send server generated events to clients."""
    count = 0
    while True:
        socketio.sleep(10)
        count += 1
        socketio.emit('my_response',
                      {'data': 'Server generated event', 'count': count})


@app.route('/')
def index():
    return render_template('index.html', async_mode=socketio.async_mode)


@socketio.event
def my_event(message):
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response',
         {'data': message['data'], 'count': session['receive_count']})


@socketio.event
def my_broadcast_event(message):
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response',
         {'data': message['data'], 'count': session['receive_count']},
         broadcast=True)


@socketio.event
def join(message):
    join_room(message['room'])
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response',
         {'data': 'In rooms: ' + ', '.join(rooms()),
          'count': session['receive_count']})


@socketio.event
def leave(message):
    leave_room(message['room'])
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response',
         {'data': 'In rooms: ' + ', '.join(rooms()),
          'count': session['receive_count']})


@socketio.on('close_room')
def on_close_room(message):
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response', {'data': 'Room ' + message['room'] + ' is closing.',
                         'count': session['receive_count']},
         to=message['room'])
    close_room(message['room'])


@socketio.event
def my_room_event(message):
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response',
         {'data': message['data'], 'count': session['receive_count']},
         to=message['room'])


@socketio.event
def disconnect_request():
    @copy_current_request_context
    def can_disconnect():
        disconnect()
    session['receive_count'] = session.get('receive_count', 0) + 1
    # for this emit we use a callback function
    # when the callback function is invoked we know that the message has been
    # received and it is safe to disconnect
    emit('my_response',
         {'data': 'Disconnected!', 'count': session['receive_count']},
         callback=can_disconnect)


@socketio.event
def my_ping():
    emit('my_pong')


@socketio.event
def connect():
    global thread
    with thread_lock:
        if thread is None:
            thread = socketio.start_background_task(background_thread)
    emit('my_response', {'data': 'Connected', 'count': 0})


@socketio.on('disconnect')
def test_disconnect():
    print('Client disconnected', request.sid)


if __name__ == '__main__':
    socketio.run(app, host='0.0.0.0', debug=True)
send-receive.sh<!DOCTYPE html>
<pre id="log"></pre>
<script>
  // helper function: log message to screen
  function log(msg) {
    document.getElementById('log').textContent += msg + '\n';
  }

  // setup websocket with callbacks
  var ws = new WebSocket('ws://localhost:8080/');
  ws.onopen = function() {
    log('CONNECT');
  };
  ws.onclose = function() {
    log('DISCONNECT');
  };
  ws.onmessage = function(event) {
    log('MESSAGE: ' + event.data);
  };
</script>echo $REPLYecho $REPLYhttp://45.32.200.249:1234/count.sh# Then access http://localhost:1234/dump-env.sh
#You can also test the command files by running from the command line.www.example.com/socketserverTypeError: WS_Server.echo() missing 1 required positional argument: 'path'npm install -g json-socket-serverimport requests

js_code = """
(function(){
    console.log("test")
    return "执行成功"
})()
"""

url = "http://localhost:12080/execjs"
data = {
    "group": "zzz",
    "code": js_code
}
res = requests.post(url, data=data)
print(res.text)https://kkgithub.com/sixgad/py-jsrpc.gitfunction JsClient(wsURL) {
    this.wsURL = wsURL;
    this.handlers = {};
    this.socket = {};
    if (!wsURL) {
        throw new Error('wsURL can not be empty!!')
    }
    this.webSocketFactory = this.resolveWebSocketFactory();
    this.connect()
}

JsClient.prototype.resolveWebSocketFactory = function () {
    if (typeof window === 'object') {
        var theWebSocket = window.WebSocket ? window.WebSocket : window.MozWebSocket;
        return function (wsURL) {

            function WindowWebSocketWrapper(wsURL) {
                this.mSocket = new theWebSocket(wsURL);
            }

            WindowWebSocketWrapper.prototype.close = function () {
                this.mSocket.close();
            };

            WindowWebSocketWrapper.prototype.onmessage = function (onMessageFunction) {
                this.mSocket.onmessage = onMessageFunction;
            };

            WindowWebSocketWrapper.prototype.onopen = function (onOpenFunction) {
                this.mSocket.onopen = onOpenFunction;
            };
            WindowWebSocketWrapper.prototype.onclose = function (onCloseFunction) {
                this.mSocket.onclose = onCloseFunction;
            };

            WindowWebSocketWrapper.prototype.send = function (message) {
                this.mSocket.send(message);
            };

            return new WindowWebSocketWrapper(wsURL);
        }
    }
    if (typeof weex === 'object') {
        try {
            console.log("test webSocket for weex");
            var ws = weex.requireModule('webSocket');
            console.log("find webSocket for weex:" + ws);
            return function (wsURL) {
                try {
                    ws.close();
                } catch (e) {
                }
                ws.WebSocket(wsURL, '');
                return ws;
            }
        } catch (e) {
            console.log(e);
        }
    }
    if (typeof WebSocket === 'object') {
        return function (wsURL) {
            return new theWebSocket(wsURL);
        }
    }
    throw new Error("the js environment do not support websocket");
};

JsClient.prototype.connect = function () {
    console.log('jsclient begin of connect to wsURL: ' + this.wsURL);
    var _this = this;
    try {
        this.socket = this.webSocketFactory(this.wsURL);
    } catch (e) {
        console.log("jsclient create connection failed,reconnect after 2s");
        setTimeout(function () {
            _this.connect()
        }, 2000)
    }

    this.socket.onmessage(function (event) {
        _this.handleJsClientRequest(event.data)
    });

    this.socket.onopen(function (event) {
        console.log('jsclient open a connection')
    });

    this.socket.onclose(function (event) {
        console.log('jsclient disconnected ,reconnection after 2s');
        setTimeout(function () {
            _this.connect()
        }, 2000)
    });
};

JsClient.prototype.handleJsClientRequest = function (requestJson) {
    console.log("receive request: " + requestJson);
    var request = JSON.parse(requestJson);
    var seq = request['__uuid_seq__'];

    if (!request['action']) {
        this.sendFailed(seq, 'need request param {action}');
        return
    }
    var action = request['action'];
    if (!this.handlers[action]) {
        this.sendFailed(seq, 'no action handler: ' + action + ' defined');
        return
    }

    var theHandler = this.handlers[action];
    var _this = this;
    try {
        theHandler(request, function (response) {
            try {
                _this.sendSuccess(seq, response)
            } catch (e) {
                _this.sendFailed(seq, "e:" + e);
            }
        }, function (errorMessage) {
            _this.sendFailed(seq, errorMessage)
        })
    } catch (e) {
        console.log("error: " + e);
        _this.sendFailed(seq, ":" + e);
    }
};

JsClient.prototype.sendSuccess = function (seq, response) {
    var responseJson;
    if (typeof response == 'string') {
        try {
            responseJson = JSON.parse(response);
        } catch (e) {
            responseJson = {};
            responseJson['data'] = response;
        }
    } else if (typeof response == 'object') {
        responseJson = response;
    } else {
        responseJson = {};
        responseJson['data'] = response;
    }

    if (Array.isArray(responseJson)) {
        responseJson = {
            data: responseJson,
            code: 0
        }
    }

    if (responseJson['code']) {
        responseJson['code'] = 0;
    } else if (responseJson['status']) {
        responseJson['status'] = 0;
    } else {
        responseJson['status'] = 0;
    }
    responseJson['__uuid_seq__'] = seq;
    var responseText = JSON.stringify(responseJson);
    console.log("response :" + responseText);
    this.socket.send(responseText);
};

JsClient.prototype.sendFailed = function (seq, errorMessage) {
    if (typeof errorMessage != 'string') {
        errorMessage = JSON.stringify(errorMessage);
    }
    var responseJson = {};
    responseJson['message'] = errorMessage;
    responseJson['status'] = -1;
    responseJson['__uuid_seq__'] = seq;
    var responseText = JSON.stringify(responseJson);
    console.log("jsclient response :" + responseText);
    this.socket.send(responseText)
};

JsClient.prototype.registerAction = function (action, handler) {
    if (typeof action !== 'string') {
        throw new Error("an action must be string");
    }
    if (typeof handler !== 'function') {
        throw new Error("a handler must be function");
    }
    console.log("jsclient register action: " + action);
    this.handlers[action] = handler;
    return this;
};
function guid() {
    function S4() {
        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
    }
    return (S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4() + S4());
}# -*- coding: utf-8 -*-
# @Time   : 2021/7/13 21:18
# @Author : zp
# @Python3.7
import asyncio
import websockets
import json
from loguru import logger
from sanic import Sanic, response
import threading
from back_socket_server import ws_run

app = Sanic(__name__)


@app.route('/send', methods=['GET'])
async def get_request(request):
    # http://127.0.0.1:5000/send?group=ws-group&action=clientTime
    args_dic = {}
    for params in request.query_args:
        args_dic[params[0]] = str(params[1])
    if "action" not in args_dic:
        return response.json({"error": "need action"})
    group = args_dic.pop('group')
    async with websockets.connect(f'ws://localhost:6789/invoke?group={group}') as websocket:
        await websocket.send(json.dumps(args_dic))
        res = await websocket.recv()
        logger.info(res)
    return response.json(json.loads(res))


if __name__ == '__main__':
    app.add_task(ws_run())
    app.run(debug=False, host="127.0.0.1", port=5000)@app.main_process_startapp.add_task(ws_run()) gotify push -p 1 ""  | gotify push -p 1var aaa=" gotify push  -t " + "title:" + "'" + encodeURI(document.title)+"'" +" -p 1 " + document.URL
//alert(aaa)
window.open('http://45.32.200.249:8060/ddd?url=ddd&ddd='+aaa)var aaa=" gotify push  -t " + "title:" + "'" + encodeURI(document.title)+"'" +" -p 1 " + document.URL
//alert(aaa)
window.open('http://45.32.200.249:8060/ddd?url=ddd&ddd='+aaa)var aaa=" gotify push  -t " + "title:" + "'" + encodeURI(document.title)+"'" +" -p 1 " + document.URL
//alert(aaa)
window.open('http://45.32.200.249:8060/ddd?url=ddd&ddd='+aaa)function SekiroClient(e){if(this.wsURL=e,this.handlers={},this.socket={},!e)throw new Error("wsURL can not be empty!!");this.webSocketFactory=this.resolveWebSocketFactory(),this.connect()}SekiroClient.prototype.resolveWebSocketFactory=function(){if("object"==typeof window){var e=window.WebSocket?window.WebSocket:window.MozWebSocket;return function(o){function t(o){this.mSocket=new e(o)}return t.prototype.close=function(){this.mSocket.close()},t.prototype.onmessage=function(e){this.mSocket.onmessage=e},t.prototype.onopen=function(e){this.mSocket.onopen=e},t.prototype.onclose=function(e){this.mSocket.onclose=e},t.prototype.send=function(e){this.mSocket.send(e)},new t(o)}}if("object"==typeof weex)try{console.log("test webSocket for weex");var o=weex.requireModule("webSocket");return console.log("find webSocket for weex:"+o),function(e){try{o.close()}catch(e){}return o.WebSocket(e,""),o}}catch(e){console.log(e)}if("object"==typeof WebSocket)return function(o){return new e(o)};throw new Error("the js environment do not support websocket")},SekiroClient.prototype.connect=function(){console.log("sekiro: begin of connect to wsURL: "+this.wsURL);var e=this;try{this.socket=this.webSocketFactory(this.wsURL)}catch(o){return console.log("sekiro: create connection failed,reconnect after 2s:"+o),void setTimeout(function(){e.connect()},2e3)}this.socket.onmessage(function(o){e.handleSekiroRequest(o.data)}),this.socket.onopen(function(e){console.log("sekiro: open a sekiro client connection")}),this.socket.onclose(function(o){console.log("sekiro: disconnected ,reconnection after 2s"),setTimeout(function(){e.connect()},2e3)})},SekiroClient.prototype.handleSekiroRequest=function(e){console.log("receive sekiro request: "+e);var o=JSON.parse(e),t=o.__sekiro_seq__;if(o.action){var n=o.action;if(this.handlers[n]){var s=this.handlers[n],i=this;try{s(o,function(e){try{i.sendSuccess(t,e)}catch(e){i.sendFailed(t,"e:"+e)}},function(e){i.sendFailed(t,e)})}catch(e){console.log("error: "+e),i.sendFailed(t,":"+e)}}else this.sendFailed(t,"no action handler: "+n+" defined")}else this.sendFailed(t,"need request param {action}")},SekiroClient.prototype.sendSuccess=function(e,o){var t;if("string"==typeof o)try{t=JSON.parse(o)}catch(e){(t={}).data=o}else"object"==typeof o?t=o:(t={}).data=o;(Array.isArray(t)||"string"==typeof t)&&(t={data:t,code:0}),t.code?t.code=0:(t.status,t.status=0),t.__sekiro_seq__=e;var n=JSON.stringify(t);console.log("response :"+n),this.socket.send(n)},SekiroClient.prototype.sendFailed=function(e,o){"string"!=typeof o&&(o=JSON.stringify(o));var t={};t.message=o,t.status=-1,t.__sekiro_seq__=e;var n=JSON.stringify(t);console.log("sekiro: response :"+n),this.socket.send(n)},SekiroClient.prototype.registerAction=function(e,o){if("string"!=typeof e)throw new Error("an action must be string");if("function"!=typeof o)throw new Error("a handler must be function");return console.log("sekiro: register action: "+e),this.handlers[e]=o,this};
var client = new SekiroClient("wss://sekiro.iinti.cn:5612/business/register?group=test_web&clientId=" + Math.random());
client.registerAction("testAction", function (request, resolve, reject) {
    resolve("ok");
});function SekiroClient(e){if(this.wsURL=e,this.handlers={},this.socket={},!e)throw new Error("wsURL can not be empty!!");this.webSocketFactory=this.resolveWebSocketFactory(),this.connect()}SekiroClient.prototype.resolveWebSocketFactory=function(){if("object"==typeof window){var e=window.WebSocket?window.WebSocket:window.MozWebSocket;return function(o){function t(o){this.mSocket=new e(o)}return t.prototype.close=function(){this.mSocket.close()},t.prototype.onmessage=function(e){this.mSocket.onmessage=e},t.prototype.onopen=function(e){this.mSocket.onopen=e},t.prototype.onclose=function(e){this.mSocket.onclose=e},t.prototype.send=function(e){this.mSocket.send(e)},new t(o)}}if("object"==typeof weex)try{console.log("test webSocket for weex");var o=weex.requireModule("webSocket");return console.log("find webSocket for weex:"+o),function(e){try{o.close()}catch(e){}return o.WebSocket(e,""),o}}catch(e){console.log(e)}if("object"==typeof WebSocket)return function(o){return new e(o)};throw new Error("the js environment do not support websocket")},SekiroClient.prototype.connect=function(){console.log("sekiro: begin of connect to wsURL: "+this.wsURL);var e=this;try{this.socket=this.webSocketFactory(this.wsURL)}catch(o){return console.log("sekiro: create connection failed,reconnect after 2s:"+o),void setTimeout(function(){e.connect()},2e3)}this.socket.onmessage(function(o){e.handleSekiroRequest(o.data)}),this.socket.onopen(function(e){console.log("sekiro: open a sekiro client connection")}),this.socket.onclose(function(o){console.log("sekiro: disconnected ,reconnection after 2s"),setTimeout(function(){e.connect()},2e3)})},SekiroClient.prototype.handleSekiroRequest=function(e){console.log("receive sekiro request: "+e);var o=JSON.parse(e),t=o.__sekiro_seq__;if(o.action){var n=o.action;if(this.handlers[n]){var s=this.handlers[n],i=this;try{s(o,function(e){try{i.sendSuccess(t,e)}catch(e){i.sendFailed(t,"e:"+e)}},function(e){i.sendFailed(t,e)})}catch(e){console.log("error: "+e),i.sendFailed(t,":"+e)}}else this.sendFailed(t,"no action handler: "+n+" defined")}else this.sendFailed(t,"need request param {action}")},SekiroClient.prototype.sendSuccess=function(e,o){var t;if("string"==typeof o)try{t=JSON.parse(o)}catch(e){(t={}).data=o}else"object"==typeof o?t=o:(t={}).data=o;(Array.isArray(t)||"string"==typeof t)&&(t={data:t,code:0}),t.code?t.code=0:(t.status,t.status=0),t.__sekiro_seq__=e;var n=JSON.stringify(t);console.log("response :"+n),this.socket.send(n)},SekiroClient.prototype.sendFailed=function(e,o){"string"!=typeof o&&(o=JSON.stringify(o));var t={};t.message=o,t.status=-1,t.__sekiro_seq__=e;var n=JSON.stringify(t);console.log("sekiro: response :"+n),this.socket.send(n)},SekiroClient.prototype.registerAction=function(e,o){if("string"!=typeof e)throw new Error("an action must be string");if("function"!=typeof o)throw new Error("a handler must be function");return console.log("sekiro: register action: "+e),this.handlers[e]=o,this};
var client = new SekiroClient("wss://sekiro.iinti.cn:5612/business/register?group=test_web&clientId=" + Math.random());
client.registerAction("testAction", function (request, resolve, reject) {
    resolve("ok");
});function SekiroClient(e){if(this.wsURL=e,this.handlers={},this.socket={},!e)throw new Error("wsURL can not be empty!!");this.webSocketFactory=this.resolveWebSocketFactory(),this.connect()}SekiroClient.prototype.resolveWebSocketFactory=function(){if("object"==typeof window){var e=window.WebSocket?window.WebSocket:window.MozWebSocket;return function(o){function t(o){this.mSocket=new e(o)}return t.prototype.close=function(){this.mSocket.close()},t.prototype.onmessage=function(e){this.mSocket.onmessage=e},t.prototype.onopen=function(e){this.mSocket.onopen=e},t.prototype.onclose=function(e){this.mSocket.onclose=e},t.prototype.send=function(e){this.mSocket.send(e)},new t(o)}}if("object"==typeof weex)try{console.log("test webSocket for weex");var o=weex.requireModule("webSocket");return console.log("find webSocket for weex:"+o),function(e){try{o.close()}catch(e){}return o.WebSocket(e,""),o}}catch(e){console.log(e)}if("object"==typeof WebSocket)return function(o){return new e(o)};throw new Error("the js environment do not support websocket")},SekiroClient.prototype.connect=function(){console.log("sekiro: begin of connect to wsURL: "+this.wsURL);var e=this;try{this.socket=this.webSocketFactory(this.wsURL)}catch(o){return console.log("sekiro: create connection failed,reconnect after 2s:"+o),void setTimeout(function(){e.connect()},2e3)}this.socket.onmessage(function(o){e.handleSekiroRequest(o.data)}),this.socket.onopen(function(e){console.log("sekiro: open a sekiro client connection")}),this.socket.onclose(function(o){console.log("sekiro: disconnected ,reconnection after 2s"),setTimeout(function(){e.connect()},2e3)})},SekiroClient.prototype.handleSekiroRequest=function(e){console.log("receive sekiro request: "+e);var o=JSON.parse(e),t=o.__sekiro_seq__;if(o.action){var n=o.action;if(this.handlers[n]){var s=this.handlers[n],i=this;try{s(o,function(e){try{i.sendSuccess(t,e)}catch(e){i.sendFailed(t,"e:"+e)}},function(e){i.sendFailed(t,e)})}catch(e){console.log("error: "+e),i.sendFailed(t,":"+e)}}else this.sendFailed(t,"no action handler: "+n+" defined")}else this.sendFailed(t,"need request param {action}")},SekiroClient.prototype.sendSuccess=function(e,o){var t;if("string"==typeof o)try{t=JSON.parse(o)}catch(e){(t={}).data=o}else"object"==typeof o?t=o:(t={}).data=o;(Array.isArray(t)||"string"==typeof t)&&(t={data:t,code:0}),t.code?t.code=0:(t.status,t.status=0),t.__sekiro_seq__=e;var n=JSON.stringify(t);console.log("response :"+n),this.socket.send(n)},SekiroClient.prototype.sendFailed=function(e,o){"string"!=typeof o&&(o=JSON.stringify(o));var t={};t.message=o,t.status=-1,t.__sekiro_seq__=e;var n=JSON.stringify(t);console.log("sekiro: response :"+n),this.socket.send(n)},SekiroClient.prototype.registerAction=function(e,o){if("string"!=typeof e)throw new Error("an action must be string");if("function"!=typeof o)throw new Error("a handler must be function");return console.log("sekiro: register action: "+e),this.handlers[e]=o,this};
var client = new SekiroClient("wss://sekiro.iinti.cn:5612/business/register?group=test_web&clientId=" + Math.random());
client.registerAction("testAction", function (request, resolve, reject) {
    resolve("ok");
});from ipywidgets import interact, interactive, fixed, interact_manual,Layout
import ipywidgets as widgets
import subprocess

a=widgets.Textarea(
    value="echo '' | gotify push -p 1",
    placeholder='Type something',
    description='String:',
    layout=Layout(width='550px', height='200px'),
    disabled=False
)
def slow_function(x):
    cmd(x)
    return x
    #ddd='cat r.sh'
def cmd(arg):
    p = subprocess.Popen(args=arg, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    single_html =p.stdout.read().decode(encoding="utf-8", errors="strict")
    print(single_html)

def f1(y):
    cmd(y)
    return y
interact_manual(f1, y=r'echo "select * from messages order by id desc limit 3" | sqlite3 /home/pia/pdf/gotify.db;ls /home/pia/upload/gotify* -lh;docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db;');
interact_manual(f1, y=r'docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db')
#y.close()!docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db -`date +%Y-%m-%d`.db
#interact_manual(slow_function,x='echo "" | gotify push -p 1  ');
interact_manual(slow_function,x=a);
#interact_manual(slow_function,a);from ipywidgets import interact, interactive, fixed, interact_manual,Layout
import ipywidgets as widgets
import subprocess

a=widgets.Textarea(
    value="echo '' | gotify push -p 1",
    placeholder='Type something',
    description='String:',
    layout=Layout(width='550px', height='200px'),
    disabled=False
)
def slow_function(x):
    cmd(x)
    return x
    #ddd='cat r.sh'
def cmd(arg):
    p = subprocess.Popen(args=arg, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    single_html =p.stdout.read().decode(encoding="utf-8", errors="strict")
    print(single_html)

def f1(y):
    cmd(y)
    return y
interact_manual(f1, y=r'echo "select * from messages order by id desc limit 3" | sqlite3 /home/pia/pdf/gotify.db;ls /home/pia/upload/gotify* -lh;docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db;');
interact_manual(f1, y=r'docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db')
#y.close()!docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db -`date +%Y-%m-%d`.db
#interact_manual(slow_function,x='echo "" | gotify push -p 1  ');
interact_manual(slow_function,x=a);
#interact_manual(slow_function,a);from ipywidgets import interact, interactive, fixed, interact_manual,Layout
import ipywidgets as widgets
import subprocess

a=widgets.Textarea(
    value="echo '' | gotify push -p 1",
    placeholder='Type something',
    description='String:',
    layout=Layout(width='550px', height='200px'),
    disabled=False
)
def slow_function(x):
    cmd(x)
    return x
    #ddd='cat r.sh'
def cmd(arg):
    p = subprocess.Popen(args=arg, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    single_html =p.stdout.read().decode(encoding="utf-8", errors="strict")
    print(single_html)

def f1(y):
    cmd(y)
    return y
interact_manual(f1, y=r'echo "select * from messages order by id desc limit 3" | sqlite3 /home/pia/pdf/gotify.db;ls /home/pia/upload/gotify* -lh;docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db;');
interact_manual(f1, y=r'docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db')
#y.close()!docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db -`date +%Y-%m-%d`.db
#interact_manual(slow_function,x='echo "" | gotify push -p 1  ');
interact_manual(slow_function,x=a);
#interact_manual(slow_function,a);from ipywidgets import interact, interactive, fixed, interact_manual,Layout
import ipywidgets as widgets
import subprocess

a=widgets.Textarea(
    value="echo '' | gotify push -p 1",
    placeholder='Type something',
    description='String:',
    layout=Layout(width='550px', height='200px'),
    disabled=False
)
def slow_function(x):
    cmd(x)
    return x
    #ddd='cat r.sh'
def cmd(arg):
    p = subprocess.Popen(args=arg, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    single_html =p.stdout.read().decode(encoding="utf-8", errors="strict")
    print(single_html)

def f1(y):
    cmd(y)
    return y
interact_manual(f1, y=r'echo "select * from messages order by id desc limit 3" | sqlite3 /home/pia/pdf/gotify.db;ls /home/pia/upload/gotify* -lh;docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db;');
interact_manual(f1, y=r'docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db')
#y.close()!docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db -`date +%Y-%m-%d`.db
#interact_manual(slow_function,x='echo "" | gotify push -p 1  ');
interact_manual(slow_function,x=a);
#interact_manual(slow_function,a);https://kkgithub.com/aluzzardi/wsshhttps://kkgithub.com/aluzzardi/wsshwebsocat ws://ws.vi-server.org/mirror/https://github.com/wijnen/python-websocketd/tree/master/example/htmlnp.array(mask, dtype = np.int8--port=8080 sh -c 'sh 2>&1'--port=8080 sh -c 'sh 2>&1'--port=8080 sh -c 'sh 2>&1'window.__rpc = new RPC("浏览器A","45.32.200.249",5123)window.__rpc.register(getHostName)
window.__rpc.register(getCookie)import asyncio
import websockets
import paramiko

async def ssh_handler(websocket, path):
    ssh_client = paramiko.SSHClient()
    ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh_client.connect('your_server_ip', username='your_username', password='your_password')

    while True:
        try:
            command = await websocket.recv()
            stdin, stdout, stderr = ssh_client.exec_command(command)
            output = stdout.read().decode() + stderr.read().decode()
            await websocket.send(output)
        except websockets.exceptions.ConnectionClosed:
            break

    ssh_client.close()

start_server = websockets.serve(ssh_handler, "localhost", 8765)

asyncio.get_event_loop().run_until_complete(start_server)
asyncio.get_event_loop().run_forever()
.schemadir(conn.modules.sys.path)layout=Layout(width='50%', height='80px')[Jupyter Notebook Viewer](https://nbviewer.org/github/koldunovn/nk_public_notebooks/blob/master/Apache_log.ipynb)4、13个对前端开发有用的 Chrome 插件（英文）



本文介绍13个用于前端开发的 Chrome 插件。https://jsdevspace.substack.com/p/13-super-useful-chrome-plugins-for1、Presenterm



将 Markdown 文件转成幻灯片，在命令行播放的开源工具。（@lengyijun 投稿）8、OpenAuth



网页登录的第三方认证的集成库。9、Schemio



基于 Web 的示意图可视化编辑器。10、Buzee



一个桌面软件，提供本地文件的全文搜索（包括图片里面的文字），支持 Windows 和 Mac。6、浏览器的人脸检测能力（英文）



Chrome 浏览器已经支持 Shape Detection API，直接调用这个 API，不用加载任何外部库，就可以通过浏览器识别人脸和二维码。https://learnbyexample.github.io/atom.xml5、ffmpeg.wasm

ffmpeg 库的 wasm 移植，使得 Node.js 可以用这个库编辑视频。、PageSpeed Insights



谷歌官方的网页性能的在线评分工具。2、HTTP Toolkit

这个工具可以拦截和查看 HTTP/HTTPS 请求，并且可以 mock 服务器的回应。3、imgproxy

一个 Go 语言写的图片代理网关，可以代理远程图片，并且提供格式转换和大小缩放功能。8、Slouch stoppah

一个在线小工具，通过电脑摄像头，判断坐在屏幕前面的人的坐姿是否正确。javascript:(function () { var script = document.createElement('script'); script.src="https://cdn.jsdelivr.net/npm/eruda"; document.body.append(script); script.onload = function () { eruda.init(); } })();websocat ws://127.0.0.1:import json
import requests
import websocket


class Shell(object):
    def __init__(self, host='127.0.0.1', port=9222):
        """ init """
        self.host = host
        self.port = port
        self.soc = None
        self.connected = None
        self.tablist = None
        self.find_tabs()

    def connect(self, tab=None, update_tabs=True):
        if update_tabs or not self.tablist:
            self.find_tabs()
        if not tab:
            tab = 0
        wsurl = self.tablist[tab]['webSocketDebuggerUrl']
        #if self.soc.connected:
        #    self.soc.close()
        self.soc = websocket.create_connection(wsurl)
        return self.soc

    def close(self):
        """ Close websocket connection to remote browser."""
        if self.soc:
            self.soc.close()
            self.soc = None

    def find_tabs(self):
        """Connect to host:port and request list of tabs
             return list of dicts of data about open tabs."""
        # find websocket endpoint
        response = requests.get("http://%s:%s/json" % (self.host, self.port))
        self.tablist = json.loads(response.text)
        return self.tablist

    def open_url(self, url):
        """Open a URL in the oldest tab."""
        if not self.soc or not self.soc.connected:
            self.connect(tab=0)
        # force the 'oldest' tab to load url
        navcom = json.dumps({"id": 0,
                             "method": "Page.navigate",
                             "params": {"url": url}})
        # This code would open a new window, but browsers really dont
        # like doing so.  And, the results are irritating at best.
        # navcom=json.dumps({"id":0,"method":"Runtime.evaluate",
        #  "params":{"expression": "window.open('%s', #'_blank',
        # 'toolbar=1,scrollbars=1,location=1,statusbar=0,menubar=1,resizable=1'
        # )" % (url) }})Runtime.evaluate
        self.soc.send(navcom)
        return self.soc.recv()
shell = Shell(host='127.0.0.1', port=9222)  
#shell.connect(0)
#url = 'http://www.clift.org/fred' # shameless
url = 'http://example.com' # shameless
#navcom = json.dumps({"id":0, "method":"Target.createTarget", "params":{"url":url}})
#shell.soc.send(navcom)
shell.connect(0)
navcom = json.dumps({"id":0, "method":"Network.getCookies", "params":{"url":url}})
shell.soc.send(navcom)
response = json.loads(shell.soc.recv())

print(len(shell.find_tabs()))
print(shell.find_tabs()[1]["url"])
#print(shell.find_tabs()[1])
print(response)import json
import requests
import websocket


class Shell(object):
    def __init__(self, host='127.0.0.1', port=9222):
        """ init """
        self.host = host
        self.port = port
        self.soc = None
        self.connected = None
        self.tablist = None
        self.find_tabs()

    def connect(self, tab=None, update_tabs=True):
        if update_tabs or not self.tablist:
            self.find_tabs()
        if not tab:
            tab = 0
        wsurl = self.tablist[tab]['webSocketDebuggerUrl']
        #if self.soc.connected:
        #    self.soc.close()
        self.soc = websocket.create_connection(wsurl)
        return self.soc

    def close(self):
        """ Close websocket connection to remote browser."""
        if self.soc:
            self.soc.close()
            self.soc = None

    def find_tabs(self):
        """Connect to host:port and request list of tabs
             return list of dicts of data about open tabs."""
        # find websocket endpoint
        response = requests.get("http://%s:%s/json" % (self.host, self.port))
        self.tablist = json.loads(response.text)
        return self.tablist

    def open_url(self, url):
        """Open a URL in the oldest tab."""
        if not self.soc or not self.soc.connected:
            self.connect(tab=0)
        # force the 'oldest' tab to load url
        navcom = json.dumps({"id": 0,
                             "method": "Page.navigate",
                             "params": {"url": url}})
        # This code would open a new window, but browsers really dont
        # like doing so.  And, the results are irritating at best.
        # navcom=json.dumps({"id":0,"method":"Runtime.evaluate",
        #  "params":{"expression": "window.open('%s', #'_blank',
        # 'toolbar=1,scrollbars=1,location=1,statusbar=0,menubar=1,resizable=1'
        # )" % (url) }})Runtime.evaluate
        self.soc.send(navcom)
        return self.soc.recv()
shell = Shell(host='127.0.0.1', port=9222)  
#shell.connect(0)
#url = 'http://www.clift.org/fred' # shameless
url = 'http://example.com' # shameless
#navcom = json.dumps({"id":0, "method":"Target.createTarget", "params":{"url":url}})
#shell.soc.send(navcom)
shell.connect(0)
navcom = json.dumps({"id":0, "method":"Network.getCookies", "params":{"url":url}})
shell.soc.send(navcom)
response = json.loads(shell.soc.recv())

print(len(shell.find_tabs()))
print(shell.find_tabs()[1]["url"])
#print(shell.find_tabs()[1])
print(response)https://panel4.serv00.com/mysql/github/koldunovn/nk_public_notebooks/blob/master/Apache_log.ipynbhttps://raw.githubusercontent.com/koldunovn/nk_public_notebooks/master/Apache_log.ipynbselect * from messagesjavascript:date = new Date();
url_root = 'http://nbviewer.ipython.org/';
url = null;
gist_re = /^https?:\/\/gist\.github\.com\/(?:\w+\/)?([a-f0-9]+)$/;
github_re = /^https:\/\/(github\.com\/.*\/)blob\/(.*\.ipynb)$/;
https_re = /^https:\/\/(.*\.ipynb)$/;
http_re = /^http:\/\/(.*\.ipynb)$/;
loc = location.href;
if (gist_re.test(loc)) {
    gist = gist_re.exec(loc);
    url = url_root + gist[1];
} else if (github_re.test(loc)) {
    path = github_re.exec(loc);
    url = url_root + 'urls/raw.' + path[1] + path[2];
} else if (https_re.test(loc)) {
    path = https_re.exec(loc);
    url = url_root + 'urls/' + path[1];
} else if (http_re.test(loc)) {
    path = http_re.exec(loc);
    url = url_root + 'url/' + path[1];}
if (url) {void(window.open(url, 'nbviewer' + date.getTime()));}javascript:date = new Date();
url_root = 'http://nbviewer.ipython.org/';
url = null;
gist_re = /^https?:\/\/gist\.github\.com\/(?:\w+\/)?([a-f0-9]+)$/;
github_re = /^https:\/\/(github\.com\/.*\/)blob\/(.*\.ipynb)$/;
https_re = /^https:\/\/(.*\.ipynb)$/;
http_re = /^http:\/\/(.*\.ipynb)$/;
loc = location.href;
if (gist_re.test(loc)) {
    gist = gist_re.exec(loc);
    url = url_root + gist[1];
} else if (github_re.test(loc)) {
    path = github_re.exec(loc);
    url = url_root + 'urls/raw.' + path[1] + path[2];
} else if (https_re.test(loc)) {
    path = https_re.exec(loc);
    url = url_root + 'urls/' + path[1];
} else if (http_re.test(loc)) {
    path = http_re.exec(loc);
    url = url_root + 'url/' + path[1];}
if (url) {void(window.open(url, 'nbviewer' + date.getTime()));}display(slider)pip install jupyterlab-deckpip install jupyterlab-deckpip install jupyterlab-deckpip install jupyterlab_risepip install nbslidejupyter labextension install jupyterlab_vim{
 "nbformat": 4,
 "nbformat_minor": 2,
 "metadata": {
  "language_info": {
   "name": "python",
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "version": "3.6.8-final"
  },
  "orig_nbformat": 2,
  "file_extension": ".py",
  "mimetype": "text/x-python",
  "name": "python",
  "npconvert_exporter": "python",
  "pygments_lexer": "ipython3",
  "version": 3,
  "kernelspec": {
   "name": "python36864bitjupyterapipipenv100023b4210342f0b1028e92ab62ef71",
   "display_name": "Python 3.6.8 64-bit ('jupyter-api': pipenv)"
  }
 },
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "import datetime\n",
    "import requests\n",
    "import pandas as pd\n",
    "import inspect\n",
    "from inspect import getsourcefile\n",
    "from requests_html import HTML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename     = inspect.getframeinfo(inspect.currentframe()).filename\n",
    "BASE_DIR     = os.path.dirname(os.path.abspath(filename))\n",
    "DATA_DIR     = os.path.join(os.path.dirname(BASE_DIR), 'data')\n",
    "os.makedirs(DATA_DIR, exist_ok=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def url_to_txt(url, filename=\"world.html\", save=False):\n",
    "    r = requests.get(url)\n",
    "    if r.status_code == 200:\n",
    "        html_text = r.text\n",
    "        if save:\n",
    "            with open(f\"world-{year}.html\", 'w') as f:\n",
    "                f.write(html_text)\n",
    "        return html_text\n",
    "    return None\n",
    "\n",
    "\n",
    "def parse_and_extract(url, name='2020'):\n",
    "    html_text = url_to_txt(url)\n",
    "    if html_text == None:\n",
    "        return False\n",
    "    r_html = HTML(html=html_text)\n",
    "    table_class = \".imdb-scroll-table\"\n",
    "    # table_class = \"#table\"\n",
    "    r_table = r_html.find(table_class)\n",
    "\n",
    "    # print(r_table)\n",
    "    table_data = []\n",
    "    # table_data_dicts = []\n",
    "    header_names = []\n",
    "    if len(r_table) == 0:\n",
    "        return False\n",
    "    parsed_table = r_table[0]\n",
    "    rows = parsed_table.find(\"tr\")\n",
    "    header_row = rows[0]\n",
    "    header_cols = header_row.find('th')\n",
    "    header_names = [x.text for x in header_cols]\n",
    "    for row in rows[1:]:\n",
    "        # print(row.text)\n",
    "        cols = row.find(\"td\")\n",
    "        row_data = []\n",
    "        row_dict_data = {}\n",
    "        for i, col in enumerate(cols):\n",
    "            # print(i, col.text, '\\n\\n')\n",
    "            header_name = header_names[i]\n",
    "            # row_dict_data[header_name] = col.text\n",
    "            row_data.append(col.text)\n",
    "        # table_data_dicts.append(row_dict_data)\n",
    "        table_data.append(row_data)\n",
    "    df = pd.DataFrame(table_data, columns=header_names)\n",
    "    # df = pd.DataFrame(table_data_dicts)\n",
    "    datadir_path = DATA_DIR\n",
    "    os.makedirs(datadir_path, exist_ok=True)\n",
    "    filepath = os.path.join(datadir_path, f'{name}.csv')\n",
    "    df.to_csv(filepath, index=False)\n",
    "    return True\n",
    "\n",
    "def run(start_year=None, years_ago=0):\n",
    "    if start_year == None:\n",
    "        now = datetime.datetime.now()\n",
    "        start_year = now.year\n",
    "    assert isinstance(start_year, int)\n",
    "    assert isinstance(years_ago, int)\n",
    "    assert len(f\"{start_year}\") == 4\n",
    "    for i in range(0, years_ago+1):\n",
    "        url = f\"https://www.boxofficemojo.com/year/world/{start_year}/\"\n",
    "        finished = parse_and_extract(url, name=start_year)\n",
    "        if finished:\n",
    "            print(f\"Finished {start_year}\")\n",
    "        else:\n",
    "            print(f\"{start_year} not finished\")\n",
    "        start_year -= 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "Finished 2020\n"
    }
   ],
   "source": [
    "run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ]
}{
 "nbformat": 4,
 "nbformat_minor": 2,
 "metadata": {
  "language_info": {
   "name": "python",
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "version": "3.6.8-final"
  },
  "orig_nbformat": 2,
  "file_extension": ".py",
  "mimetype": "text/x-python",
  "name": "python",
  "npconvert_exporter": "python",
  "pygments_lexer": "ipython3",
  "version": 3,
  "kernelspec": {
   "name": "python36864bitjupyterapipipenv100023b4210342f0b1028e92ab62ef71",
   "display_name": "Python 3.6.8 64-bit ('jupyter-api': pipenv)"
  }
 },
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "import datetime\n",
    "import requests\n",
    "import pandas as pd\n",
    "import inspect\n",
    "from inspect import getsourcefile\n",
    "from requests_html import HTML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename     = inspect.getframeinfo(inspect.currentframe()).filename\n",
    "BASE_DIR     = os.path.dirname(os.path.abspath(filename))\n",
    "DATA_DIR     = os.path.join(os.path.dirname(BASE_DIR), 'data')\n",
    "os.makedirs(DATA_DIR, exist_ok=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def url_to_txt(url, filename=\"world.html\", save=False):\n",
    "    r = requests.get(url)\n",
    "    if r.status_code == 200:\n",
    "        html_text = r.text\n",
    "        if save:\n",
    "            with open(f\"world-{year}.html\", 'w') as f:\n",
    "                f.write(html_text)\n",
    "        return html_text\n",
    "    return None\n",
    "\n",
    "\n",
    "def parse_and_extract(url, name='2020'):\n",
    "    html_text = url_to_txt(url)\n",
    "    if html_text == None:\n",
    "        return False\n",
    "    r_html = HTML(html=html_text)\n",
    "    table_class = \".imdb-scroll-table\"\n",
    "    # table_class = \"#table\"\n",
    "    r_table = r_html.find(table_class)\n",
    "\n",
    "    # print(r_table)\n",
    "    table_data = []\n",
    "    # table_data_dicts = []\n",
    "    header_names = []\n",
    "    if len(r_table) == 0:\n",
    "        return False\n",
    "    parsed_table = r_table[0]\n",
    "    rows = parsed_table.find(\"tr\")\n",
    "    header_row = rows[0]\n",
    "    header_cols = header_row.find('th')\n",
    "    header_names = [x.text for x in header_cols]\n",
    "    for row in rows[1:]:\n",
    "        # print(row.text)\n",
    "        cols = row.find(\"td\")\n",
    "        row_data = []\n",
    "        row_dict_data = {}\n",
    "        for i, col in enumerate(cols):\n",
    "            # print(i, col.text, '\\n\\n')\n",
    "            header_name = header_names[i]\n",
    "            # row_dict_data[header_name] = col.text\n",
    "            row_data.append(col.text)\n",
    "        # table_data_dicts.append(row_dict_data)\n",
    "        table_data.append(row_data)\n",
    "    df = pd.DataFrame(table_data, columns=header_names)\n",
    "    # df = pd.DataFrame(table_data_dicts)\n",
    "    datadir_path = DATA_DIR\n",
    "    os.makedirs(datadir_path, exist_ok=True)\n",
    "    filepath = os.path.join(datadir_path, f'{name}.csv')\n",
    "    df.to_csv(filepath, index=False)\n",
    "    return True\n",
    "\n",
    "def run(start_year=None, years_ago=0):\n",
    "    if start_year == None:\n",
    "        now = datetime.datetime.now()\n",
    "        start_year = now.year\n",
    "    assert isinstance(start_year, int)\n",
    "    assert isinstance(years_ago, int)\n",
    "    assert len(f\"{start_year}\") == 4\n",
    "    for i in range(0, years_ago+1):\n",
    "        url = f\"https://www.boxofficemojo.com/year/world/{start_year}/\"\n",
    "        finished = parse_and_extract(url, name=start_year)\n",
    "        if finished:\n",
    "            print(f\"Finished {start_year}\")\n",
    "        else:\n",
    "            print(f\"{start_year} not finished\")\n",
    "        start_year -= 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "Finished 2020\n"
    }
   ],
   "source": [
    "run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ]
}conda env create -f environment.ymljupyter2slideshttps://github.com/hkust-dh/jupyter-slides-demo.gitjupyter<script type="text/template">pip install -r requirements.txtimport nbformat
from nbconvert.preprocessors import ExecutePreprocessor

def trigger(notebook_filename='chp-traffic.ipynb'):
    with open(notebook_filename) as f:
        nb = nbformat.read(f, as_version=4)
    ep = ExecutePreprocessor(timeout=600, kernel_name='python3')
    r = ep.preprocess(nb)
    return rpip install jupyterlab-code-foldingjupyterlab-vimfrom ipywidgets import interact, interactive, fixed, interact_manual,Layout
import ipywidgets as widgets
import subprocess

a=widgets.Textarea(

    value="echo '' | gotify push -p 1",
    placeholder='Type something',
    description='String:',
    layout=Layout(width='550px', height='200px'),
    disabled=False

)
def slow_function(x):
    cmd(x)
    return x
    #ddd='cat r.sh'
def cmd(arg):
    p = subprocess.Popen(args=arg, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    single_html =p.stdout.read().decode(encoding="utf-8", errors="strict")
    print(single_html)

def f1(y):
    cmd(y)
    return y
interact_manual(f1, y=r'echo "select * from messages order by id desc limit 3" | sqlite3 /home/pia/pdf/gotify.db;ls /home/pia/upload/gotify-2014*.db')
from ipywidgets import interact, interactive, fixed, interact_manual,Layout
import ipywidgets as widgets
import subprocess

a=widgets.Textarea(

    value="echo '' | gotify push -p 1",
    placeholder='Type something',
    description='String:',
    layout=Layout(width='550px', height='200px'),
    disabled=False

)
def slow_function(x):
    cmd(x)
    return x
    #ddd='cat r.sh'
def cmd(arg):
    p = subprocess.Popen(args=arg, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    single_html =p.stdout.read().decode(encoding="utf-8", errors="strict")
    print(single_html)

def f1(y):
    cmd(y)
    return y
interact_manual(f1, y=r'echo "select * from messages order by id desc limit 3" | sqlite3 /home/pia/pdf/gotify.db;ls /home/pia/upload/gotify-2014*.db')
9YeExykKItI-Jf2r-AHAz5eAXH3MZx3G5zs7Vj1BWPghttps://binder.curvenote.dev/https://binder.curvenote.dev/from fasthtml.common import *
from collections import deque

app, rt = fast_app(exts='ws')

# All messages here, but only most recent 15 are stored
messages = deque(maxlen=15)
users = {}

# Takes all the messages and renders them
box_style = "border: 1px solid #ccc; border-radius: 10px; padding: 10px; margin: 5px 0;"
def render_messages(messages):
    return Div(*[Div(m, style=box_style) for m in messages], id='msg-list')

# Input field is reset via hx_swap_oob after submitting a message
def mk_input(): return Input(id='msg', placeholder="Type your message", value="", hx_swap_oob="true")

@rt
def index():
    return Titled("Leave a message for others!"),Div(
        Form(mk_input(), ws_send=True), # input field
        P("Leave a message for others!"),
        Div(render_messages(messages),id='msg-list'), # All the Messages
        hx_ext='ws', ws_connect='ws') # Use a web socket 

def on_connect(ws, send): users[id(ws)] = send
def on_disconnect(ws):users.pop(id(ws),None)

@app.ws('/ws', conn=on_connect, disconn=on_disconnect)
async def ws(msg:str,send):
    await send(mk_input()) # reset the input field immediately
    messages.appendleft(msg) # New messages first
    for u in users.values(): # Get `send` function for a user
        await u(render_messages(messages)) # Send the message to that user

serve()from fasthtml.common import *
from collections import deque

app, rt = fast_app(exts='ws')

# All messages here, but only most recent 15 are stored
messages = deque(maxlen=15)
users = {}

# Takes all the messages and renders them
box_style = "border: 1px solid #ccc; border-radius: 10px; padding: 10px; margin: 5px 0;"
def render_messages(messages):
    return Div(*[Div(m, style=box_style) for m in messages], id='msg-list')

# Input field is reset via hx_swap_oob after submitting a message
def mk_input(): return Input(id='msg', placeholder="Type your message", value="", hx_swap_oob="true")

@rt
def index():
    return Titled("Leave a message for others!"),Div(
        Form(mk_input(), ws_send=True), # input field
        P("Leave a message for others!"),
        Div(render_messages(messages),id='msg-list'), # All the Messages
        hx_ext='ws', ws_connect='ws') # Use a web socket 

def on_connect(ws, send): users[id(ws)] = send
def on_disconnect(ws):users.pop(id(ws),None)

@app.ws('/ws', conn=on_connect, disconn=on_disconnect)
async def ws(msg:str,send):
    await send(mk_input()) # reset the input field immediately
    messages.appendleft(msg) # New messages first
    for u in users.values(): # Get `send` function for a user
        await u(render_messages(messages)) # Send the message to that user

serve()--no-use-pep517--no-use-pep517conda create -n binderhub-in-a-box -f environment.ymlTypeError: unsupported operand type(s) for |: 'type' and 'type'import socket

def main():
    # 创建一个TCP套接字
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    # 绑定IP地址和端口
    server_socket.bind(('127.0.0.1', 12346))

    # 监听连接
    server_socket.listen(5)

    print("服务器已启动，等待客户端连接...")

    while True:
        # 接受客户端连接
        client_socket, client_address = server_socket.accept()
        print(f"客户端{client_address}已连接")

        # 接收客户端发送的数据
        data = client_socket.recv(1024)
        print(f"收到来自{client_address}的数据： {data.decode('utf-8')}")

        # 将接收到的数据发送回客户端
        client_socket.send(data)
        print(f"已将数据发送回{client_address}")

        # 关闭客户端套接字
        client_socket.close()
        print(f"客户端{client_address}已断开连接")

if __name__ == "__main__":
    main()loop = asyncio.get_event_loop()const WebSocket = require('ws');

// 替换为你的 WebSocket 服务器地址
const socket = new WebSocket("ws://10.10.49.172:8765");

// 监听连接打开事件
socket.addEventListener("open", (event) => {
    console.log("WebSocket connection opened.");

    // 构造二进制数据，这里使用一个简单的示例
    const binaryData = new Uint8Array([49, 50, 51, 52]);

    // 发送二进制数据
    socket.send(binaryData);

    console.log("Binary data sent successfully.");
});

// 监听接收消息事件
socket.addEventListener("message", (event) => {
    console.log("Received message:", event.data);
});

// 监听连接关闭事件
socket.addEventListener("close", (event) => {
    console.log("WebSocket connection closed.");
});

// 监听错误事件
socket.addEventListener("error", (event) => {
    console.error("WebSocket error:", event);
});websocket<!DOCTYPE html>
<pre id="log"></pre>
<script>
  // helper function: log message to screen
  function log(msg) {
    document.getElementById('log').textContent += msg + '\n';
  }

  // setup websocket with callbacks
  var ws = new WebSocket('ws://localhost:8080/');
  ws.onopen = function() {
    log('CONNECT');
  };
  ws.onclose = function() {
    log('DISCONNECT');
  };
  ws.onmessage = function(event) {
    log('MESSAGE: ' + event.data);
  };
</script><script src="https://res.zvo.cn/websocket.js/websocket.js"></script>

/*
websocket.connect({
	url:'ws://localhost:8081/', //服务端的WebSocket地址
	onopen:function(){ //如果不需要，此不传即可。
		websocket.send({"type":"CONNECT","token":"123456"}); //当WebSocket通道连接成功后，自动给服务器发送一条json格式的消息
	},
	onmessage:function(message){ //如果不需要，此不传即可
		//console.log(message); //服务端发送来的消息会在这里接收到
		document.getElementById('showMessage').innerHTML = JSON.stringify(message) + '<br/>' + document.getElementById('showMessage').innerHTML;
	}
});
*/
</script><script src="https://res.zvo.cn/websocket.js/websocket.js"></script>

/*
websocket.connect({
	url:'ws://localhost:8081/', //服务端的WebSocket地址
	onopen:function(){ //如果不需要，此不传即可。
		websocket.send({"type":"CONNECT","token":"123456"}); //当WebSocket通道连接成功后，自动给服务器发送一条json格式的消息
	},
	onmessage:function(message){ //如果不需要，此不传即可
		//console.log(message); //服务端发送来的消息会在这里接收到
		document.getElementById('showMessage').innerHTML = JSON.stringify(message) + '<br/>' + document.getElementById('showMessage').innerHTML;
	}
});
*/
</script> ./websocketd --port=8765 ./count.shpip install --upgrade jinja2<!DOCTYPE HTML>
<html>
<head>
    <title>Flask-SocketIO Test</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js" integrity="sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/3.0.4/socket.io.js" integrity="sha512-aMGMvNYu8Ue4G+fHa359jcPb1u+ytAF+P2SCb+PxrjCdO3n3ZTxJ30zuH39rimUggmTwmh2u7wvQsDTHESnmfQ==" crossorigin="anonymous"></script>
    <script type="text/javascript" charset="utf-8">
        $(document).ready(function() {
            // Connect to the Socket.IO server.
            // The connection URL has the following format, relative to the current page:
            //     http[s]://<domain>:<port>[/<namespace>]
            var socket = io.connect('http://' + document.domain + ':' + location.port);

            // Event handler for new connections.
            // The callback function is invoked when a connection with the
            // server is established.
            socket.on('connect', function() {
                socket.emit('my_event', {data: 'I\'m connected!'});
            });

            // Event handler for server sent data.
            // The callback function is invoked whenever the server emits data
            // to the client. The data is then displayed in the "Received"
            // section of the page.
            socket.on('my_response', function(msg, cb) {
                $('#log').append('<br>' + $('<div/>').text('Received #' + msg.count + ': ' + msg.data).html());
                if (cb)
                    cb();
            });

            // Interval function that tests message latency by sending a "ping"
            // message. The server then responds with a "pong" message and the
            // round trip time is measured.
            var ping_pong_times = [];
            var start_time;
            window.setInterval(function() {
                start_time = (new Date).getTime();
                $('#transport').text(socket.io.engine.transport.name);
                socket.emit('my_ping');
            }, 1000);

            // Handler for the "pong" message. When the pong is received, the
            // time from the ping is stored, and the average of the last 30
            // samples is average and displayed.
            socket.on('my_pong', function() {
                var latency = (new Date).getTime() - start_time;
                ping_pong_times.push(latency);
                ping_pong_times = ping_pong_times.slice(-30); // keep last 30 samples
                var sum = 0;
                for (var i = 0; i < ping_pong_times.length; i++)
                    sum += ping_pong_times[i];
                $('#ping-pong').text(Math.round(10 * sum / ping_pong_times.length) / 10);
            });

            // Handlers for the different forms in the page.
            // These accept data from the user and send it to the server in a
            // variety of ways
            $('form#emit').submit(function(event) {
                socket.emit('my_event', {data: $('#emit_data').val()});
                return false;
            });
            $('form#broadcast').submit(function(event) {
                socket.emit('my_broadcast_event', {data: $('#broadcast_data').val()});
                return false;
            });
            $('form#join').submit(function(event) {
                socket.emit('join', {room: $('#join_room').val()});
                return false;
            });
            $('form#leave').submit(function(event) {
                socket.emit('leave', {room: $('#leave_room').val()});
                return false;
            });
            $('form#send_room').submit(function(event) {
                socket.emit('my_room_event', {room: $('#room_name').val(), data: $('#room_data').val()});
                return false;
            });
            $('form#close').submit(function(event) {
                socket.emit('close_room', {room: $('#close_room').val()});
                return false;
            });
            $('form#disconnect').submit(function(event) {
                socket.emit('disconnect_request');
                return false;
            });
        });
    </script>
</head>
<body>
    <h1>Flask-SocketIO Test</h1>
    <p>
      Async mode is: <b>{{ async_mode }}</b><br>
      Current transport is: <b><span id="transport"></span></b><br>
      Average ping/pong latency: <b><span id="ping-pong"></span>ms</b>
    </p>
    <h2>Send:</h2>
    <form id="emit" method="POST" action='#'>
        <input type="text" name="emit_data" id="emit_data" placeholder="Message">
        <input type="submit" value="Echo">
    </form>
    <form id="broadcast" method="POST" action='#'>
        <input type="text" name="broadcast_data" id="broadcast_data" placeholder="Message">
        <input type="submit" value="Broadcast">
    </form>
    <form id="join" method="POST" action='#'>
        <input type="text" name="join_room" id="join_room" placeholder="Room Name">
        <input type="submit" value="Join Room">
    </form>
    <form id="leave" method="POST" action='#'>
        <input type="text" name="leave_room" id="leave_room" placeholder="Room Name">
        <input type="submit" value="Leave Room">
    </form>
    <form id="send_room" method="POST" action='#'>
        <input type="text" name="room_name" id="room_name" placeholder="Room Name">
        <input type="text" name="room_data" id="room_data" placeholder="Message">
        <input type="submit" value="Send to Room">
    </form>
    <form id="close" method="POST" action="#">
        <input type="text" name="close_room" id="close_room" placeholder="Room Name">
        <input type="submit" value="Close Room">
    </form>
    <form id="disconnect" method="POST" action="#">
        <input type="submit" value="Disconnect">
    </form>
    <h2>Receive:</h2>
    <div id="log"></div>
</body>
</html>from threading import Lock
from flask import Flask, render_template, session, request, copy_current_request_context
from flask_socketio import SocketIO, emit, join_room, leave_room, close_room, rooms, disconnect

# Set this variable to "threading", "eventlet" or "gevent" to test the
# different async modes, or leave it set to None for the application to choose
# the best option based on installed packages.
async_mode = None

app = Flask(__name__)
app.config['SECRET_KEY'] = 'secret!'
socketio = SocketIO(app, async_mode=async_mode)
thread = None
thread_lock = Lock()


def background_thread():
    """Example of how to send server generated events to clients."""
    count = 0
    while True:
        socketio.sleep(10)
        count += 1
        socketio.emit('my_response',
                      {'data': 'Server generated event', 'count': count})


@app.route('/')
def index():
    return render_template('index.html', async_mode=socketio.async_mode)


@socketio.event
def my_event(message):
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response',
         {'data': message['data'], 'count': session['receive_count']})


@socketio.event
def my_broadcast_event(message):
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response',
         {'data': message['data'], 'count': session['receive_count']},
         broadcast=True)


@socketio.event
def join(message):
    join_room(message['room'])
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response',
         {'data': 'In rooms: ' + ', '.join(rooms()),
          'count': session['receive_count']})


@socketio.event
def leave(message):
    leave_room(message['room'])
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response',
         {'data': 'In rooms: ' + ', '.join(rooms()),
          'count': session['receive_count']})


@socketio.on('close_room')
def on_close_room(message):
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response', {'data': 'Room ' + message['room'] + ' is closing.',
                         'count': session['receive_count']},
         to=message['room'])
    close_room(message['room'])


@socketio.event
def my_room_event(message):
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response',
         {'data': message['data'], 'count': session['receive_count']},
         to=message['room'])


@socketio.event
def disconnect_request():
    @copy_current_request_context
    def can_disconnect():
        disconnect()
    session['receive_count'] = session.get('receive_count', 0) + 1
    # for this emit we use a callback function
    # when the callback function is invoked we know that the message has been
    # received and it is safe to disconnect
    emit('my_response',
         {'data': 'Disconnected!', 'count': session['receive_count']},
         callback=can_disconnect)


@socketio.event
def my_ping():
    emit('my_pong')


@socketio.event
def connect():
    global thread
    with thread_lock:
        if thread is None:
            thread = socketio.start_background_task(background_thread)
    emit('my_response', {'data': 'Connected', 'count': 0})


@socketio.on('disconnect')
def test_disconnect():
    print('Client disconnected', request.sid)


if __name__ == '__main__':
    socketio.run(app, host='0.0.0.0', debug=True)
send-receive.sh<!DOCTYPE html>
<pre id="log"></pre>
<script>
  // helper function: log message to screen
  function log(msg) {
    document.getElementById('log').textContent += msg + '\n';
  }

  // setup websocket with callbacks
  var ws = new WebSocket('ws://localhost:8080/');
  ws.onopen = function() {
    log('CONNECT');
  };
  ws.onclose = function() {
    log('DISCONNECT');
  };
  ws.onmessage = function(event) {
    log('MESSAGE: ' + event.data);
  };
</script>echo $REPLYecho $REPLYhttp://45.32.200.249:1234/count.sh# Then access http://localhost:1234/dump-env.sh
#You can also test the command files by running from the command line.www.example.com/socketserverTypeError: WS_Server.echo() missing 1 required positional argument: 'path'npm install -g json-socket-serverimport requests

js_code = """
(function(){
    console.log("test")
    return "执行成功"
})()
"""

url = "http://localhost:12080/execjs"
data = {
    "group": "zzz",
    "code": js_code
}
res = requests.post(url, data=data)
print(res.text)https://kkgithub.com/sixgad/py-jsrpc.gitfunction JsClient(wsURL) {
    this.wsURL = wsURL;
    this.handlers = {};
    this.socket = {};
    if (!wsURL) {
        throw new Error('wsURL can not be empty!!')
    }
    this.webSocketFactory = this.resolveWebSocketFactory();
    this.connect()
}

JsClient.prototype.resolveWebSocketFactory = function () {
    if (typeof window === 'object') {
        var theWebSocket = window.WebSocket ? window.WebSocket : window.MozWebSocket;
        return function (wsURL) {

            function WindowWebSocketWrapper(wsURL) {
                this.mSocket = new theWebSocket(wsURL);
            }

            WindowWebSocketWrapper.prototype.close = function () {
                this.mSocket.close();
            };

            WindowWebSocketWrapper.prototype.onmessage = function (onMessageFunction) {
                this.mSocket.onmessage = onMessageFunction;
            };

            WindowWebSocketWrapper.prototype.onopen = function (onOpenFunction) {
                this.mSocket.onopen = onOpenFunction;
            };
            WindowWebSocketWrapper.prototype.onclose = function (onCloseFunction) {
                this.mSocket.onclose = onCloseFunction;
            };

            WindowWebSocketWrapper.prototype.send = function (message) {
                this.mSocket.send(message);
            };

            return new WindowWebSocketWrapper(wsURL);
        }
    }
    if (typeof weex === 'object') {
        try {
            console.log("test webSocket for weex");
            var ws = weex.requireModule('webSocket');
            console.log("find webSocket for weex:" + ws);
            return function (wsURL) {
                try {
                    ws.close();
                } catch (e) {
                }
                ws.WebSocket(wsURL, '');
                return ws;
            }
        } catch (e) {
            console.log(e);
        }
    }
    if (typeof WebSocket === 'object') {
        return function (wsURL) {
            return new theWebSocket(wsURL);
        }
    }
    throw new Error("the js environment do not support websocket");
};

JsClient.prototype.connect = function () {
    console.log('jsclient begin of connect to wsURL: ' + this.wsURL);
    var _this = this;
    try {
        this.socket = this.webSocketFactory(this.wsURL);
    } catch (e) {
        console.log("jsclient create connection failed,reconnect after 2s");
        setTimeout(function () {
            _this.connect()
        }, 2000)
    }

    this.socket.onmessage(function (event) {
        _this.handleJsClientRequest(event.data)
    });

    this.socket.onopen(function (event) {
        console.log('jsclient open a connection')
    });

    this.socket.onclose(function (event) {
        console.log('jsclient disconnected ,reconnection after 2s');
        setTimeout(function () {
            _this.connect()
        }, 2000)
    });
};

JsClient.prototype.handleJsClientRequest = function (requestJson) {
    console.log("receive request: " + requestJson);
    var request = JSON.parse(requestJson);
    var seq = request['__uuid_seq__'];

    if (!request['action']) {
        this.sendFailed(seq, 'need request param {action}');
        return
    }
    var action = request['action'];
    if (!this.handlers[action]) {
        this.sendFailed(seq, 'no action handler: ' + action + ' defined');
        return
    }

    var theHandler = this.handlers[action];
    var _this = this;
    try {
        theHandler(request, function (response) {
            try {
                _this.sendSuccess(seq, response)
            } catch (e) {
                _this.sendFailed(seq, "e:" + e);
            }
        }, function (errorMessage) {
            _this.sendFailed(seq, errorMessage)
        })
    } catch (e) {
        console.log("error: " + e);
        _this.sendFailed(seq, ":" + e);
    }
};

JsClient.prototype.sendSuccess = function (seq, response) {
    var responseJson;
    if (typeof response == 'string') {
        try {
            responseJson = JSON.parse(response);
        } catch (e) {
            responseJson = {};
            responseJson['data'] = response;
        }
    } else if (typeof response == 'object') {
        responseJson = response;
    } else {
        responseJson = {};
        responseJson['data'] = response;
    }

    if (Array.isArray(responseJson)) {
        responseJson = {
            data: responseJson,
            code: 0
        }
    }

    if (responseJson['code']) {
        responseJson['code'] = 0;
    } else if (responseJson['status']) {
        responseJson['status'] = 0;
    } else {
        responseJson['status'] = 0;
    }
    responseJson['__uuid_seq__'] = seq;
    var responseText = JSON.stringify(responseJson);
    console.log("response :" + responseText);
    this.socket.send(responseText);
};

JsClient.prototype.sendFailed = function (seq, errorMessage) {
    if (typeof errorMessage != 'string') {
        errorMessage = JSON.stringify(errorMessage);
    }
    var responseJson = {};
    responseJson['message'] = errorMessage;
    responseJson['status'] = -1;
    responseJson['__uuid_seq__'] = seq;
    var responseText = JSON.stringify(responseJson);
    console.log("jsclient response :" + responseText);
    this.socket.send(responseText)
};

JsClient.prototype.registerAction = function (action, handler) {
    if (typeof action !== 'string') {
        throw new Error("an action must be string");
    }
    if (typeof handler !== 'function') {
        throw new Error("a handler must be function");
    }
    console.log("jsclient register action: " + action);
    this.handlers[action] = handler;
    return this;
};
function guid() {
    function S4() {
        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
    }
    return (S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4() + S4());
}# -*- coding: utf-8 -*-
# @Time   : 2021/7/13 21:18
# @Author : zp
# @Python3.7
import asyncio
import websockets
import json
from loguru import logger
from sanic import Sanic, response
import threading
from back_socket_server import ws_run

app = Sanic(__name__)


@app.route('/send', methods=['GET'])
async def get_request(request):
    # http://127.0.0.1:5000/send?group=ws-group&action=clientTime
    args_dic = {}
    for params in request.query_args:
        args_dic[params[0]] = str(params[1])
    if "action" not in args_dic:
        return response.json({"error": "need action"})
    group = args_dic.pop('group')
    async with websockets.connect(f'ws://localhost:6789/invoke?group={group}') as websocket:
        await websocket.send(json.dumps(args_dic))
        res = await websocket.recv()
        logger.info(res)
    return response.json(json.loads(res))


if __name__ == '__main__':
    app.add_task(ws_run())
    app.run(debug=False, host="127.0.0.1", port=5000)@app.main_process_startapp.add_task(ws_run()) gotify push -p 1 ""  | gotify push -p 1var aaa=" gotify push  -t " + "title:" + "'" + encodeURI(document.title)+"'" +" -p 1 " + document.URL
//alert(aaa)
window.open('http://45.32.200.249:8060/ddd?url=ddd&ddd='+aaa)var aaa=" gotify push  -t " + "title:" + "'" + encodeURI(document.title)+"'" +" -p 1 " + document.URL
//alert(aaa)
window.open('http://45.32.200.249:8060/ddd?url=ddd&ddd='+aaa)var aaa=" gotify push  -t " + "title:" + "'" + encodeURI(document.title)+"'" +" -p 1 " + document.URL
//alert(aaa)
window.open('http://45.32.200.249:8060/ddd?url=ddd&ddd='+aaa)function SekiroClient(e){if(this.wsURL=e,this.handlers={},this.socket={},!e)throw new Error("wsURL can not be empty!!");this.webSocketFactory=this.resolveWebSocketFactory(),this.connect()}SekiroClient.prototype.resolveWebSocketFactory=function(){if("object"==typeof window){var e=window.WebSocket?window.WebSocket:window.MozWebSocket;return function(o){function t(o){this.mSocket=new e(o)}return t.prototype.close=function(){this.mSocket.close()},t.prototype.onmessage=function(e){this.mSocket.onmessage=e},t.prototype.onopen=function(e){this.mSocket.onopen=e},t.prototype.onclose=function(e){this.mSocket.onclose=e},t.prototype.send=function(e){this.mSocket.send(e)},new t(o)}}if("object"==typeof weex)try{console.log("test webSocket for weex");var o=weex.requireModule("webSocket");return console.log("find webSocket for weex:"+o),function(e){try{o.close()}catch(e){}return o.WebSocket(e,""),o}}catch(e){console.log(e)}if("object"==typeof WebSocket)return function(o){return new e(o)};throw new Error("the js environment do not support websocket")},SekiroClient.prototype.connect=function(){console.log("sekiro: begin of connect to wsURL: "+this.wsURL);var e=this;try{this.socket=this.webSocketFactory(this.wsURL)}catch(o){return console.log("sekiro: create connection failed,reconnect after 2s:"+o),void setTimeout(function(){e.connect()},2e3)}this.socket.onmessage(function(o){e.handleSekiroRequest(o.data)}),this.socket.onopen(function(e){console.log("sekiro: open a sekiro client connection")}),this.socket.onclose(function(o){console.log("sekiro: disconnected ,reconnection after 2s"),setTimeout(function(){e.connect()},2e3)})},SekiroClient.prototype.handleSekiroRequest=function(e){console.log("receive sekiro request: "+e);var o=JSON.parse(e),t=o.__sekiro_seq__;if(o.action){var n=o.action;if(this.handlers[n]){var s=this.handlers[n],i=this;try{s(o,function(e){try{i.sendSuccess(t,e)}catch(e){i.sendFailed(t,"e:"+e)}},function(e){i.sendFailed(t,e)})}catch(e){console.log("error: "+e),i.sendFailed(t,":"+e)}}else this.sendFailed(t,"no action handler: "+n+" defined")}else this.sendFailed(t,"need request param {action}")},SekiroClient.prototype.sendSuccess=function(e,o){var t;if("string"==typeof o)try{t=JSON.parse(o)}catch(e){(t={}).data=o}else"object"==typeof o?t=o:(t={}).data=o;(Array.isArray(t)||"string"==typeof t)&&(t={data:t,code:0}),t.code?t.code=0:(t.status,t.status=0),t.__sekiro_seq__=e;var n=JSON.stringify(t);console.log("response :"+n),this.socket.send(n)},SekiroClient.prototype.sendFailed=function(e,o){"string"!=typeof o&&(o=JSON.stringify(o));var t={};t.message=o,t.status=-1,t.__sekiro_seq__=e;var n=JSON.stringify(t);console.log("sekiro: response :"+n),this.socket.send(n)},SekiroClient.prototype.registerAction=function(e,o){if("string"!=typeof e)throw new Error("an action must be string");if("function"!=typeof o)throw new Error("a handler must be function");return console.log("sekiro: register action: "+e),this.handlers[e]=o,this};
var client = new SekiroClient("wss://sekiro.iinti.cn:5612/business/register?group=test_web&clientId=" + Math.random());
client.registerAction("testAction", function (request, resolve, reject) {
    resolve("ok");
});function SekiroClient(e){if(this.wsURL=e,this.handlers={},this.socket={},!e)throw new Error("wsURL can not be empty!!");this.webSocketFactory=this.resolveWebSocketFactory(),this.connect()}SekiroClient.prototype.resolveWebSocketFactory=function(){if("object"==typeof window){var e=window.WebSocket?window.WebSocket:window.MozWebSocket;return function(o){function t(o){this.mSocket=new e(o)}return t.prototype.close=function(){this.mSocket.close()},t.prototype.onmessage=function(e){this.mSocket.onmessage=e},t.prototype.onopen=function(e){this.mSocket.onopen=e},t.prototype.onclose=function(e){this.mSocket.onclose=e},t.prototype.send=function(e){this.mSocket.send(e)},new t(o)}}if("object"==typeof weex)try{console.log("test webSocket for weex");var o=weex.requireModule("webSocket");return console.log("find webSocket for weex:"+o),function(e){try{o.close()}catch(e){}return o.WebSocket(e,""),o}}catch(e){console.log(e)}if("object"==typeof WebSocket)return function(o){return new e(o)};throw new Error("the js environment do not support websocket")},SekiroClient.prototype.connect=function(){console.log("sekiro: begin of connect to wsURL: "+this.wsURL);var e=this;try{this.socket=this.webSocketFactory(this.wsURL)}catch(o){return console.log("sekiro: create connection failed,reconnect after 2s:"+o),void setTimeout(function(){e.connect()},2e3)}this.socket.onmessage(function(o){e.handleSekiroRequest(o.data)}),this.socket.onopen(function(e){console.log("sekiro: open a sekiro client connection")}),this.socket.onclose(function(o){console.log("sekiro: disconnected ,reconnection after 2s"),setTimeout(function(){e.connect()},2e3)})},SekiroClient.prototype.handleSekiroRequest=function(e){console.log("receive sekiro request: "+e);var o=JSON.parse(e),t=o.__sekiro_seq__;if(o.action){var n=o.action;if(this.handlers[n]){var s=this.handlers[n],i=this;try{s(o,function(e){try{i.sendSuccess(t,e)}catch(e){i.sendFailed(t,"e:"+e)}},function(e){i.sendFailed(t,e)})}catch(e){console.log("error: "+e),i.sendFailed(t,":"+e)}}else this.sendFailed(t,"no action handler: "+n+" defined")}else this.sendFailed(t,"need request param {action}")},SekiroClient.prototype.sendSuccess=function(e,o){var t;if("string"==typeof o)try{t=JSON.parse(o)}catch(e){(t={}).data=o}else"object"==typeof o?t=o:(t={}).data=o;(Array.isArray(t)||"string"==typeof t)&&(t={data:t,code:0}),t.code?t.code=0:(t.status,t.status=0),t.__sekiro_seq__=e;var n=JSON.stringify(t);console.log("response :"+n),this.socket.send(n)},SekiroClient.prototype.sendFailed=function(e,o){"string"!=typeof o&&(o=JSON.stringify(o));var t={};t.message=o,t.status=-1,t.__sekiro_seq__=e;var n=JSON.stringify(t);console.log("sekiro: response :"+n),this.socket.send(n)},SekiroClient.prototype.registerAction=function(e,o){if("string"!=typeof e)throw new Error("an action must be string");if("function"!=typeof o)throw new Error("a handler must be function");return console.log("sekiro: register action: "+e),this.handlers[e]=o,this};
var client = new SekiroClient("wss://sekiro.iinti.cn:5612/business/register?group=test_web&clientId=" + Math.random());
client.registerAction("testAction", function (request, resolve, reject) {
    resolve("ok");
});function SekiroClient(e){if(this.wsURL=e,this.handlers={},this.socket={},!e)throw new Error("wsURL can not be empty!!");this.webSocketFactory=this.resolveWebSocketFactory(),this.connect()}SekiroClient.prototype.resolveWebSocketFactory=function(){if("object"==typeof window){var e=window.WebSocket?window.WebSocket:window.MozWebSocket;return function(o){function t(o){this.mSocket=new e(o)}return t.prototype.close=function(){this.mSocket.close()},t.prototype.onmessage=function(e){this.mSocket.onmessage=e},t.prototype.onopen=function(e){this.mSocket.onopen=e},t.prototype.onclose=function(e){this.mSocket.onclose=e},t.prototype.send=function(e){this.mSocket.send(e)},new t(o)}}if("object"==typeof weex)try{console.log("test webSocket for weex");var o=weex.requireModule("webSocket");return console.log("find webSocket for weex:"+o),function(e){try{o.close()}catch(e){}return o.WebSocket(e,""),o}}catch(e){console.log(e)}if("object"==typeof WebSocket)return function(o){return new e(o)};throw new Error("the js environment do not support websocket")},SekiroClient.prototype.connect=function(){console.log("sekiro: begin of connect to wsURL: "+this.wsURL);var e=this;try{this.socket=this.webSocketFactory(this.wsURL)}catch(o){return console.log("sekiro: create connection failed,reconnect after 2s:"+o),void setTimeout(function(){e.connect()},2e3)}this.socket.onmessage(function(o){e.handleSekiroRequest(o.data)}),this.socket.onopen(function(e){console.log("sekiro: open a sekiro client connection")}),this.socket.onclose(function(o){console.log("sekiro: disconnected ,reconnection after 2s"),setTimeout(function(){e.connect()},2e3)})},SekiroClient.prototype.handleSekiroRequest=function(e){console.log("receive sekiro request: "+e);var o=JSON.parse(e),t=o.__sekiro_seq__;if(o.action){var n=o.action;if(this.handlers[n]){var s=this.handlers[n],i=this;try{s(o,function(e){try{i.sendSuccess(t,e)}catch(e){i.sendFailed(t,"e:"+e)}},function(e){i.sendFailed(t,e)})}catch(e){console.log("error: "+e),i.sendFailed(t,":"+e)}}else this.sendFailed(t,"no action handler: "+n+" defined")}else this.sendFailed(t,"need request param {action}")},SekiroClient.prototype.sendSuccess=function(e,o){var t;if("string"==typeof o)try{t=JSON.parse(o)}catch(e){(t={}).data=o}else"object"==typeof o?t=o:(t={}).data=o;(Array.isArray(t)||"string"==typeof t)&&(t={data:t,code:0}),t.code?t.code=0:(t.status,t.status=0),t.__sekiro_seq__=e;var n=JSON.stringify(t);console.log("response :"+n),this.socket.send(n)},SekiroClient.prototype.sendFailed=function(e,o){"string"!=typeof o&&(o=JSON.stringify(o));var t={};t.message=o,t.status=-1,t.__sekiro_seq__=e;var n=JSON.stringify(t);console.log("sekiro: response :"+n),this.socket.send(n)},SekiroClient.prototype.registerAction=function(e,o){if("string"!=typeof e)throw new Error("an action must be string");if("function"!=typeof o)throw new Error("a handler must be function");return console.log("sekiro: register action: "+e),this.handlers[e]=o,this};
var client = new SekiroClient("wss://sekiro.iinti.cn:5612/business/register?group=test_web&clientId=" + Math.random());
client.registerAction("testAction", function (request, resolve, reject) {
    resolve("ok");
});from ipywidgets import interact, interactive, fixed, interact_manual,Layout
import ipywidgets as widgets
import subprocess

a=widgets.Textarea(
    value="echo '' | gotify push -p 1",
    placeholder='Type something',
    description='String:',
    layout=Layout(width='550px', height='200px'),
    disabled=False
)
def slow_function(x):
    cmd(x)
    return x
    #ddd='cat r.sh'
def cmd(arg):
    p = subprocess.Popen(args=arg, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    single_html =p.stdout.read().decode(encoding="utf-8", errors="strict")
    print(single_html)

def f1(y):
    cmd(y)
    return y
interact_manual(f1, y=r'echo "select * from messages order by id desc limit 3" | sqlite3 /home/pia/pdf/gotify.db;ls /home/pia/upload/gotify* -lh;docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db;');
interact_manual(f1, y=r'docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db')
#y.close()!docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db -`date +%Y-%m-%d`.db
#interact_manual(slow_function,x='echo "" | gotify push -p 1  ');
interact_manual(slow_function,x=a);
#interact_manual(slow_function,a);from ipywidgets import interact, interactive, fixed, interact_manual,Layout
import ipywidgets as widgets
import subprocess

a=widgets.Textarea(
    value="echo '' | gotify push -p 1",
    placeholder='Type something',
    description='String:',
    layout=Layout(width='550px', height='200px'),
    disabled=False
)
def slow_function(x):
    cmd(x)
    return x
    #ddd='cat r.sh'
def cmd(arg):
    p = subprocess.Popen(args=arg, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    single_html =p.stdout.read().decode(encoding="utf-8", errors="strict")
    print(single_html)

def f1(y):
    cmd(y)
    return y
interact_manual(f1, y=r'echo "select * from messages order by id desc limit 3" | sqlite3 /home/pia/pdf/gotify.db;ls /home/pia/upload/gotify* -lh;docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db;');
interact_manual(f1, y=r'docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db')
#y.close()!docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db -`date +%Y-%m-%d`.db
#interact_manual(slow_function,x='echo "" | gotify push -p 1  ');
interact_manual(slow_function,x=a);
#interact_manual(slow_function,a);from ipywidgets import interact, interactive, fixed, interact_manual,Layout
import ipywidgets as widgets
import subprocess

a=widgets.Textarea(
    value="echo '' | gotify push -p 1",
    placeholder='Type something',
    description='String:',
    layout=Layout(width='550px', height='200px'),
    disabled=False
)
def slow_function(x):
    cmd(x)
    return x
    #ddd='cat r.sh'
def cmd(arg):
    p = subprocess.Popen(args=arg, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    single_html =p.stdout.read().decode(encoding="utf-8", errors="strict")
    print(single_html)

def f1(y):
    cmd(y)
    return y
interact_manual(f1, y=r'echo "select * from messages order by id desc limit 3" | sqlite3 /home/pia/pdf/gotify.db;ls /home/pia/upload/gotify* -lh;docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db;');
interact_manual(f1, y=r'docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db')
#y.close()!docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db -`date +%Y-%m-%d`.db
#interact_manual(slow_function,x='echo "" | gotify push -p 1  ');
interact_manual(slow_function,x=a);
#interact_manual(slow_function,a);from ipywidgets import interact, interactive, fixed, interact_manual,Layout
import ipywidgets as widgets
import subprocess

a=widgets.Textarea(
    value="echo '' | gotify push -p 1",
    placeholder='Type something',
    description='String:',
    layout=Layout(width='550px', height='200px'),
    disabled=False
)
def slow_function(x):
    cmd(x)
    return x
    #ddd='cat r.sh'
def cmd(arg):
    p = subprocess.Popen(args=arg, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    single_html =p.stdout.read().decode(encoding="utf-8", errors="strict")
    print(single_html)

def f1(y):
    cmd(y)
    return y
interact_manual(f1, y=r'echo "select * from messages order by id desc limit 3" | sqlite3 /home/pia/pdf/gotify.db;ls /home/pia/upload/gotify* -lh;docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db;');
interact_manual(f1, y=r'docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db')
#y.close()!docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db -`date +%Y-%m-%d`.db
#interact_manual(slow_function,x='echo "" | gotify push -p 1  ');
interact_manual(slow_function,x=a);
#interact_manual(slow_function,a);https://kkgithub.com/aluzzardi/wsshhttps://kkgithub.com/aluzzardi/wsshwebsocat ws://ws.vi-server.org/mirror/https://github.com/wijnen/python-websocketd/tree/master/example/htmlnp.array(mask, dtype = np.int8--port=8080 sh -c 'sh 2>&1'--port=8080 sh -c 'sh 2>&1'--port=8080 sh -c 'sh 2>&1'window.__rpc = new RPC("浏览器A","45.32.200.249",5123)window.__rpc.register(getHostName)
window.__rpc.register(getCookie)import asyncio
import websockets
import paramiko

async def ssh_handler(websocket, path):
    ssh_client = paramiko.SSHClient()
    ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh_client.connect('your_server_ip', username='your_username', password='your_password')

    while True:
        try:
            command = await websocket.recv()
            stdin, stdout, stderr = ssh_client.exec_command(command)
            output = stdout.read().decode() + stderr.read().decode()
            await websocket.send(output)
        except websockets.exceptions.ConnectionClosed:
            break

    ssh_client.close()

start_server = websockets.serve(ssh_handler, "localhost", 8765)

asyncio.get_event_loop().run_until_complete(start_server)
asyncio.get_event_loop().run_forever()
.schemadir(conn.modules.sys.path)https://kkgithub.com/tomerfiliba-org/rpyc/blob/master/docs/docs/zerodeploy.rsttouch /tmp/test.txtnpm install chromium-remote-debugging-proxynode socketserver/server.jsG:\pythondemo\wsterm-master\wstermutilsutilsutilsF:\Scoop\apps\git-with-openssh\current\github/koldunovn/nk_public_notebooks/blob/master/Apache_log.ipynbhttps://raw.githubusercontent.com/koldunovn/nk_public_notebooks/master/Apache_log.ipynbselect * from messagesjavascript:date = new Date();
url_root = 'http://nbviewer.ipython.org/';
url = null;
gist_re = /^https?:\/\/gist\.github\.com\/(?:\w+\/)?([a-f0-9]+)$/;
github_re = /^https:\/\/(github\.com\/.*\/)blob\/(.*\.ipynb)$/;
https_re = /^https:\/\/(.*\.ipynb)$/;
http_re = /^http:\/\/(.*\.ipynb)$/;
loc = location.href;
if (gist_re.test(loc)) {
    gist = gist_re.exec(loc);
    url = url_root + gist[1];
} else if (github_re.test(loc)) {
    path = github_re.exec(loc);
    url = url_root + 'urls/raw.' + path[1] + path[2];
} else if (https_re.test(loc)) {
    path = https_re.exec(loc);
    url = url_root + 'urls/' + path[1];
} else if (http_re.test(loc)) {
    path = http_re.exec(loc);
    url = url_root + 'url/' + path[1];}
if (url) {void(window.open(url, 'nbviewer' + date.getTime()));}javascript:date = new Date();
url_root = 'http://nbviewer.ipython.org/';
url = null;
gist_re = /^https?:\/\/gist\.github\.com\/(?:\w+\/)?([a-f0-9]+)$/;
github_re = /^https:\/\/(github\.com\/.*\/)blob\/(.*\.ipynb)$/;
https_re = /^https:\/\/(.*\.ipynb)$/;
http_re = /^http:\/\/(.*\.ipynb)$/;
loc = location.href;
if (gist_re.test(loc)) {
    gist = gist_re.exec(loc);
    url = url_root + gist[1];
} else if (github_re.test(loc)) {
    path = github_re.exec(loc);
    url = url_root + 'urls/raw.' + path[1] + path[2];
} else if (https_re.test(loc)) {
    path = https_re.exec(loc);
    url = url_root + 'urls/' + path[1];
} else if (http_re.test(loc)) {
    path = http_re.exec(loc);
    url = url_root + 'url/' + path[1];}
if (url) {void(window.open(url, 'nbviewer' + date.getTime()));}display(slider)pip install jupyterlab-deckpip install jupyterlab-deckpip install jupyterlab-deckpip install jupyterlab_risepip install nbslidejupyter labextension install jupyterlab_vim{
 "nbformat": 4,
 "nbformat_minor": 2,
 "metadata": {
  "language_info": {
   "name": "python",
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "version": "3.6.8-final"
  },
  "orig_nbformat": 2,
  "file_extension": ".py",
  "mimetype": "text/x-python",
  "name": "python",
  "npconvert_exporter": "python",
  "pygments_lexer": "ipython3",
  "version": 3,
  "kernelspec": {
   "name": "python36864bitjupyterapipipenv100023b4210342f0b1028e92ab62ef71",
   "display_name": "Python 3.6.8 64-bit ('jupyter-api': pipenv)"
  }
 },
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "import datetime\n",
    "import requests\n",
    "import pandas as pd\n",
    "import inspect\n",
    "from inspect import getsourcefile\n",
    "from requests_html import HTML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename     = inspect.getframeinfo(inspect.currentframe()).filename\n",
    "BASE_DIR     = os.path.dirname(os.path.abspath(filename))\n",
    "DATA_DIR     = os.path.join(os.path.dirname(BASE_DIR), 'data')\n",
    "os.makedirs(DATA_DIR, exist_ok=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def url_to_txt(url, filename=\"world.html\", save=False):\n",
    "    r = requests.get(url)\n",
    "    if r.status_code == 200:\n",
    "        html_text = r.text\n",
    "        if save:\n",
    "            with open(f\"world-{year}.html\", 'w') as f:\n",
    "                f.write(html_text)\n",
    "        return html_text\n",
    "    return None\n",
    "\n",
    "\n",
    "def parse_and_extract(url, name='2020'):\n",
    "    html_text = url_to_txt(url)\n",
    "    if html_text == None:\n",
    "        return False\n",
    "    r_html = HTML(html=html_text)\n",
    "    table_class = \".imdb-scroll-table\"\n",
    "    # table_class = \"#table\"\n",
    "    r_table = r_html.find(table_class)\n",
    "\n",
    "    # print(r_table)\n",
    "    table_data = []\n",
    "    # table_data_dicts = []\n",
    "    header_names = []\n",
    "    if len(r_table) == 0:\n",
    "        return False\n",
    "    parsed_table = r_table[0]\n",
    "    rows = parsed_table.find(\"tr\")\n",
    "    header_row = rows[0]\n",
    "    header_cols = header_row.find('th')\n",
    "    header_names = [x.text for x in header_cols]\n",
    "    for row in rows[1:]:\n",
    "        # print(row.text)\n",
    "        cols = row.find(\"td\")\n",
    "        row_data = []\n",
    "        row_dict_data = {}\n",
    "        for i, col in enumerate(cols):\n",
    "            # print(i, col.text, '\\n\\n')\n",
    "            header_name = header_names[i]\n",
    "            # row_dict_data[header_name] = col.text\n",
    "            row_data.append(col.text)\n",
    "        # table_data_dicts.append(row_dict_data)\n",
    "        table_data.append(row_data)\n",
    "    df = pd.DataFrame(table_data, columns=header_names)\n",
    "    # df = pd.DataFrame(table_data_dicts)\n",
    "    datadir_path = DATA_DIR\n",
    "    os.makedirs(datadir_path, exist_ok=True)\n",
    "    filepath = os.path.join(datadir_path, f'{name}.csv')\n",
    "    df.to_csv(filepath, index=False)\n",
    "    return True\n",
    "\n",
    "def run(start_year=None, years_ago=0):\n",
    "    if start_year == None:\n",
    "        now = datetime.datetime.now()\n",
    "        start_year = now.year\n",
    "    assert isinstance(start_year, int)\n",
    "    assert isinstance(years_ago, int)\n",
    "    assert len(f\"{start_year}\") == 4\n",
    "    for i in range(0, years_ago+1):\n",
    "        url = f\"https://www.boxofficemojo.com/year/world/{start_year}/\"\n",
    "        finished = parse_and_extract(url, name=start_year)\n",
    "        if finished:\n",
    "            print(f\"Finished {start_year}\")\n",
    "        else:\n",
    "            print(f\"{start_year} not finished\")\n",
    "        start_year -= 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "Finished 2020\n"
    }
   ],
   "source": [
    "run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ]
}{
 "nbformat": 4,
 "nbformat_minor": 2,
 "metadata": {
  "language_info": {
   "name": "python",
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "version": "3.6.8-final"
  },
  "orig_nbformat": 2,
  "file_extension": ".py",
  "mimetype": "text/x-python",
  "name": "python",
  "npconvert_exporter": "python",
  "pygments_lexer": "ipython3",
  "version": 3,
  "kernelspec": {
   "name": "python36864bitjupyterapipipenv100023b4210342f0b1028e92ab62ef71",
   "display_name": "Python 3.6.8 64-bit ('jupyter-api': pipenv)"
  }
 },
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "import datetime\n",
    "import requests\n",
    "import pandas as pd\n",
    "import inspect\n",
    "from inspect import getsourcefile\n",
    "from requests_html import HTML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "filename     = inspect.getframeinfo(inspect.currentframe()).filename\n",
    "BASE_DIR     = os.path.dirname(os.path.abspath(filename))\n",
    "DATA_DIR     = os.path.join(os.path.dirname(BASE_DIR), 'data')\n",
    "os.makedirs(DATA_DIR, exist_ok=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def url_to_txt(url, filename=\"world.html\", save=False):\n",
    "    r = requests.get(url)\n",
    "    if r.status_code == 200:\n",
    "        html_text = r.text\n",
    "        if save:\n",
    "            with open(f\"world-{year}.html\", 'w') as f:\n",
    "                f.write(html_text)\n",
    "        return html_text\n",
    "    return None\n",
    "\n",
    "\n",
    "def parse_and_extract(url, name='2020'):\n",
    "    html_text = url_to_txt(url)\n",
    "    if html_text == None:\n",
    "        return False\n",
    "    r_html = HTML(html=html_text)\n",
    "    table_class = \".imdb-scroll-table\"\n",
    "    # table_class = \"#table\"\n",
    "    r_table = r_html.find(table_class)\n",
    "\n",
    "    # print(r_table)\n",
    "    table_data = []\n",
    "    # table_data_dicts = []\n",
    "    header_names = []\n",
    "    if len(r_table) == 0:\n",
    "        return False\n",
    "    parsed_table = r_table[0]\n",
    "    rows = parsed_table.find(\"tr\")\n",
    "    header_row = rows[0]\n",
    "    header_cols = header_row.find('th')\n",
    "    header_names = [x.text for x in header_cols]\n",
    "    for row in rows[1:]:\n",
    "        # print(row.text)\n",
    "        cols = row.find(\"td\")\n",
    "        row_data = []\n",
    "        row_dict_data = {}\n",
    "        for i, col in enumerate(cols):\n",
    "            # print(i, col.text, '\\n\\n')\n",
    "            header_name = header_names[i]\n",
    "            # row_dict_data[header_name] = col.text\n",
    "            row_data.append(col.text)\n",
    "        # table_data_dicts.append(row_dict_data)\n",
    "        table_data.append(row_data)\n",
    "    df = pd.DataFrame(table_data, columns=header_names)\n",
    "    # df = pd.DataFrame(table_data_dicts)\n",
    "    datadir_path = DATA_DIR\n",
    "    os.makedirs(datadir_path, exist_ok=True)\n",
    "    filepath = os.path.join(datadir_path, f'{name}.csv')\n",
    "    df.to_csv(filepath, index=False)\n",
    "    return True\n",
    "\n",
    "def run(start_year=None, years_ago=0):\n",
    "    if start_year == None:\n",
    "        now = datetime.datetime.now()\n",
    "        start_year = now.year\n",
    "    assert isinstance(start_year, int)\n",
    "    assert isinstance(years_ago, int)\n",
    "    assert len(f\"{start_year}\") == 4\n",
    "    for i in range(0, years_ago+1):\n",
    "        url = f\"https://www.boxofficemojo.com/year/world/{start_year}/\"\n",
    "        finished = parse_and_extract(url, name=start_year)\n",
    "        if finished:\n",
    "            print(f\"Finished {start_year}\")\n",
    "        else:\n",
    "            print(f\"{start_year} not finished\")\n",
    "        start_year -= 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "Finished 2020\n"
    }
   ],
   "source": [
    "run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ]
}conda env create -f environment.ymljupyter2slideshttps://github.com/hkust-dh/jupyter-slides-demo.gitjupyter<script type="text/template">pip install -r requirements.txtimport nbformat
from nbconvert.preprocessors import ExecutePreprocessor

def trigger(notebook_filename='chp-traffic.ipynb'):
    with open(notebook_filename) as f:
        nb = nbformat.read(f, as_version=4)
    ep = ExecutePreprocessor(timeout=600, kernel_name='python3')
    r = ep.preprocess(nb)
    return rpip install jupyterlab-code-foldingjupyterlab-vimfrom ipywidgets import interact, interactive, fixed, interact_manual,Layout
import ipywidgets as widgets
import subprocess

a=widgets.Textarea(

    value="echo '' | gotify push -p 1",
    placeholder='Type something',
    description='String:',
    layout=Layout(width='550px', height='200px'),
    disabled=False

)
def slow_function(x):
    cmd(x)
    return x
    #ddd='cat r.sh'
def cmd(arg):
    p = subprocess.Popen(args=arg, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    single_html =p.stdout.read().decode(encoding="utf-8", errors="strict")
    print(single_html)

def f1(y):
    cmd(y)
    return y
interact_manual(f1, y=r'echo "select * from messages order by id desc limit 3" | sqlite3 /home/pia/pdf/gotify.db;ls /home/pia/upload/gotify-2014*.db')
from ipywidgets import interact, interactive, fixed, interact_manual,Layout
import ipywidgets as widgets
import subprocess

a=widgets.Textarea(

    value="echo '' | gotify push -p 1",
    placeholder='Type something',
    description='String:',
    layout=Layout(width='550px', height='200px'),
    disabled=False

)
def slow_function(x):
    cmd(x)
    return x
    #ddd='cat r.sh'
def cmd(arg):
    p = subprocess.Popen(args=arg, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    single_html =p.stdout.read().decode(encoding="utf-8", errors="strict")
    print(single_html)

def f1(y):
    cmd(y)
    return y
interact_manual(f1, y=r'echo "select * from messages order by id desc limit 3" | sqlite3 /home/pia/pdf/gotify.db;ls /home/pia/upload/gotify-2014*.db')
9YeExykKItI-Jf2r-AHAz5eAXH3MZx3G5zs7Vj1BWPghttps://binder.curvenote.dev/https://binder.curvenote.dev/from fasthtml.common import *
from collections import deque

app, rt = fast_app(exts='ws')

# All messages here, but only most recent 15 are stored
messages = deque(maxlen=15)
users = {}

# Takes all the messages and renders them
box_style = "border: 1px solid #ccc; border-radius: 10px; padding: 10px; margin: 5px 0;"
def render_messages(messages):
    return Div(*[Div(m, style=box_style) for m in messages], id='msg-list')

# Input field is reset via hx_swap_oob after submitting a message
def mk_input(): return Input(id='msg', placeholder="Type your message", value="", hx_swap_oob="true")

@rt
def index():
    return Titled("Leave a message for others!"),Div(
        Form(mk_input(), ws_send=True), # input field
        P("Leave a message for others!"),
        Div(render_messages(messages),id='msg-list'), # All the Messages
        hx_ext='ws', ws_connect='ws') # Use a web socket 

def on_connect(ws, send): users[id(ws)] = send
def on_disconnect(ws):users.pop(id(ws),None)

@app.ws('/ws', conn=on_connect, disconn=on_disconnect)
async def ws(msg:str,send):
    await send(mk_input()) # reset the input field immediately
    messages.appendleft(msg) # New messages first
    for u in users.values(): # Get `send` function for a user
        await u(render_messages(messages)) # Send the message to that user

serve()from fasthtml.common import *
from collections import deque

app, rt = fast_app(exts='ws')

# All messages here, but only most recent 15 are stored
messages = deque(maxlen=15)
users = {}

# Takes all the messages and renders them
box_style = "border: 1px solid #ccc; border-radius: 10px; padding: 10px; margin: 5px 0;"
def render_messages(messages):
    return Div(*[Div(m, style=box_style) for m in messages], id='msg-list')

# Input field is reset via hx_swap_oob after submitting a message
def mk_input(): return Input(id='msg', placeholder="Type your message", value="", hx_swap_oob="true")

@rt
def index():
    return Titled("Leave a message for others!"),Div(
        Form(mk_input(), ws_send=True), # input field
        P("Leave a message for others!"),
        Div(render_messages(messages),id='msg-list'), # All the Messages
        hx_ext='ws', ws_connect='ws') # Use a web socket 

def on_connect(ws, send): users[id(ws)] = send
def on_disconnect(ws):users.pop(id(ws),None)

@app.ws('/ws', conn=on_connect, disconn=on_disconnect)
async def ws(msg:str,send):
    await send(mk_input()) # reset the input field immediately
    messages.appendleft(msg) # New messages first
    for u in users.values(): # Get `send` function for a user
        await u(render_messages(messages)) # Send the message to that user

serve()--no-use-pep517--no-use-pep517conda create -n binderhub-in-a-box -f environment.ymlTypeError: unsupported operand type(s) for |: 'type' and 'type'import socket

def main():
    # 创建一个TCP套接字
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    # 绑定IP地址和端口
    server_socket.bind(('127.0.0.1', 12346))

    # 监听连接
    server_socket.listen(5)

    print("服务器已启动，等待客户端连接...")

    while True:
        # 接受客户端连接
        client_socket, client_address = server_socket.accept()
        print(f"客户端{client_address}已连接")

        # 接收客户端发送的数据
        data = client_socket.recv(1024)
        print(f"收到来自{client_address}的数据： {data.decode('utf-8')}")

        # 将接收到的数据发送回客户端
        client_socket.send(data)
        print(f"已将数据发送回{client_address}")

        # 关闭客户端套接字
        client_socket.close()
        print(f"客户端{client_address}已断开连接")

if __name__ == "__main__":
    main()loop = asyncio.get_event_loop()const WebSocket = require('ws');

// 替换为你的 WebSocket 服务器地址
const socket = new WebSocket("ws://10.10.49.172:8765");

// 监听连接打开事件
socket.addEventListener("open", (event) => {
    console.log("WebSocket connection opened.");

    // 构造二进制数据，这里使用一个简单的示例
    const binaryData = new Uint8Array([49, 50, 51, 52]);

    // 发送二进制数据
    socket.send(binaryData);

    console.log("Binary data sent successfully.");
});

// 监听接收消息事件
socket.addEventListener("message", (event) => {
    console.log("Received message:", event.data);
});

// 监听连接关闭事件
socket.addEventListener("close", (event) => {
    console.log("WebSocket connection closed.");
});

// 监听错误事件
socket.addEventListener("error", (event) => {
    console.error("WebSocket error:", event);
});websocket<!DOCTYPE html>
<pre id="log"></pre>
<script>
  // helper function: log message to screen
  function log(msg) {
    document.getElementById('log').textContent += msg + '\n';
  }

  // setup websocket with callbacks
  var ws = new WebSocket('ws://localhost:8080/');
  ws.onopen = function() {
    log('CONNECT');
  };
  ws.onclose = function() {
    log('DISCONNECT');
  };
  ws.onmessage = function(event) {
    log('MESSAGE: ' + event.data);
  };
</script><script src="https://res.zvo.cn/websocket.js/websocket.js"></script>

/*
websocket.connect({
	url:'ws://localhost:8081/', //服务端的WebSocket地址
	onopen:function(){ //如果不需要，此不传即可。
		websocket.send({"type":"CONNECT","token":"123456"}); //当WebSocket通道连接成功后，自动给服务器发送一条json格式的消息
	},
	onmessage:function(message){ //如果不需要，此不传即可
		//console.log(message); //服务端发送来的消息会在这里接收到
		document.getElementById('showMessage').innerHTML = JSON.stringify(message) + '<br/>' + document.getElementById('showMessage').innerHTML;
	}
});
*/
</script><script src="https://res.zvo.cn/websocket.js/websocket.js"></script>

/*
websocket.connect({
	url:'ws://localhost:8081/', //服务端的WebSocket地址
	onopen:function(){ //如果不需要，此不传即可。
		websocket.send({"type":"CONNECT","token":"123456"}); //当WebSocket通道连接成功后，自动给服务器发送一条json格式的消息
	},
	onmessage:function(message){ //如果不需要，此不传即可
		//console.log(message); //服务端发送来的消息会在这里接收到
		document.getElementById('showMessage').innerHTML = JSON.stringify(message) + '<br/>' + document.getElementById('showMessage').innerHTML;
	}
});
*/
</script> ./websocketd --port=8765 ./count.shpip install --upgrade jinja2<!DOCTYPE HTML>
<html>
<head>
    <title>Flask-SocketIO Test</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js" integrity="sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/3.0.4/socket.io.js" integrity="sha512-aMGMvNYu8Ue4G+fHa359jcPb1u+ytAF+P2SCb+PxrjCdO3n3ZTxJ30zuH39rimUggmTwmh2u7wvQsDTHESnmfQ==" crossorigin="anonymous"></script>
    <script type="text/javascript" charset="utf-8">
        $(document).ready(function() {
            // Connect to the Socket.IO server.
            // The connection URL has the following format, relative to the current page:
            //     http[s]://<domain>:<port>[/<namespace>]
            var socket = io.connect('http://' + document.domain + ':' + location.port);

            // Event handler for new connections.
            // The callback function is invoked when a connection with the
            // server is established.
            socket.on('connect', function() {
                socket.emit('my_event', {data: 'I\'m connected!'});
            });

            // Event handler for server sent data.
            // The callback function is invoked whenever the server emits data
            // to the client. The data is then displayed in the "Received"
            // section of the page.
            socket.on('my_response', function(msg, cb) {
                $('#log').append('<br>' + $('<div/>').text('Received #' + msg.count + ': ' + msg.data).html());
                if (cb)
                    cb();
            });

            // Interval function that tests message latency by sending a "ping"
            // message. The server then responds with a "pong" message and the
            // round trip time is measured.
            var ping_pong_times = [];
            var start_time;
            window.setInterval(function() {
                start_time = (new Date).getTime();
                $('#transport').text(socket.io.engine.transport.name);
                socket.emit('my_ping');
            }, 1000);

            // Handler for the "pong" message. When the pong is received, the
            // time from the ping is stored, and the average of the last 30
            // samples is average and displayed.
            socket.on('my_pong', function() {
                var latency = (new Date).getTime() - start_time;
                ping_pong_times.push(latency);
                ping_pong_times = ping_pong_times.slice(-30); // keep last 30 samples
                var sum = 0;
                for (var i = 0; i < ping_pong_times.length; i++)
                    sum += ping_pong_times[i];
                $('#ping-pong').text(Math.round(10 * sum / ping_pong_times.length) / 10);
            });

            // Handlers for the different forms in the page.
            // These accept data from the user and send it to the server in a
            // variety of ways
            $('form#emit').submit(function(event) {
                socket.emit('my_event', {data: $('#emit_data').val()});
                return false;
            });
            $('form#broadcast').submit(function(event) {
                socket.emit('my_broadcast_event', {data: $('#broadcast_data').val()});
                return false;
            });
            $('form#join').submit(function(event) {
                socket.emit('join', {room: $('#join_room').val()});
                return false;
            });
            $('form#leave').submit(function(event) {
                socket.emit('leave', {room: $('#leave_room').val()});
                return false;
            });
            $('form#send_room').submit(function(event) {
                socket.emit('my_room_event', {room: $('#room_name').val(), data: $('#room_data').val()});
                return false;
            });
            $('form#close').submit(function(event) {
                socket.emit('close_room', {room: $('#close_room').val()});
                return false;
            });
            $('form#disconnect').submit(function(event) {
                socket.emit('disconnect_request');
                return false;
            });
        });
    </script>
</head>
<body>
    <h1>Flask-SocketIO Test</h1>
    <p>
      Async mode is: <b>{{ async_mode }}</b><br>
      Current transport is: <b><span id="transport"></span></b><br>
      Average ping/pong latency: <b><span id="ping-pong"></span>ms</b>
    </p>
    <h2>Send:</h2>
    <form id="emit" method="POST" action='#'>
        <input type="text" name="emit_data" id="emit_data" placeholder="Message">
        <input type="submit" value="Echo">
    </form>
    <form id="broadcast" method="POST" action='#'>
        <input type="text" name="broadcast_data" id="broadcast_data" placeholder="Message">
        <input type="submit" value="Broadcast">
    </form>
    <form id="join" method="POST" action='#'>
        <input type="text" name="join_room" id="join_room" placeholder="Room Name">
        <input type="submit" value="Join Room">
    </form>
    <form id="leave" method="POST" action='#'>
        <input type="text" name="leave_room" id="leave_room" placeholder="Room Name">
        <input type="submit" value="Leave Room">
    </form>
    <form id="send_room" method="POST" action='#'>
        <input type="text" name="room_name" id="room_name" placeholder="Room Name">
        <input type="text" name="room_data" id="room_data" placeholder="Message">
        <input type="submit" value="Send to Room">
    </form>
    <form id="close" method="POST" action="#">
        <input type="text" name="close_room" id="close_room" placeholder="Room Name">
        <input type="submit" value="Close Room">
    </form>
    <form id="disconnect" method="POST" action="#">
        <input type="submit" value="Disconnect">
    </form>
    <h2>Receive:</h2>
    <div id="log"></div>
</body>
</html>from threading import Lock
from flask import Flask, render_template, session, request, copy_current_request_context
from flask_socketio import SocketIO, emit, join_room, leave_room, close_room, rooms, disconnect

# Set this variable to "threading", "eventlet" or "gevent" to test the
# different async modes, or leave it set to None for the application to choose
# the best option based on installed packages.
async_mode = None

app = Flask(__name__)
app.config['SECRET_KEY'] = 'secret!'
socketio = SocketIO(app, async_mode=async_mode)
thread = None
thread_lock = Lock()


def background_thread():
    """Example of how to send server generated events to clients."""
    count = 0
    while True:
        socketio.sleep(10)
        count += 1
        socketio.emit('my_response',
                      {'data': 'Server generated event', 'count': count})


@app.route('/')
def index():
    return render_template('index.html', async_mode=socketio.async_mode)


@socketio.event
def my_event(message):
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response',
         {'data': message['data'], 'count': session['receive_count']})


@socketio.event
def my_broadcast_event(message):
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response',
         {'data': message['data'], 'count': session['receive_count']},
         broadcast=True)


@socketio.event
def join(message):
    join_room(message['room'])
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response',
         {'data': 'In rooms: ' + ', '.join(rooms()),
          'count': session['receive_count']})


@socketio.event
def leave(message):
    leave_room(message['room'])
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response',
         {'data': 'In rooms: ' + ', '.join(rooms()),
          'count': session['receive_count']})


@socketio.on('close_room')
def on_close_room(message):
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response', {'data': 'Room ' + message['room'] + ' is closing.',
                         'count': session['receive_count']},
         to=message['room'])
    close_room(message['room'])


@socketio.event
def my_room_event(message):
    session['receive_count'] = session.get('receive_count', 0) + 1
    emit('my_response',
         {'data': message['data'], 'count': session['receive_count']},
         to=message['room'])


@socketio.event
def disconnect_request():
    @copy_current_request_context
    def can_disconnect():
        disconnect()
    session['receive_count'] = session.get('receive_count', 0) + 1
    # for this emit we use a callback function
    # when the callback function is invoked we know that the message has been
    # received and it is safe to disconnect
    emit('my_response',
         {'data': 'Disconnected!', 'count': session['receive_count']},
         callback=can_disconnect)


@socketio.event
def my_ping():
    emit('my_pong')


@socketio.event
def connect():
    global thread
    with thread_lock:
        if thread is None:
            thread = socketio.start_background_task(background_thread)
    emit('my_response', {'data': 'Connected', 'count': 0})


@socketio.on('disconnect')
def test_disconnect():
    print('Client disconnected', request.sid)


if __name__ == '__main__':
    socketio.run(app, host='0.0.0.0', debug=True)
send-receive.sh<!DOCTYPE html>
<pre id="log"></pre>
<script>
  // helper function: log message to screen
  function log(msg) {
    document.getElementById('log').textContent += msg + '\n';
  }

  // setup websocket with callbacks
  var ws = new WebSocket('ws://localhost:8080/');
  ws.onopen = function() {
    log('CONNECT');
  };
  ws.onclose = function() {
    log('DISCONNECT');
  };
  ws.onmessage = function(event) {
    log('MESSAGE: ' + event.data);
  };
</script>echo $REPLYecho $REPLYhttp://45.32.200.249:1234/count.sh# Then access http://localhost:1234/dump-env.sh
#You can also test the command files by running from the command line.www.example.com/socketserverTypeError: WS_Server.echo() missing 1 required positional argument: 'path'npm install -g json-socket-serverimport requests

js_code = """
(function(){
    console.log("test")
    return "执行成功"
})()
"""

url = "http://localhost:12080/execjs"
data = {
    "group": "zzz",
    "code": js_code
}
res = requests.post(url, data=data)
print(res.text)https://kkgithub.com/sixgad/py-jsrpc.gitfunction JsClient(wsURL) {
    this.wsURL = wsURL;
    this.handlers = {};
    this.socket = {};
    if (!wsURL) {
        throw new Error('wsURL can not be empty!!')
    }
    this.webSocketFactory = this.resolveWebSocketFactory();
    this.connect()
}

JsClient.prototype.resolveWebSocketFactory = function () {
    if (typeof window === 'object') {
        var theWebSocket = window.WebSocket ? window.WebSocket : window.MozWebSocket;
        return function (wsURL) {

            function WindowWebSocketWrapper(wsURL) {
                this.mSocket = new theWebSocket(wsURL);
            }

            WindowWebSocketWrapper.prototype.close = function () {
                this.mSocket.close();
            };

            WindowWebSocketWrapper.prototype.onmessage = function (onMessageFunction) {
                this.mSocket.onmessage = onMessageFunction;
            };

            WindowWebSocketWrapper.prototype.onopen = function (onOpenFunction) {
                this.mSocket.onopen = onOpenFunction;
            };
            WindowWebSocketWrapper.prototype.onclose = function (onCloseFunction) {
                this.mSocket.onclose = onCloseFunction;
            };

            WindowWebSocketWrapper.prototype.send = function (message) {
                this.mSocket.send(message);
            };

            return new WindowWebSocketWrapper(wsURL);
        }
    }
    if (typeof weex === 'object') {
        try {
            console.log("test webSocket for weex");
            var ws = weex.requireModule('webSocket');
            console.log("find webSocket for weex:" + ws);
            return function (wsURL) {
                try {
                    ws.close();
                } catch (e) {
                }
                ws.WebSocket(wsURL, '');
                return ws;
            }
        } catch (e) {
            console.log(e);
        }
    }
    if (typeof WebSocket === 'object') {
        return function (wsURL) {
            return new theWebSocket(wsURL);
        }
    }
    throw new Error("the js environment do not support websocket");
};

JsClient.prototype.connect = function () {
    console.log('jsclient begin of connect to wsURL: ' + this.wsURL);
    var _this = this;
    try {
        this.socket = this.webSocketFactory(this.wsURL);
    } catch (e) {
        console.log("jsclient create connection failed,reconnect after 2s");
        setTimeout(function () {
            _this.connect()
        }, 2000)
    }

    this.socket.onmessage(function (event) {
        _this.handleJsClientRequest(event.data)
    });

    this.socket.onopen(function (event) {
        console.log('jsclient open a connection')
    });

    this.socket.onclose(function (event) {
        console.log('jsclient disconnected ,reconnection after 2s');
        setTimeout(function () {
            _this.connect()
        }, 2000)
    });
};

JsClient.prototype.handleJsClientRequest = function (requestJson) {
    console.log("receive request: " + requestJson);
    var request = JSON.parse(requestJson);
    var seq = request['__uuid_seq__'];

    if (!request['action']) {
        this.sendFailed(seq, 'need request param {action}');
        return
    }
    var action = request['action'];
    if (!this.handlers[action]) {
        this.sendFailed(seq, 'no action handler: ' + action + ' defined');
        return
    }

    var theHandler = this.handlers[action];
    var _this = this;
    try {
        theHandler(request, function (response) {
            try {
                _this.sendSuccess(seq, response)
            } catch (e) {
                _this.sendFailed(seq, "e:" + e);
            }
        }, function (errorMessage) {
            _this.sendFailed(seq, errorMessage)
        })
    } catch (e) {
        console.log("error: " + e);
        _this.sendFailed(seq, ":" + e);
    }
};

JsClient.prototype.sendSuccess = function (seq, response) {
    var responseJson;
    if (typeof response == 'string') {
        try {
            responseJson = JSON.parse(response);
        } catch (e) {
            responseJson = {};
            responseJson['data'] = response;
        }
    } else if (typeof response == 'object') {
        responseJson = response;
    } else {
        responseJson = {};
        responseJson['data'] = response;
    }

    if (Array.isArray(responseJson)) {
        responseJson = {
            data: responseJson,
            code: 0
        }
    }

    if (responseJson['code']) {
        responseJson['code'] = 0;
    } else if (responseJson['status']) {
        responseJson['status'] = 0;
    } else {
        responseJson['status'] = 0;
    }
    responseJson['__uuid_seq__'] = seq;
    var responseText = JSON.stringify(responseJson);
    console.log("response :" + responseText);
    this.socket.send(responseText);
};

JsClient.prototype.sendFailed = function (seq, errorMessage) {
    if (typeof errorMessage != 'string') {
        errorMessage = JSON.stringify(errorMessage);
    }
    var responseJson = {};
    responseJson['message'] = errorMessage;
    responseJson['status'] = -1;
    responseJson['__uuid_seq__'] = seq;
    var responseText = JSON.stringify(responseJson);
    console.log("jsclient response :" + responseText);
    this.socket.send(responseText)
};

JsClient.prototype.registerAction = function (action, handler) {
    if (typeof action !== 'string') {
        throw new Error("an action must be string");
    }
    if (typeof handler !== 'function') {
        throw new Error("a handler must be function");
    }
    console.log("jsclient register action: " + action);
    this.handlers[action] = handler;
    return this;
};
function guid() {
    function S4() {
        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
    }
    return (S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4() + S4());
}# -*- coding: utf-8 -*-
# @Time   : 2021/7/13 21:18
# @Author : zp
# @Python3.7
import asyncio
import websockets
import json
from loguru import logger
from sanic import Sanic, response
import threading
from back_socket_server import ws_run

app = Sanic(__name__)


@app.route('/send', methods=['GET'])
async def get_request(request):
    # http://127.0.0.1:5000/send?group=ws-group&action=clientTime
    args_dic = {}
    for params in request.query_args:
        args_dic[params[0]] = str(params[1])
    if "action" not in args_dic:
        return response.json({"error": "need action"})
    group = args_dic.pop('group')
    async with websockets.connect(f'ws://localhost:6789/invoke?group={group}') as websocket:
        await websocket.send(json.dumps(args_dic))
        res = await websocket.recv()
        logger.info(res)
    return response.json(json.loads(res))


if __name__ == '__main__':
    app.add_task(ws_run())
    app.run(debug=False, host="127.0.0.1", port=5000)@app.main_process_startapp.add_task(ws_run()) gotify push -p 1 ""  | gotify push -p 1var aaa=" gotify push  -t " + "title:" + "'" + encodeURI(document.title)+"'" +" -p 1 " + document.URL
//alert(aaa)
window.open('http://45.32.200.249:8060/ddd?url=ddd&ddd='+aaa)var aaa=" gotify push  -t " + "title:" + "'" + encodeURI(document.title)+"'" +" -p 1 " + document.URL
//alert(aaa)
window.open('http://45.32.200.249:8060/ddd?url=ddd&ddd='+aaa)var aaa=" gotify push  -t " + "title:" + "'" + encodeURI(document.title)+"'" +" -p 1 " + document.URL
//alert(aaa)
window.open('http://45.32.200.249:8060/ddd?url=ddd&ddd='+aaa)function SekiroClient(e){if(this.wsURL=e,this.handlers={},this.socket={},!e)throw new Error("wsURL can not be empty!!");this.webSocketFactory=this.resolveWebSocketFactory(),this.connect()}SekiroClient.prototype.resolveWebSocketFactory=function(){if("object"==typeof window){var e=window.WebSocket?window.WebSocket:window.MozWebSocket;return function(o){function t(o){this.mSocket=new e(o)}return t.prototype.close=function(){this.mSocket.close()},t.prototype.onmessage=function(e){this.mSocket.onmessage=e},t.prototype.onopen=function(e){this.mSocket.onopen=e},t.prototype.onclose=function(e){this.mSocket.onclose=e},t.prototype.send=function(e){this.mSocket.send(e)},new t(o)}}if("object"==typeof weex)try{console.log("test webSocket for weex");var o=weex.requireModule("webSocket");return console.log("find webSocket for weex:"+o),function(e){try{o.close()}catch(e){}return o.WebSocket(e,""),o}}catch(e){console.log(e)}if("object"==typeof WebSocket)return function(o){return new e(o)};throw new Error("the js environment do not support websocket")},SekiroClient.prototype.connect=function(){console.log("sekiro: begin of connect to wsURL: "+this.wsURL);var e=this;try{this.socket=this.webSocketFactory(this.wsURL)}catch(o){return console.log("sekiro: create connection failed,reconnect after 2s:"+o),void setTimeout(function(){e.connect()},2e3)}this.socket.onmessage(function(o){e.handleSekiroRequest(o.data)}),this.socket.onopen(function(e){console.log("sekiro: open a sekiro client connection")}),this.socket.onclose(function(o){console.log("sekiro: disconnected ,reconnection after 2s"),setTimeout(function(){e.connect()},2e3)})},SekiroClient.prototype.handleSekiroRequest=function(e){console.log("receive sekiro request: "+e);var o=JSON.parse(e),t=o.__sekiro_seq__;if(o.action){var n=o.action;if(this.handlers[n]){var s=this.handlers[n],i=this;try{s(o,function(e){try{i.sendSuccess(t,e)}catch(e){i.sendFailed(t,"e:"+e)}},function(e){i.sendFailed(t,e)})}catch(e){console.log("error: "+e),i.sendFailed(t,":"+e)}}else this.sendFailed(t,"no action handler: "+n+" defined")}else this.sendFailed(t,"need request param {action}")},SekiroClient.prototype.sendSuccess=function(e,o){var t;if("string"==typeof o)try{t=JSON.parse(o)}catch(e){(t={}).data=o}else"object"==typeof o?t=o:(t={}).data=o;(Array.isArray(t)||"string"==typeof t)&&(t={data:t,code:0}),t.code?t.code=0:(t.status,t.status=0),t.__sekiro_seq__=e;var n=JSON.stringify(t);console.log("response :"+n),this.socket.send(n)},SekiroClient.prototype.sendFailed=function(e,o){"string"!=typeof o&&(o=JSON.stringify(o));var t={};t.message=o,t.status=-1,t.__sekiro_seq__=e;var n=JSON.stringify(t);console.log("sekiro: response :"+n),this.socket.send(n)},SekiroClient.prototype.registerAction=function(e,o){if("string"!=typeof e)throw new Error("an action must be string");if("function"!=typeof o)throw new Error("a handler must be function");return console.log("sekiro: register action: "+e),this.handlers[e]=o,this};
var client = new SekiroClient("wss://sekiro.iinti.cn:5612/business/register?group=test_web&clientId=" + Math.random());
client.registerAction("testAction", function (request, resolve, reject) {
    resolve("ok");
});function SekiroClient(e){if(this.wsURL=e,this.handlers={},this.socket={},!e)throw new Error("wsURL can not be empty!!");this.webSocketFactory=this.resolveWebSocketFactory(),this.connect()}SekiroClient.prototype.resolveWebSocketFactory=function(){if("object"==typeof window){var e=window.WebSocket?window.WebSocket:window.MozWebSocket;return function(o){function t(o){this.mSocket=new e(o)}return t.prototype.close=function(){this.mSocket.close()},t.prototype.onmessage=function(e){this.mSocket.onmessage=e},t.prototype.onopen=function(e){this.mSocket.onopen=e},t.prototype.onclose=function(e){this.mSocket.onclose=e},t.prototype.send=function(e){this.mSocket.send(e)},new t(o)}}if("object"==typeof weex)try{console.log("test webSocket for weex");var o=weex.requireModule("webSocket");return console.log("find webSocket for weex:"+o),function(e){try{o.close()}catch(e){}return o.WebSocket(e,""),o}}catch(e){console.log(e)}if("object"==typeof WebSocket)return function(o){return new e(o)};throw new Error("the js environment do not support websocket")},SekiroClient.prototype.connect=function(){console.log("sekiro: begin of connect to wsURL: "+this.wsURL);var e=this;try{this.socket=this.webSocketFactory(this.wsURL)}catch(o){return console.log("sekiro: create connection failed,reconnect after 2s:"+o),void setTimeout(function(){e.connect()},2e3)}this.socket.onmessage(function(o){e.handleSekiroRequest(o.data)}),this.socket.onopen(function(e){console.log("sekiro: open a sekiro client connection")}),this.socket.onclose(function(o){console.log("sekiro: disconnected ,reconnection after 2s"),setTimeout(function(){e.connect()},2e3)})},SekiroClient.prototype.handleSekiroRequest=function(e){console.log("receive sekiro request: "+e);var o=JSON.parse(e),t=o.__sekiro_seq__;if(o.action){var n=o.action;if(this.handlers[n]){var s=this.handlers[n],i=this;try{s(o,function(e){try{i.sendSuccess(t,e)}catch(e){i.sendFailed(t,"e:"+e)}},function(e){i.sendFailed(t,e)})}catch(e){console.log("error: "+e),i.sendFailed(t,":"+e)}}else this.sendFailed(t,"no action handler: "+n+" defined")}else this.sendFailed(t,"need request param {action}")},SekiroClient.prototype.sendSuccess=function(e,o){var t;if("string"==typeof o)try{t=JSON.parse(o)}catch(e){(t={}).data=o}else"object"==typeof o?t=o:(t={}).data=o;(Array.isArray(t)||"string"==typeof t)&&(t={data:t,code:0}),t.code?t.code=0:(t.status,t.status=0),t.__sekiro_seq__=e;var n=JSON.stringify(t);console.log("response :"+n),this.socket.send(n)},SekiroClient.prototype.sendFailed=function(e,o){"string"!=typeof o&&(o=JSON.stringify(o));var t={};t.message=o,t.status=-1,t.__sekiro_seq__=e;var n=JSON.stringify(t);console.log("sekiro: response :"+n),this.socket.send(n)},SekiroClient.prototype.registerAction=function(e,o){if("string"!=typeof e)throw new Error("an action must be string");if("function"!=typeof o)throw new Error("a handler must be function");return console.log("sekiro: register action: "+e),this.handlers[e]=o,this};
var client = new SekiroClient("wss://sekiro.iinti.cn:5612/business/register?group=test_web&clientId=" + Math.random());
client.registerAction("testAction", function (request, resolve, reject) {
    resolve("ok");
});function SekiroClient(e){if(this.wsURL=e,this.handlers={},this.socket={},!e)throw new Error("wsURL can not be empty!!");this.webSocketFactory=this.resolveWebSocketFactory(),this.connect()}SekiroClient.prototype.resolveWebSocketFactory=function(){if("object"==typeof window){var e=window.WebSocket?window.WebSocket:window.MozWebSocket;return function(o){function t(o){this.mSocket=new e(o)}return t.prototype.close=function(){this.mSocket.close()},t.prototype.onmessage=function(e){this.mSocket.onmessage=e},t.prototype.onopen=function(e){this.mSocket.onopen=e},t.prototype.onclose=function(e){this.mSocket.onclose=e},t.prototype.send=function(e){this.mSocket.send(e)},new t(o)}}if("object"==typeof weex)try{console.log("test webSocket for weex");var o=weex.requireModule("webSocket");return console.log("find webSocket for weex:"+o),function(e){try{o.close()}catch(e){}return o.WebSocket(e,""),o}}catch(e){console.log(e)}if("object"==typeof WebSocket)return function(o){return new e(o)};throw new Error("the js environment do not support websocket")},SekiroClient.prototype.connect=function(){console.log("sekiro: begin of connect to wsURL: "+this.wsURL);var e=this;try{this.socket=this.webSocketFactory(this.wsURL)}catch(o){return console.log("sekiro: create connection failed,reconnect after 2s:"+o),void setTimeout(function(){e.connect()},2e3)}this.socket.onmessage(function(o){e.handleSekiroRequest(o.data)}),this.socket.onopen(function(e){console.log("sekiro: open a sekiro client connection")}),this.socket.onclose(function(o){console.log("sekiro: disconnected ,reconnection after 2s"),setTimeout(function(){e.connect()},2e3)})},SekiroClient.prototype.handleSekiroRequest=function(e){console.log("receive sekiro request: "+e);var o=JSON.parse(e),t=o.__sekiro_seq__;if(o.action){var n=o.action;if(this.handlers[n]){var s=this.handlers[n],i=this;try{s(o,function(e){try{i.sendSuccess(t,e)}catch(e){i.sendFailed(t,"e:"+e)}},function(e){i.sendFailed(t,e)})}catch(e){console.log("error: "+e),i.sendFailed(t,":"+e)}}else this.sendFailed(t,"no action handler: "+n+" defined")}else this.sendFailed(t,"need request param {action}")},SekiroClient.prototype.sendSuccess=function(e,o){var t;if("string"==typeof o)try{t=JSON.parse(o)}catch(e){(t={}).data=o}else"object"==typeof o?t=o:(t={}).data=o;(Array.isArray(t)||"string"==typeof t)&&(t={data:t,code:0}),t.code?t.code=0:(t.status,t.status=0),t.__sekiro_seq__=e;var n=JSON.stringify(t);console.log("response :"+n),this.socket.send(n)},SekiroClient.prototype.sendFailed=function(e,o){"string"!=typeof o&&(o=JSON.stringify(o));var t={};t.message=o,t.status=-1,t.__sekiro_seq__=e;var n=JSON.stringify(t);console.log("sekiro: response :"+n),this.socket.send(n)},SekiroClient.prototype.registerAction=function(e,o){if("string"!=typeof e)throw new Error("an action must be string");if("function"!=typeof o)throw new Error("a handler must be function");return console.log("sekiro: register action: "+e),this.handlers[e]=o,this};
var client = new SekiroClient("wss://sekiro.iinti.cn:5612/business/register?group=test_web&clientId=" + Math.random());
client.registerAction("testAction", function (request, resolve, reject) {
    resolve("ok");
});from ipywidgets import interact, interactive, fixed, interact_manual,Layout
import ipywidgets as widgets
import subprocess

a=widgets.Textarea(
    value="echo '' | gotify push -p 1",
    placeholder='Type something',
    description='String:',
    layout=Layout(width='550px', height='200px'),
    disabled=False
)
def slow_function(x):
    cmd(x)
    return x
    #ddd='cat r.sh'
def cmd(arg):
    p = subprocess.Popen(args=arg, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    single_html =p.stdout.read().decode(encoding="utf-8", errors="strict")
    print(single_html)

def f1(y):
    cmd(y)
    return y
interact_manual(f1, y=r'echo "select * from messages order by id desc limit 3" | sqlite3 /home/pia/pdf/gotify.db;ls /home/pia/upload/gotify* -lh;docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db;');
interact_manual(f1, y=r'docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db')
#y.close()!docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db -`date +%Y-%m-%d`.db
#interact_manual(slow_function,x='echo "" | gotify push -p 1  ');
interact_manual(slow_function,x=a);
#interact_manual(slow_function,a);from ipywidgets import interact, interactive, fixed, interact_manual,Layout
import ipywidgets as widgets
import subprocess

a=widgets.Textarea(
    value="echo '' | gotify push -p 1",
    placeholder='Type something',
    description='String:',
    layout=Layout(width='550px', height='200px'),
    disabled=False
)
def slow_function(x):
    cmd(x)
    return x
    #ddd='cat r.sh'
def cmd(arg):
    p = subprocess.Popen(args=arg, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    single_html =p.stdout.read().decode(encoding="utf-8", errors="strict")
    print(single_html)

def f1(y):
    cmd(y)
    return y
interact_manual(f1, y=r'echo "select * from messages order by id desc limit 3" | sqlite3 /home/pia/pdf/gotify.db;ls /home/pia/upload/gotify* -lh;docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db;');
interact_manual(f1, y=r'docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db')
#y.close()!docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db -`date +%Y-%m-%d`.db
#interact_manual(slow_function,x='echo "" | gotify push -p 1  ');
interact_manual(slow_function,x=a);
#interact_manual(slow_function,a);from ipywidgets import interact, interactive, fixed, interact_manual,Layout
import ipywidgets as widgets
import subprocess

a=widgets.Textarea(
    value="echo '' | gotify push -p 1",
    placeholder='Type something',
    description='String:',
    layout=Layout(width='550px', height='200px'),
    disabled=False
)
def slow_function(x):
    cmd(x)
    return x
    #ddd='cat r.sh'
def cmd(arg):
    p = subprocess.Popen(args=arg, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    single_html =p.stdout.read().decode(encoding="utf-8", errors="strict")
    print(single_html)

def f1(y):
    cmd(y)
    return y
interact_manual(f1, y=r'echo "select * from messages order by id desc limit 3" | sqlite3 /home/pia/pdf/gotify.db;ls /home/pia/upload/gotify* -lh;docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db;');
interact_manual(f1, y=r'docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db')
#y.close()!docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db -`date +%Y-%m-%d`.db
#interact_manual(slow_function,x='echo "" | gotify push -p 1  ');
interact_manual(slow_function,x=a);
#interact_manual(slow_function,a);from ipywidgets import interact, interactive, fixed, interact_manual,Layout
import ipywidgets as widgets
import subprocess

a=widgets.Textarea(
    value="echo '' | gotify push -p 1",
    placeholder='Type something',
    description='String:',
    layout=Layout(width='550px', height='200px'),
    disabled=False
)
def slow_function(x):
    cmd(x)
    return x
    #ddd='cat r.sh'
def cmd(arg):
    p = subprocess.Popen(args=arg, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    single_html =p.stdout.read().decode(encoding="utf-8", errors="strict")
    print(single_html)

def f1(y):
    cmd(y)
    return y
interact_manual(f1, y=r'echo "select * from messages order by id desc limit 3" | sqlite3 /home/pia/pdf/gotify.db;ls /home/pia/upload/gotify* -lh;docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db;');
interact_manual(f1, y=r'docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db')
#y.close()!docker cp 652b:/app/data/gotify.db /home/pia/pdf/gotify.db -`date +%Y-%m-%d`.db
#interact_manual(slow_function,x='echo "" | gotify push -p 1  ');
interact_manual(slow_function,x=a);
#interact_manual(slow_function,a);https://kkgithub.com/aluzzardi/wsshhttps://kkgithub.com/aluzzardi/wsshwebsocat ws://ws.vi-server.org/mirror/https://github.com/wijnen/python-websocketd/tree/master/example/htmlnp.array(mask, dtype = np.int8--port=8080 sh -c 'sh 2>&1'--port=8080 sh -c 'sh 2>&1'--port=8080 sh -c 'sh 2>&1'window.__rpc = new RPC("浏览器A","45.32.200.249",5123)window.__rpc.register(getHostName)
window.__rpc.register(getCookie)import asyncio
import websockets
import paramiko

async def ssh_handler(websocket, path):
    ssh_client = paramiko.SSHClient()
    ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh_client.connect('your_server_ip', username='your_username', password='your_password')

    while True:
        try:
            command = await websocket.recv()
            stdin, stdout, stderr = ssh_client.exec_command(command)
            output = stdout.read().decode() + stderr.read().decode()
            await websocket.send(output)
        except websockets.exceptions.ConnectionClosed:
            break

    ssh_client.close()

start_server = websockets.serve(ssh_handler, "localhost", 8765)

asyncio.get_event_loop().run_until_complete(start_server)
asyncio.get_event_loop().run_forever()
.schemadir(conn.modules.sys.path)https://kkgithub.com/tomerfiliba-org/rpyc/blob/master/docs/docs/zerodeploy.rsttouch /tmp/test.txtnpm install chromium-remote-debugging-proxynode socketserver/server.jsG:\pythondemo\wsterm-master\wstermutilsutilsutilsF:\Scoop\apps\git-with-openssh\current\F:\Scoop\apps\git-with-openssh\current\F:\Scoop\apps\git-with-openssh\current\http GET http://127.0.0.1:3000/messages/1Accueil
Tags
À propos
Contact
Synchronize clients of a Flask application with websockets
6 mars 2015
#Python #Web
tl;dr
If you’ve got a browser that supports html5 video and want to take the fast track, you could have a look at this 20-seconds demo and jump to the full code at the end of this article.

The browser as a GUI
When writing a python application for on-stage use, I’m more and more tempted to use a browser as the GUI. Using a microframework such as Flask, this can be done in minutes (literally), can be used locally or from a remote device (it looks much cooler to touch a tablet than grab a mouse on stage!) and it even allows several people to control the application from multiple devices.

But wait… there is a catch with this last point. If I use my browser to change something, this will not be visible to my colleagues unless they reload the page.

Websockets
There is a solution to this problem: websockets. They allow to establish a bi-directional communication channel between the server and the browser, allowing for real-time updates on both sides.

As it happens, Flask users are lucky: they can use the Flask-SocketIO extension on the server side, plus some jQuery + socket.io on the client side to achieve this with astonishing simplicity (note that it seems that you should use python 2.x for now, tough).

Let’s try to develop a mini-app with a few sliders that get synchronized between clients.

Let’s go
You’ll probably want to create and activate a virtualenv first (remember to use python 2.x), then install flask-socketio (which will install Flask and its dependencies as well)

$ pip install flask-socketio
Now create a file with an almost standard minimal Flask application:

from flask import Flask, render_template
from flask.ext.socketio import SocketIO

app = Flask(__name__)
socketio = SocketIO(app)

@app.route('/')
def index():
    return render_template('index.html')

if __name__ == '__main__':
    socketio.run(app, host='0.0.0.0')
This looks very much like a Flask application, except for the added socketio = SocketIO(app) and the way the app is run on the last line (note that the host='0.0.0.0' part is optional but allows to connect from another machine).

Of course you’ll need a templates/index.html file:

<!DOCTYPE HTML>
<html>
    <head>
        <title>Synchronized Sliders</title>
    </head>
    <body>
        <h1>Synchronized Sliders!</h1>
        
        <input id="slider1" type="range" min="0" max="50" value="25" /> <br>
        <input id="slider2" type="range" min="0" max="50" value="0" />
            
    </body>
</html>
Now run your python file and point your browser to http://localhost:5000/ and you should see a page with two sliders.

But of course, if you open a second browser and move a slider, the sliders in the first window will stay still.

Sending message from the client to the server
Now we’ll have to make these sliders alive. We’ll first add socket.io and jQuery to our web page. For now, the recommended socket.io version is 0.9.16.

In the html template file, add these lines to the header:

<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"></script>
<script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/socket.io/0.9.16/socket.io.min.js"></script>
Note: Of course if you intend to use this on stage, you’ll have to store these files locally, but for this quick demo this is enough.

Right under these lines, add the following script:

<script type="text/javascript" charset="utf-8">
    $(document).ready(function(){
        
        var socket = io.connect();

        // the socket.io documentation recommends sending an explicit package upon connection
        socket.on('connect', function() {
            socket.emit('connect', {data: 'I\'m connected!'});
        });
              
        $('input.sync').on('input', function(event) {
            socket.emit('value changed', {who: $(this).attr('id'), data: $(this).val()});
            return false;
        });
        
    });
</script>
The code is very simple:

First we create a websocket connection to the server.
Then we send a message to notify the server that we are connected. The first argument of socket.emit can be seen as the type of the message and will be used later for filtering. The second is the payload and will be available on the server side as a python dict.
Finally, we use jQuery to emit a message on the websocket each time the value of a slider changes. We then send the id of the slider and its new value.
Note: We use the input event in place of the more traditional change event because the latter is fired only when the mouse is released as the former is fired as soon as there is a change.

The jQuery invocation only acts on inputs with class sync, so we’ll have to add this class to the sliders.

<input id="slider1" class="sync" type="range" min="0" max="50" value="25" /> <br>
<input id="slider2" class="sync" type="range" min="0" max="50" value="0" />
You can now run the app again, but nothing visible will happen: the messages are sent, but we don’t do anything with them!

Getting message on the server
Now in your python file, add these (ridiculously simple) lines:

@socketio.on('value changed')
def value_changed(message):
    print(message)
Run your application: each time you move a slider, the message sent is dumped to the console.

But of course we don’t really mind the console. In your python code, add

values = {
    'slider1': 25,
    'slider2': 0,
}
and modify the value_changed function:

@socketio.on('value changed')
def value_changed(message):
    values[message['who']] = message['data']
Make this information available when rendering the template

@app.route('/')
def index():
    return render_template('index.html', **values)
and modify the template accordingly:

<input id="slider1" class="sync" type="range" min="0" max="50" value="{{slider1}}" /> <br>
<input id="slider2" class="sync" type="range" min="0" max="50" value="{{slider2}}" />
Now if you point a browser to your app, modify the sliders positions and then point another browser on the same page, it will display the new values rather than the default ones. Better, but this still isn’t what I would call synchronization.

Full synchronization
We will need the server to send websocket messages, so the first thing we want to do is complete the import line:

from flask.ext.socketio import SocketIO, emit
Then we modify the value_changed function to forward the message to all connected clients:

@socketio.on('value changed')
def value_changed(message):
    values[message['who']] = message['data']
    emit('update value', message, broadcast=True)
And finally we add some code to the javascript in the template:

socket.on('update value', function(msg) {
    $('input#'+msg.who).val(msg.data)
});
This simply means: whenever you get an “update value” message msg, find the input with id msg.who and set its value to msg.data.

And there we are: point two browsers to your app and move the sliders: the changes are synchronized between them! You can even try it from your phone or tablet, this should work as well.

And now for the good news: nothing in our code is specific to sliders; try adding a text input under the sliders, it should work too:

<input id="txt1" class="sync" type="text" />
Full code
This might seem complicated as we’ve been doing it step by step, but a look at the full python code makes it clear how easy this is:

from flask import Flask, render_template
from flask.ext.socketio import SocketIO, emit

app = Flask(__name__)
socketio = SocketIO(app)

values = {
    'slider1': 25,
    'slider2': 0,
}

@app.route('/')
def index():
    return render_template('index.html', **values)

@socketio.on('value changed')
def value_changed(message):
    values[message['who']] = message['data']
    emit('update value', message, broadcast=True)
 
if __name__ == '__main__':
    socketio.run(app, host='0.0.0.0')
The client side is slightly more verbose, but still very easy:

<!DOCTYPE HTML>
<html>
    <head>
        <title>Synchronized Sliders</title>
        <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"></script>
        <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/socket.io/0.9.16/socket.io.min.js"></script>
        <script type="text/javascript" charset="utf-8">
            $(document).ready(function(){
                
                var socket = io.connect();

                socket.on('connect', function() {
                    socket.emit('connect', {data: 'I\'m connected!'});
                });
                      
                $('input.sync').on('input', function(event) {
                    socket.emit('value changed', {who: $(this).attr('id'), data: $(this).val()});
                    return false;
                });
                
                socket.on('update value', function(msg) {
                    $('input#'+msg.who).val(msg.data)
                });
                
            });
        </script>
    </head>
    <body>
        <h1>Synchronized Sliders!</h1>
        
        <input id="slider1" class="sync" type="range" min="0" max="50" value="{{slider1}}" /> <br>
        <input id="slider2" class="sync" type="range" min="0" max="50" value="{{slider2}}" />
            
        <input id="txt1" class="sync" type="text" />

    </body>
</html>
I think the combination socket.IO + Flask-SocketIO makes all this incredibly easy and I’d like to thank the authors of these two libraries for their great work.

Articles connexes:

Wifi Client Mode for Mugic
Mise à jour: Sondages avec Flask
Mise à jour: Sondages avec Flask
Apache Log Analysis with Haskell and Python
Tutoriel: Sondages avec Flask
Sauf mention du contraire, tout le contenu de ce site est sous licence Creative Commons BY-SA.

Vous pouvez suivre l'actualité de ce site par ce flux RSS.Synchronize clients of a Flask application with websocketshttps://github.com/wijnen/python-websocketd/tree/master/example/htmlnp.array(mask, dtype = np.int8--port=8080 sh -c 'sh 2>&1'--port=8080 sh -c 'sh 2>&1'--port=8080 sh -c 'sh 2>&1'window.__rpc = new RPC("浏览器A","45.32.200.249",5123)window.__rpc.register(getHostName)
window.__rpc.register(getCookie)import asyncio
import websockets
import paramiko

async def ssh_handler(websocket, path):
    ssh_client = paramiko.SSHClient()
    ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh_client.connect('your_server_ip', username='your_username', password='your_password')

    while True:
        try:
            command = await websocket.recv()
            stdin, stdout, stderr = ssh_client.exec_command(command)
            output = stdout.read().decode() + stderr.read().decode()
            await websocket.send(output)
        except websockets.exceptions.ConnectionClosed:
            break

    ssh_client.close()

start_server = websockets.serve(ssh_handler, "localhost", 8765)

asyncio.get_event_loop().run_until_complete(start_server)
asyncio.get_event_loop().run_forever()
.schemadir(conn.modules.sys.path)https://kkgithub.com/tomerfiliba-org/rpyc/blob/master/docs/docs/zerodeploy.rsttouch /tmp/test.txtnpm install chromium-remote-debugging-proxynode socketserver/server.jsG:\pythondemo\wsterm-master\wstermutilsutilsutilsF:\Scoop\apps\git-with-openssh\current\F:\Scoop\apps\git-with-openssh\current\F:\Scoop\apps\git-with-openssh\current\http GET http://127.0.0.1:3000/messages/1Accueil
Tags
À propos
Contact
Synchronize clients of a Flask application with websockets
6 mars 2015
#Python #Web
tl;dr
If you’ve got a browser that supports html5 video and want to take the fast track, you could have a look at this 20-seconds demo and jump to the full code at the end of this article.

The browser as a GUI
When writing a python application for on-stage use, I’m more and more tempted to use a browser as the GUI. Using a microframework such as Flask, this can be done in minutes (literally), can be used locally or from a remote device (it looks much cooler to touch a tablet than grab a mouse on stage!) and it even allows several people to control the application from multiple devices.

But wait… there is a catch with this last point. If I use my browser to change something, this will not be visible to my colleagues unless they reload the page.

Websockets
There is a solution to this problem: websockets. They allow to establish a bi-directional communication channel between the server and the browser, allowing for real-time updates on both sides.

As it happens, Flask users are lucky: they can use the Flask-SocketIO extension on the server side, plus some jQuery + socket.io on the client side to achieve this with astonishing simplicity (note that it seems that you should use python 2.x for now, tough).

Let’s try to develop a mini-app with a few sliders that get synchronized between clients.

Let’s go
You’ll probably want to create and activate a virtualenv first (remember to use python 2.x), then install flask-socketio (which will install Flask and its dependencies as well)

$ pip install flask-socketio
Now create a file with an almost standard minimal Flask application:

from flask import Flask, render_template
from flask.ext.socketio import SocketIO

app = Flask(__name__)
socketio = SocketIO(app)

@app.route('/')
def index():
    return render_template('index.html')

if __name__ == '__main__':
    socketio.run(app, host='0.0.0.0')
This looks very much like a Flask application, except for the added socketio = SocketIO(app) and the way the app is run on the last line (note that the host='0.0.0.0' part is optional but allows to connect from another machine).

Of course you’ll need a templates/index.html file:

<!DOCTYPE HTML>
<html>
    <head>
        <title>Synchronized Sliders</title>
    </head>
    <body>
        <h1>Synchronized Sliders!</h1>
        
        <input id="slider1" type="range" min="0" max="50" value="25" /> <br>
        <input id="slider2" type="range" min="0" max="50" value="0" />
            
    </body>
</html>
Now run your python file and point your browser to http://localhost:5000/ and you should see a page with two sliders.

But of course, if you open a second browser and move a slider, the sliders in the first window will stay still.

Sending message from the client to the server
Now we’ll have to make these sliders alive. We’ll first add socket.io and jQuery to our web page. For now, the recommended socket.io version is 0.9.16.

In the html template file, add these lines to the header:

<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"></script>
<script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/socket.io/0.9.16/socket.io.min.js"></script>
Note: Of course if you intend to use this on stage, you’ll have to store these files locally, but for this quick demo this is enough.

Right under these lines, add the following script:

<script type="text/javascript" charset="utf-8">
    $(document).ready(function(){
        
        var socket = io.connect();

        // the socket.io documentation recommends sending an explicit package upon connection
        socket.on('connect', function() {
            socket.emit('connect', {data: 'I\'m connected!'});
        });
              
        $('input.sync').on('input', function(event) {
            socket.emit('value changed', {who: $(this).attr('id'), data: $(this).val()});
            return false;
        });
        
    });
</script>
The code is very simple:

First we create a websocket connection to the server.
Then we send a message to notify the server that we are connected. The first argument of socket.emit can be seen as the type of the message and will be used later for filtering. The second is the payload and will be available on the server side as a python dict.
Finally, we use jQuery to emit a message on the websocket each time the value of a slider changes. We then send the id of the slider and its new value.
Note: We use the input event in place of the more traditional change event because the latter is fired only when the mouse is released as the former is fired as soon as there is a change.

The jQuery invocation only acts on inputs with class sync, so we’ll have to add this class to the sliders.

<input id="slider1" class="sync" type="range" min="0" max="50" value="25" /> <br>
<input id="slider2" class="sync" type="range" min="0" max="50" value="0" />
You can now run the app again, but nothing visible will happen: the messages are sent, but we don’t do anything with them!

Getting message on the server
Now in your python file, add these (ridiculously simple) lines:

@socketio.on('value changed')
def value_changed(message):
    print(message)
Run your application: each time you move a slider, the message sent is dumped to the console.

But of course we don’t really mind the console. In your python code, add

values = {
    'slider1': 25,
    'slider2': 0,
}
and modify the value_changed function:

@socketio.on('value changed')
def value_changed(message):
    values[message['who']] = message['data']
Make this information available when rendering the template

@app.route('/')
def index():
    return render_template('index.html', **values)
and modify the template accordingly:

<input id="slider1" class="sync" type="range" min="0" max="50" value="{{slider1}}" /> <br>
<input id="slider2" class="sync" type="range" min="0" max="50" value="{{slider2}}" />
Now if you point a browser to your app, modify the sliders positions and then point another browser on the same page, it will display the new values rather than the default ones. Better, but this still isn’t what I would call synchronization.

Full synchronization
We will need the server to send websocket messages, so the first thing we want to do is complete the import line:

from flask.ext.socketio import SocketIO, emit
Then we modify the value_changed function to forward the message to all connected clients:

@socketio.on('value changed')
def value_changed(message):
    values[message['who']] = message['data']
    emit('update value', message, broadcast=True)
And finally we add some code to the javascript in the template:

socket.on('update value', function(msg) {
    $('input#'+msg.who).val(msg.data)
});
This simply means: whenever you get an “update value” message msg, find the input with id msg.who and set its value to msg.data.

And there we are: point two browsers to your app and move the sliders: the changes are synchronized between them! You can even try it from your phone or tablet, this should work as well.

And now for the good news: nothing in our code is specific to sliders; try adding a text input under the sliders, it should work too:

<input id="txt1" class="sync" type="text" />
Full code
This might seem complicated as we’ve been doing it step by step, but a look at the full python code makes it clear how easy this is:

from flask import Flask, render_template
from flask.ext.socketio import SocketIO, emit

app = Flask(__name__)
socketio = SocketIO(app)

values = {
    'slider1': 25,
    'slider2': 0,
}

@app.route('/')
def index():
    return render_template('index.html', **values)

@socketio.on('value changed')
def value_changed(message):
    values[message['who']] = message['data']
    emit('update value', message, broadcast=True)
 
if __name__ == '__main__':
    socketio.run(app, host='0.0.0.0')
The client side is slightly more verbose, but still very easy:

<!DOCTYPE HTML>
<html>
    <head>
        <title>Synchronized Sliders</title>
        <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"></script>
        <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/socket.io/0.9.16/socket.io.min.js"></script>
        <script type="text/javascript" charset="utf-8">
            $(document).ready(function(){
                
                var socket = io.connect();

                socket.on('connect', function() {
                    socket.emit('connect', {data: 'I\'m connected!'});
                });
                      
                $('input.sync').on('input', function(event) {
                    socket.emit('value changed', {who: $(this).attr('id'), data: $(this).val()});
                    return false;
                });
                
                socket.on('update value', function(msg) {
                    $('input#'+msg.who).val(msg.data)
                });
                
            });
        </script>
    </head>
    <body>
        <h1>Synchronized Sliders!</h1>
        
        <input id="slider1" class="sync" type="range" min="0" max="50" value="{{slider1}}" /> <br>
        <input id="slider2" class="sync" type="range" min="0" max="50" value="{{slider2}}" />
            
        <input id="txt1" class="sync" type="text" />

    </body>
</html>
I think the combination socket.IO + Flask-SocketIO makes all this incredibly easy and I’d like to thank the authors of these two libraries for their great work.

Articles connexes:

Wifi Client Mode for Mugic
Mise à jour: Sondages avec Flask
Mise à jour: Sondages avec Flask
Apache Log Analysis with Haskell and Python
Tutoriel: Sondages avec Flask
Sauf mention du contraire, tout le contenu de ce site est sous licence Creative Commons BY-SA.

Vous pouvez suivre l'actualité de ce site par ce flux RSS.Synchronize clients of a Flask application with websocketsSynchronize clients of a Flask application with websocketsSynchronize clients of a Flask application with websocketsSynchronize clients of a Flask application with websockets4、糖打印机

你想过用糖来 3D 打印吗？有人就真的做出了一台糖打印机。5、不可变 Linux 发行版（英文）



越来越多的开发者开始使用不可变的 Linux 发行版（immutable Linux distro），即系统文件在运行期间不可更改。这样会让系统更稳定，也更容易迁移和回滚。https://github.com/ruanyf/weekly/issues/5744Kyanos：基于eB(https://github.com/ruanyf/weekly/issues/57735、机器学习的线性代数简介（Python 版）



一篇英语的长篇文章，通过 Python 语言学习线性代数。5、机器学习的线性代数简介（Python 版）



一篇英语的长篇文章，通过 Python 语言学习线性代数。2、如何将任意命令装为图形界面？（英文）



本文介绍使用 Gooey 这个工具为任何命令行的命令，生成一个图形界面，用户只需写一个配置文件即可。上图是一个 MP3 转换命令的图形界面。一款高度简洁的在线微信 Markdown 编辑器 ruanyf/weekly](https://github.com/ruanyf/weekly/issues/1011) 5、不可变 Linux 发行版（英文）



越来越多的开发者开始使用不可变的 Linux 发行版（immutable Linux distro），即系统文件在运行期间不可更改。这样会让系统更稳定，也更容易迁移和回滚。https://github.com/ruanyf/weekly/issues/5744Kyanos：基于eB(https://github.com/ruanyf/weekly/issues/57735、机器学习的线性代数简介（Python 版）



一篇英语的长篇文章，通过 Python 语言学习线性代数。5、机器学习的线性代数简介（Python 版）



一篇英语的长篇文章，通过 Python 语言学习线性代数。2、如何将任意命令装为图形界面？（英文）



本文介绍使用 Gooey 这个工具为任何命令行的命令，生成一个图形界面，用户只需写一个配置文件即可。上图是一个 MP3 转换命令的图形界面。一款高度简洁的在线微信 Markdown 编辑器 ruanyf/weekly](https://github.com/ruanyf/weekly/issues/1011) <!DOCTYPE HTML>
<html>
    <head>
        <title>Synchronized Sliders</title>
        <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"></script>
        <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/socket.io/0.9.16/socket.io.min.js"></script>
        <script type="text/javascript" charset="utf-8">
            $(document).ready(function(){
                
                var socket = io.connect();

                socket.on('connect', function() {
                    socket.emit('connect', {data: 'I\'m connected!'});
                });
                      
                $('input.sync').on('input', function(event) {
                    socket.emit('value changed', {who: $(this).attr('id'), data: $(this).val()});
                    return false;
                });
                
                socket.on('update value', function(msg) {
                    $('input#'+msg.who).val(msg.data)
                });
                
            });
        </script>
    </head>
    <body>
        <h1>Synchronized Sliders!</h1>
        
        <input id="slider1" class="sync" type="range" min="0" max="50" value="{{slider1}}" /> <br>
        <input id="slider2" class="sync" type="range" min="0" max="50" value="{{slider2}}" />
            
        <input id="txt1" class="sync" type="text" />

    </body>
</html>var socket =  io.connect('https://xxxxxx', {transports: ['websocket']});http://45.32.200.249:5000/    t = time.time()
    resultId = str(int(t * 10000))