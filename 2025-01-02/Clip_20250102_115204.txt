{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "dc42345d-5a4e-4fa2-b236-8713284feaae",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.3.9\n",
      "<module 'distlib' from 'https://files.pythonhosted.org/packages/91/a1/cf2472db20f7ce4a6be1253a81cfdf85ad9c7885ffbed7047fb72c24cf87/distlib-0.3.9-py2.py3-none-any.whl#distlib/__init__.py'>\n",
      "Hello world\n",
      "<module 'httpimport' from '/home/pia/miniconda3/envs/test313/lib/python3.13/site-packages/httpimport.py'>\n"
     ]
    }
   ],
   "source": [
    "# From PyPI\n",
    "with httpimport.pypi_repo():\n",
    "  import distlib # https://pypi.org/project/distlib/\n",
    "\n",
    "print(distlib.__version__)\n",
    "\n",
    "pypi_module = httpimport.load('distlib', importer_class=httpimport.PyPIImporter)\n",
    "print(pypi_module)\n",
    "\n",
    "\n",
    "url = \"https://gist.githubusercontent.com/operatorequals/ee5049677e7bbc97af2941d1d3f04ace/raw/e55fa867d3fb350f70b2897bb415f410027dd7e4\"\n",
    "\n",
    "with httpimport.remote_repo(url):\n",
    "  import hello\n",
    "hello.hello()\n",
    "\n",
    "with httpimport.github_repo('operatorequals', 'httpimport', ref='master'):\n",
    "  import httpimport as httpimport_upstream\n",
    "print(httpimport_upstream)\n",
    "  # Also works with 'bitbucket_repo' and 'gitlab_repo'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "92b7c97d-c032-4861-a9dc-4a4ec94477f8",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dcca4841-3b86-47f4-bbbb-21f5bc9b1d8c",
   "metadata": {},
   "outputs": [],
   "source": [
    "from twisted.internet import reactor, protocol\n",
    "from autobahn.websocket import WebSocketServerFactory, \\\n",
    "                               WebSocketServerProtocol, \\\n",
    "                               listenWS\n",
    "from twisted.python.log import startLogging, msg\n",
    "import sys\n",
    "startLogging(sys.stdout)\n",
    "\n",
    "# Examples:\n",
    "# runner.py /bin/sh -c \"tail -f /var/log/nginx/access.log | grep -v secret_admin_page\" --line-buffered | awk '{\\$1=\\\"\\\"; print}'\"\n",
    "# runner.py tail tail -F /var/log/nginx/access.log\n",
    "\n",
    "COMMAND_NAME = sys.argv[1]\n",
    "COMMAND_ARGS = sys.argv[1:]\n",
    "LOCAL_ONLY = False\n",
    "DEBUG = True\n",
    "\n",
    "\n",
    "class ProcessProtocol(protocol.ProcessProtocol):\n",
    "    \"\"\" I handle a child process launched via reactor.spawnProcess.\n",
    "    I just buffer the output into a list and call WebSocketProcessOutputterThingFactory.broadcast when\n",
    "    any new output is read\n",
    "    \"\"\"\n",
    "    def __init__(self, websocket_factory):\n",
    "        self.ws = websocket_factory\n",
    "        self.buffer = []\n",
    "        \n",
    "    def outReceived(self, message):\n",
    "        self.ws.broadcast(message)\n",
    "        self.buffer.append(message)\n",
    "        self.buffer = self.buffer[-10:] # Last 10 messages please\n",
    "\n",
    "    def errReceived(self, data):\n",
    "        print \"Error: %s\" % data\n",
    "\n",
    "\n",
    "# http://autobahn.ws/python\n",
    "class WebSocketProcessOutputterThing(WebSocketServerProtocol):\n",
    "    \"\"\" I handle a single connected client. We don't need to do much here, simply call the register and un-register\n",
    "    functions when needed.\n",
    "    \"\"\"\n",
    "    def onOpen(self):\n",
    "        self.factory.register(self)\n",
    "        for line in self.factory.process.buffer:\n",
    "            self.sendMessage(line)\n",
    "\n",
    "    def connectionLost(self, reason):\n",
    "        WebSocketServerProtocol.connectionLost(self, reason)\n",
    "        #super(WebSocketProcessOutputterThing, self).connectionLost(self, reason)\n",
    "        self.factory.unregister(self)\n",
    "\n",
    "\n",
    "class WebSocketProcessOutputterThingFactory(WebSocketServerFactory):\n",
    "    \"\"\" I maintain a list of connected clients and provide a method for pushing a single message to all of them.\n",
    "    \"\"\"\n",
    "    protocol = WebSocketProcessOutputterThing\n",
    "        \n",
    "    def __init__(self, *args, **kwargs):\n",
    "        WebSocketServerFactory.__init__(self, *args, **kwargs)\n",
    "        #super(WebSocketProcessOutputterThingFactory, self).__init__(self, *args, **kwargs)\n",
    "        self.clients = []\n",
    "        self.process = ProcessProtocol(self)\n",
    "        reactor.spawnProcess(self.process,COMMAND_NAME, COMMAND_ARGS, {}, usePTY=True)\n",
    "\n",
    "    def register(self, client):\n",
    "        msg(\"Registered client %s\" % client)\n",
    "        if not client in self.clients:\n",
    "            self.clients.append(client)\n",
    "\n",
    "    def unregister(self, client):\n",
    "        msg(\"Unregistered client %s\" % client)\n",
    "        if client in self.clients:\n",
    "            self.clients.remove(client)\n",
    "\n",
    "    def broadcast(self, message):\n",
    "        for client in self.clients:\n",
    "            client.sendMessage(message)\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    print \"Running process %s with args %s\" % (COMMAND_NAME, COMMAND_ARGS)\n",
    "    factory = WebSocketProcessOutputterThingFactory(\"ws://%s:9000\" % (\"localhost\" if LOCAL_ONLY else \"0.0.0.0\"), debug=False)\n",
    "    listenWS(factory)\n",
    "    reactor.run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3a3b4373-9a85-4a44-a644-5bebb0ef6d15",
   "metadata": {},
   "outputs": [],
   "source": [
    "from flask import Flask, render_template\n",
    "from flask_socketio import SocketIO, emit\n",
    "#from flask.ext.socketio import SocketIO, emit\n",
    "\n",
    "app = Flask(__name__)\n",
    "socketio = SocketIO(app)\n",
    "\n",
    "values = {\n",
    "    'slider1': 25,\n",
    "    'slider2': 0,\n",
    "}\n",
    "\n",
    "@app.route('/')\n",
    "def index():\n",
    "    return render_template('index.html', **values)\n",
    "\n",
    "@socketio.on('value changed')\n",
    "def value_changed(message):\n",
    "    values[message['who']] = message['data']\n",
    "    emit('update value', message, broadcast=True)\n",
    " \n",
    "if __name__ == '__main__':\n",
    "    socketio.run(app, host='0.0.0.0')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b2bafe74-1211-43e7-8c29-9cf7d9c03773",
   "metadata": {},
   "outputs": [],
   "source": [
    "import asyncio\n",
    "import websockets\n",
    "import paramiko\n",
    "\n",
    "async def ssh_handler(websocket, path):\n",
    "    ssh_client = paramiko.SSHClient()\n",
    "    ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n",
    "    ssh_client.connect('your_server_ip', username='your_username', password='your_password')\n",
    "\n",
    "    while True:\n",
    "        try:\n",
    "            command = await websocket.recv()\n",
    "            stdin, stdout, stderr = ssh_client.exec_command(command)\n",
    "            output = stdout.read().decode() + stderr.read().decode()\n",
    "            await websocket.send(output)\n",
    "        except websockets.exceptions.ConnectionClosed:\n",
    "            break\n",
    "\n",
    "    ssh_client.close()\n",
    "\n",
    "start_server = websockets.serve(ssh_handler, \"localhost\", 8765)\n",
    "\n",
    "asyncio.get_event_loop().run_until_complete(start_server)\n",
    "asyncio.get_event_loop().run_forever()\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5872893e-9dc3-4c37-9834-7f3278fa88d0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "url = \"http://45.32.200.249:5000/send?group=ws-group&action=clientTime\"\n",
    "import time\n",
    "st_time = time.time()\n",
    "print(requests.get(url).json())\n",
    "print(\"共花费\", time.time()-st_time)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3c13912c-2226-41ac-bdfc-3851c5307d73",
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "\n",
    "js_code = \"\"\"\n",
    "(function(){\n",
    "    console.log(\"test\")\n",
    "    return \"执行成功\"\n",
    "})()\n",
    "\"\"\"\n",
    "\n",
    "url = \"http://localhost:12080/execjs\"\n",
    "data = {\n",
    "    \"group\": \"zzz\",\n",
    "    \"code\": js_code\n",
    "}\n",
    "res = requests.post(url, data=data)\n",
    "print(res.text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fefdbca3-3afb-4c90-b0db-b4af05add84e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# -*- coding: utf-8 -*-\n",
    "# 运行websocket服务器\n",
    "\n",
    "import websocket\n",
    "\n",
    "def on_message(ws, message):\n",
    "    print(f\"Received message: {message}\")\n",
    "\n",
    "def on_error(ws, error):\n",
    "    print(f\"Error: {error}\")\n",
    "\n",
    "def on_close(ws, close_status_code, close_msg):\n",
    "    print(f\"Connection closed with status code {close_status_code}\")\n",
    "\n",
    "def on_open(ws):\n",
    "    print(\"Connection opened\")\n",
    "    # 在连接建立后发送一条消息\n",
    "    #ws.send(\"abcd\")\n",
    "    #ws.send(b'\\x01\\x02\\x03\\x04')\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    # WebSocket 服务器地址\n",
    "    ws_url = \"ws://127.0.0.1:8765\"\n",
    "\n",
    "    # 创建 WebSocket 连接\n",
    "    ws = websocket.WebSocketApp(ws_url,\n",
    "                                on_message=on_message,\n",
    "                                on_error=on_error,\n",
    "                                on_close=on_close)\n",
    "\n",
    "    # 设置连接建立时的回调函数\n",
    "    ws.on_open = on_open\n",
    "\n",
    "    # 启动 WebSocket 连接\n",
    "    ws.run_forever()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "87962650-2d22-4ec4-916c-b3f118b0791d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eeca874a-d1cd-4ba6-bea9-86b8ea9136ee",
   "metadata": {},
   "outputs": [],
   "source": [
    "from ipywidgets import widgets, interact_manual\n",
    "import subprocess\n",
    "a=widgets.Textarea(\n",
    "    value='Hello World',\n",
    "    placeholder='Type something',\n",
    "    description='String:',\n",
    "    disabled=False\n",
    ")\n",
    "def slow_function(x):\n",
    "    #ddd='cat r.sh'\n",
    "    p = subprocess.Popen(args=x, shell=True, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\n",
    "    single_html =p.stdout.read().decode(encoding=\"utf-8\", errors=\"strict\")\n",
    "    print(single_html)\n",
    "    return x\n",
    "#interact(f1, x='ls');\n",
    "interact_manual(slow_function,x='ls 1');\n",
    "#interact_manual(slow_function,a);\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dbd3c8a9-8f78-4d07-a5ca-37727210ce25",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f5fbd7ef-6a19-4d7f-9f54-773551077dd6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# !gotify push \" 11 \" \n",
    "#!curtime=`date +%Y-%m-%d`\n",
    "#!docker cp 652b:/app/data/gotify.db /home/pia/upload/gotify-`date +%Y-%m-%d`.db"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "23ee93d6-689f-4a1f-8f27-29d3e0e4371e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import sqlite3\n",
    "import datetime\n",
    "\n",
    "curr_time = datetime.datetime.now().strftime(\"%Y-%m-%d\")\n",
    "\n",
    "# Create a connection to a new SQLite database (or connect to an existing one)\n",
    "conn = sqlite3.connect('/home/pia/upload/gotify-' + curr_time + '.db')\n",
    "#conn = sqlite3.connect('gotify.db')\n",
    "\n",
    "# Create a cursor object\n",
    "cursor = conn.cursor()\n",
    "\n",
    "# Create a new table\n",
    "# cursor.execute('''\n",
    "# CREATE TABLE IF NOT EXISTS users (\n",
    "#    id INTEGER PRIMARY KEY,\n",
    "#    name TEXT,\n",
    "#    age INTEGER\n",
    "#)\n",
    "#''')\n",
    "\n",
    "# Commit the changes and close the connection\n",
    "# conn.commit()\n",
    "\n",
    "# Create a DataFrame\n",
    "data = {\n",
    "    'name': ['Alice', 'Bob', 'Charlie'],\n",
    "    'age': [25, 30, 35]\n",
    "}\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "# Insert the DataFrame into the SQLite table\n",
    "# df.to_sql('users', conn, if_exists='append', index=False)\n",
    "\n",
    "# Read data from the SQLite table into a DataFrame\n",
    "df_from_sql = pd.read_sql_query('SELECT * FROM messages', conn)\n",
    "\n",
    "# Display the DataFrame\n",
    "#print(df_from_sql)\n",
    "\n",
    "# Update a user's age\n",
    "#cursor.execute('UPDATE users SET age = ? WHERE name = ?', (26, 'Alice'))\n",
    "\n",
    "# Commit the changes\n",
    "#conn.commit()\n",
    "\n",
    "# Delete a user\n",
    "#cursor.execute('DELETE FROM users WHERE name = ?', ('Bob',))\n",
    "\n",
    "# Commit the changes\n",
    "#conn.commit()\n",
    "\n",
    "# Close the connection\n",
    "conn.close()\n",
    "df_from_sql.to_csv(\"gotify.csv\")\n",
    "df_from_sql.head()\n",
    "df_from_sql[::-1][[ \"message\"]]\n",
    "pd.options.display.max_colwidth = 100\n",
    "df_from_sql.loc[6]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f52817f7-e556-480d-b334-9080ad7f1286",
   "metadata": {},
   "outputs": [],
   "source": [
    "#!/usr/bin/env python3\n",
    "# -*- coding: utf-8 -*-\n",
    "# @Time : 2020/7/13 17:20\n",
    "# @Author : way\n",
    "# @Site : \n",
    "# @Describe: 执行 shell\n",
    "\n",
    "import subprocess\n",
    "\n",
    "cmd = \"ls\"\n",
    "\n",
    "# 阻塞执行\n",
    "p = subprocess.Popen(cmd, shell=True)\n",
    "p.wait()\n",
    "print(p.returncode)\n",
    "\n",
    "# 输出返回信息\n",
    "p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)\n",
    "stdout, stderr = p.communicate()\n",
    "print(p.returncode, stdout.decode(), stderr.decode('gbk'))\n",
    "\n",
    "# 记录日志\n",
    "logfile = 'xxx.log'\n",
    "with open(logfile, 'a', encoding='utf-8') as log:\n",
    "    r = subprocess.Popen(cmd, stdout=log, stderr=log, shell=True)\n",
    "r.wait()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0b5deaea-785c-4ea4-92ee-56ab405f95ea",
   "metadata": {},
   "outputs": [],
   "source": [
    "#!/usr/bin/env python3\n",
    "# -*- coding: utf-8 -*-\n",
    "# @Time : 2022/1/10 11:02\n",
    "# @Author : way\n",
    "# @Site : \n",
    "# @Describe: 异步\n",
    "\n",
    "import time\n",
    "import asyncio\n",
    "from random import randint\n",
    "\n",
    "\n",
    "async def worker(lt: list):\n",
    "    while 1:\n",
    "        time.sleep(3)\n",
    "        lt.append(1)\n",
    "        print(lt)\n",
    "\n",
    "async def worker2(lt: list):\n",
    "    while 1:\n",
    "        time.sleep(1)\n",
    "        lt.append(2)\n",
    "        print(lt)\n",
    "\n",
    "s = []\n",
    "workers = [worker(s), worker2(s)]\n",
    "loop = asyncio.get_event_loop()\n",
    "loop.create_task(worker(s))\n",
    "loop.create_task(worker2(s))\n",
    "loop.run_forever()\n",
    "print(s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "24dd4ef0-17c6-43a0-bc8b-6976a8d00319",
   "metadata": {},
   "outputs": [],
   "source": [
    "#!/usr/bin/env python3\n",
    "# -*- coding: utf-8 -*-\n",
    "# @Time : 2020/9/17 17:53\n",
    "# @Author : way\n",
    "# @Site : \n",
    "# @Describe: 执行 sql\n",
    "\n",
    "from sqlalchemy import create_engine, orm\n",
    "\n",
    "ENGINE_CONFIG = 'postgresql://spider:spider@127.0.0.1:5432/spider_db'\n",
    "\n",
    "\n",
    "# 'mysql://user:pwd@127.0.0.1:3306/spider_db?charset=utf8',  # mysql\n",
    "# 'postgresql://user:pwd@127.0.0.1:5432/spider_db',  # postgresql\n",
    "# 'oracle://user:pwd@127.0.0.1:1521/spider_db',  # oracle\n",
    "# 'mssql+pymssql://user:pwd@127.0.0.1:1433/spider_db',  # sqlserver\n",
    "# 'sqlite:///D:/GitHub/pydemo/test.db'  # sqlite\n",
    "\n",
    "class DB:\n",
    "\n",
    "    def __init__(self, ENGINE_CONFIG):\n",
    "        engine = create_engine(ENGINE_CONFIG)\n",
    "        self.session = orm.sessionmaker(bind=engine)()\n",
    "\n",
    "    def read(self, sql):\n",
    "        try:\n",
    "            cursor = self.session.execute(sql)\n",
    "            print(\"执行成功\")\n",
    "            return cursor.fetchall()\n",
    "        except Exception as e:\n",
    "            print(f\"执行失败：{e}\")\n",
    "\n",
    "    def execute(self, sql):\n",
    "        try:\n",
    "            self.session.execute(sql)\n",
    "            self.session.commit()\n",
    "            print(\"执行成功\")\n",
    "        except Exception as e:\n",
    "            print(f\"执行失败：{e}\")\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    db = DB(ENGINE_CONFIG)\n",
    "    sql = \"\"\"\n",
    "    \n",
    "    \"\"\"\n",
    "    # db.execute(sql)   # ddl\n",
    "    # rows = db.read(sql)   # read\n",
    "    # print(rows)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "42677306-cf34-4d72-b38c-0e5eadbe92da",
   "metadata": {},
   "outputs": [],
   "source": [
    "#!/usr/bin/env python3\n",
    "# -*- coding: utf-8 -*-\n",
    "# @Time : 2021/2/3 15:01\n",
    "# @Author : way\n",
    "# @Site : \n",
    "# @Describe: 更新 github 的 host 配置\n",
    "\n",
    "import subprocess\n",
    "import requests\n",
    "\n",
    "url = 'https://gitlab.com/ineo6/hosts/-/raw/master/next-hosts'\n",
    "res = requests.get(url)\n",
    "github_hosts = '\\n'.join([i for i in res.text.strip().split('\\n') if 'github' in i.lower() and not i.startswith('#') or 'Update at' in i])\n",
    "\n",
    "path = \"C:\\Windows\\System32\\drivers\\etc\\hosts\"\n",
    "bak_path = \"C:\\Windows\\System32\\drivers\\etc\\hosts_bak\"\n",
    "with open(path, 'r', encoding='utf-8') as f:\n",
    "    # 先备份\n",
    "    old = ''.join([line for line in f.readlines() if 'github' not in line.lower()])\n",
    "    with open(bak_path, 'w', encoding='utf-8') as bak:\n",
    "        bak.write(old)\n",
    "    # 更新host\n",
    "    new = old + f'# GitHub Start\\n{github_hosts}\\n# GitHub End'\n",
    "    with open(path, 'w', encoding='utf-8') as f2:\n",
    "         f2.write(new)\n",
    "print(f\"github host 已更新\")\n",
    "child_process = subprocess.Popen('ipconfig /flushdns', shell=True)\n",
    "(stdout, stderr) = child_process.communicate()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e7f9a351-fc40-4622-b018-9815414fb217",
   "metadata": {},
   "outputs": [],
   "source": [
    "#!/usr/bin/env python3\n",
    "# -*- coding: utf-8 -*-\n",
    "# @Time : 2020/7/21 16:42\n",
    "# @Author : way\n",
    "# @Site : \n",
    "# @Describe: 定时执行命令\n",
    "\n",
    "import time\n",
    "import subprocess\n",
    "import sys\n",
    "\n",
    "# 开始执行\n",
    "# hour, min = int(sys.argv[1]), int(sys.argv[2])\n",
    "hour, min = 4, 58\n",
    "#min_inc = 23 * 60    # 执行间隔（min） 默认 23 小时\n",
    "min_inc = 1 * 2\n",
    "print(f\"下次执行时间 {hour}:{min}\")\n",
    "print(f\"等待...\")\n",
    "\n",
    "while True:\n",
    "    now = time.localtime()\n",
    "    if now.tm_hour == hour and now.tm_min == min:\n",
    "        print(f\"{hour}:{min} 开始执行...\")\n",
    "\n",
    "        cmd = \"\"\n",
    "        p = subprocess.Popen(cmd, shell=True)\n",
    "        p.wait()\n",
    "        print(f\"执行完毕\")\n",
    "\n",
    "        # 计算下次执行时间\n",
    "        hour_inc, min = divmod(min + min_inc, 60)\n",
    "        _, hour = divmod(hour + hour_inc, 24)\n",
    "        print(f\"下次执行时间 {hour}:{min}\")\n",
    "        print(f\"等待...\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "843173c0-2e5a-428b-9de3-04a8e8c114e1",
   "metadata": {},
   "outputs": [],
   "source": [
    "text1 = \"\"\"é\\x9d\\x9eäººå\\x93\\x89ç¬¬600è¯\\x9d\"\"\"\n",
    "text1 = text1.encode('raw_unicode_escape').decode()\n",
    "print(text1)\n",
    "\n",
    "text2 = '\\u5403\\u9e21\\u6218\\u573a'\n",
    "text2 = text2.encode().decode()\n",
    "print(text2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3c20a00a-c6c1-41d6-9cd5-9cc8059a440a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import psutil\n",
    "name = 'sendmail'\n",
    "pids = []\n",
    "all_pids = psutil.pids()\n",
    "\n",
    "for pid in all_pids:\n",
    "    p = psutil.Process(pid)\n",
    "    print(pid, p.name())\n",
    "    if p.name() == name:\n",
    "        pids.append(pid)\n",
    "print('-------------------------')\n",
    "\n",
    "for pid in pids:\n",
    "    p = psutil.Process(pid)\n",
    "    for son in p.children(recursive=True):\n",
    "        #son.terminate()\n",
    "        print(son)\n",
    "    #p.terminate()\n",
    "def kill_process(name):\n",
    "    pids = []\n",
    "    all_pids = psutil.pids()\n",
    "\n",
    "    for pid in all_pids:\n",
    "        p = psutil.Process(pid)\n",
    "        print(pid, p.name())\n",
    "        if p.name() == name:\n",
    "            pids.append(pid)\n",
    "\n",
    "    for pid in pids:\n",
    "        p = psutil.Process(pid)\n",
    "        for son in p.children(recursive=True):\n",
    "            son.terminate()\n",
    "        p.terminate()\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    name = 'python'\n",
    "    #kill_process(name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6d75a5a5-d42e-4b22-af11-da893ffa4917",
   "metadata": {},
   "outputs": [],
   "source": [
    "import importlib\n",
    "\n",
    "module_name = 'os'\n",
    "module = importlib.import_module(module_name)\n",
    "for item in dir(module):\n",
    "    item = getattr(module, item)\n",
    "    if isinstance(item, type):\n",
    "        print(item)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "882658be-7661-428b-aa06-3a4ec6a508ae",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "print(os._Environ.values)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2a1bab37-bd55-4ed3-a063-061fbca61ef2",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
